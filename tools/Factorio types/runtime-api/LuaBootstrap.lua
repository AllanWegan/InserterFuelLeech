---@meta _

--$Factorio 2.0.9
--$Generator 1.1.47
--$Section runtime-api/LuaBootstrap
-- This file is automatically generated. Edits will be overwritten without warning.

do
---@class LuaBootstrap.feature_flags
---@field quality boolean
---@field rail_bridges boolean
---@field space_travel boolean
---@field spoiling boolean
---@field freezing boolean
---@field segmented_units boolean
---@field expansion_shaders boolean
local LuaBootstrap_feature_flags={
}
end

do
---@class LuaBootstrap.level
---Is this level a simulation? (The main menu and 'Tips and tricks' use simulations)
---@field is_simulation? boolean
---Is this level a tutorial?
---@field is_tutorial? boolean
---The campaign name if any.
---@field campaign_name? string
---The level name.
---@field level_name string
---The mod name if any.
---@field mod_name? string
local LuaBootstrap_level={
}
end

do
---@class LuaBootstrap.raise_biter_base_built_param
---The entity that was built.
---@field entity LuaEntity
local LuaBootstrap_raise_biter_base_built_param={
}
end

do
---@class LuaBootstrap.raise_console_chat_param
---The player doing the chatting.
---@field player_index uint
---The chat message to send.
---@field message string
local LuaBootstrap_raise_console_chat_param={
}
end

do
---@class LuaBootstrap.raise_market_item_purchased_param
---The player who did the purchasing.
---@field player_index uint
---The market entity.
---@field market LuaEntity
---The index of the offer purchased.
---@field offer_index uint
---The amount of offers purchased.
---@field count uint
local LuaBootstrap_raise_market_item_purchased_param={
}
end

do
---@class LuaBootstrap.raise_player_crafted_item_param
---The item that has been crafted.
---@field item_stack LuaItemStack
---The player doing the crafting.
---@field player_index uint
---The recipe used to craft this item.
---@field recipe RecipeID
local LuaBootstrap_raise_player_crafted_item_param={
}
end

do
---@class LuaBootstrap.raise_player_fast_transferred_param
---The player transferred from or to.
---@field player_index uint
---The entity transferred from or to.
---@field entity LuaEntity
---Whether the transfer was from player to entity. If `false`, the transfer was from entity to player.
---@field from_player boolean
---Whether the transfer was a split action (half stack).
---@field is_split boolean
local LuaBootstrap_raise_player_fast_transferred_param={
}
end

do
---@class LuaBootstrap.raise_script_built_param
---The entity that has been built.
---@field entity LuaEntity
local LuaBootstrap_raise_script_built_param={
}
end

do
---@class LuaBootstrap.raise_script_destroy_param
---The entity that was destroyed.
---@field entity LuaEntity
local LuaBootstrap_raise_script_destroy_param={
}
end

do
---@class LuaBootstrap.raise_script_revive_param
---The entity that was revived.
---@field entity LuaEntity
---The tags associated with this entity, if any.
---@field tags? Tags
local LuaBootstrap_raise_script_revive_param={
}
end

do
---@class LuaBootstrap.raise_script_set_tiles_param
---The surface whose tiles have been changed.
---@field surface_index uint
---The tiles that have been changed.
---@field tiles (Tile)[]
local LuaBootstrap_raise_script_set_tiles_param={
}
end

do
---@class LuaBootstrap.raise_script_teleported_param
---The entity that was teleported.
---@field entity LuaEntity
---The entity's surface before the teleportation.
---@field old_surface_index uint8
---The entity's position before the teleportation.
---@field old_position MapPosition
local LuaBootstrap_raise_script_teleported_param={
}
end

do
---Entry point for registering event handlers. It is accessible through the global object named `script`.
---
---[View Documentation](https://lua-api.factorio.com/latest/classes/LuaBootstrap.html)
---@class LuaBootstrap:LuaObject
---A dictionary listing the names of all currently active mods and mapping them to their version.
---
---[View Documentation](https://lua-api.factorio.com/latest/classes/LuaBootstrap.html#active_mods)
---
---### Example
---
---```
----- This will print the names and versions of all active mods to the console.
---for name, version in pairs(script.active_mods) do
---  game.print(name .. " version " .. version)
---end
---```
---@field active_mods {[string]:string}
---A dictionary of feature flags mapping to whether they are enabled.
---
---[View Documentation](https://lua-api.factorio.com/latest/classes/LuaBootstrap.html#feature_flags)
---@field feature_flags LuaBootstrap.feature_flags
---Information about the currently running scenario/campaign/tutorial.
---
---[View Documentation](https://lua-api.factorio.com/latest/classes/LuaBootstrap.html#level)
---@field level LuaBootstrap.level
---The name of the mod from the environment this is used in.
---
---[View Documentation](https://lua-api.factorio.com/latest/classes/LuaBootstrap.html#mod_name)
---@field mod_name string
---The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.
---
---[View Documentation](https://lua-api.factorio.com/latest/classes/LuaBootstrap.html#object_name)
---@field object_name string
script={
---Generate a new, unique event ID that can be used to raise custom events with [LuaBootstrap::raise\_event](https://lua-api.factorio.com/latest/classes/LuaBootstrap.html#raise_event).
---
---[View Documentation](https://lua-api.factorio.com/latest/classes/LuaBootstrap.html#generate_event_name)
---@return uint  #The newly generated event ID.
generate_event_name = function() end;
---Gets the filters for the given event.
---
---[View Documentation](https://lua-api.factorio.com/latest/classes/LuaBootstrap.html#get_event_filter)
---@param event uint ID of the event to get.
---@return EventFilter?  #The filters or `nil` if none are defined.
get_event_filter = function(event) end;
---Find the event handler for an event.
---
---[View Documentation](https://lua-api.factorio.com/latest/classes/LuaBootstrap.html#get_event_handler)
---@param event uint The event identifier to get a handler for.
---@return fun(p1:EventData)?  #Reference to the function currently registered as the handler, if it was found.
get_event_handler = function(event) end;
---Gets the mod event order as a string.
---
---[View Documentation](https://lua-api.factorio.com/latest/classes/LuaBootstrap.html#get_event_order)
---@return string 
get_event_order = function() end;
---Register a function to be run when mod configuration changes.
---
---This is called when the game version or any mod version changed, when any mod was added or removed, when a startup setting has changed, when any prototypes have been added or removed, or when a migration was applied. It allows the mod to make any changes it deems appropriate to both the data structures in its [storage](runtime:storage) table or to the game state through [LuaGameScript](https://lua-api.factorio.com/latest/classes/LuaGameScript.html).
---
---For more context, refer to the [Data Lifecycle](https://lua-api.factorio.com/latest/auxiliary/data-lifecycle.html) page.
---
---[View Documentation](https://lua-api.factorio.com/latest/classes/LuaBootstrap.html#on_configuration_changed)
---@param handler (fun(p1:ConfigurationChangedData))|(nil) The handler for this event. Passing `nil` will unregister it.
on_configuration_changed = function(handler) end;
---Register a handler to run on the specified event(s). Each mod can only register once for every event, as any additional registration will overwrite the previous one. This holds true even if different filters are used for subsequent registrations.
---
---### Example
---
---```
----- Register for the on_tick event to print the current tick to console each tick
---script.on_event(defines.events.on_tick,
---function(event) game.print(event.tick) end)
---```
---
---### Example
---
---```
----- Register for the on_built_entity event, limiting it to only be received when a `"fast-inserter"` is built
---script.on_event(defines.events.on_built_entity,
---function(event) game.print("Gotta go fast!") end,
---{{filter = "name", name = "fast-inserter"}})
---```
---
---[View Documentation](https://lua-api.factorio.com/latest/classes/LuaBootstrap.html#on_event)
---@param event (defines.events)|(string)|(((defines.events)|(string))[]) The event(s) or custom-input to invoke the handler on.
---@param handler (fun(event:EventData))|(nil) The handler for this event. Passing `nil` will unregister it.
---@param filters? EventFilter The filters for this event. Can only be used when registering for individual events.
---@overload fun(event:string, handler:fun(event:EventData.CustomInputEvent))
---@overload fun(event:defines.events.on_achievement_gained, handler:fun(event:EventData.on_achievement_gained))
---@overload fun(event:defines.events.on_ai_command_completed, handler:fun(event:EventData.on_ai_command_completed))
---@overload fun(event:defines.events.on_area_cloned, handler:fun(event:EventData.on_area_cloned))
---@overload fun(event:defines.events.on_biter_base_built, handler:fun(event:EventData.on_biter_base_built))
---@overload fun(event:defines.events.on_brush_cloned, handler:fun(event:EventData.on_brush_cloned))
---@overload fun(event:defines.events.on_build_base_arrived, handler:fun(event:EventData.on_build_base_arrived))
---@overload fun(event:defines.events.on_built_entity, handler:fun(event:EventData.on_built_entity), filters?:(LuaPlayerBuiltEntityEventFilter)[])
---@overload fun(event:defines.events.on_cancelled_deconstruction, handler:fun(event:EventData.on_cancelled_deconstruction), filters?:(LuaEntityDeconstructionCancelledEventFilter)[])
---@overload fun(event:defines.events.on_cancelled_upgrade, handler:fun(event:EventData.on_cancelled_upgrade), filters?:(LuaUpgradeCancelledEventFilter)[])
---@overload fun(event:defines.events.on_character_corpse_expired, handler:fun(event:EventData.on_character_corpse_expired))
---@overload fun(event:defines.events.on_chart_tag_added, handler:fun(event:EventData.on_chart_tag_added))
---@overload fun(event:defines.events.on_chart_tag_modified, handler:fun(event:EventData.on_chart_tag_modified))
---@overload fun(event:defines.events.on_chart_tag_removed, handler:fun(event:EventData.on_chart_tag_removed))
---@overload fun(event:defines.events.on_chunk_charted, handler:fun(event:EventData.on_chunk_charted))
---@overload fun(event:defines.events.on_chunk_deleted, handler:fun(event:EventData.on_chunk_deleted))
---@overload fun(event:defines.events.on_chunk_generated, handler:fun(event:EventData.on_chunk_generated))
---@overload fun(event:defines.events.on_combat_robot_expired, handler:fun(event:EventData.on_combat_robot_expired))
---@overload fun(event:defines.events.on_console_chat, handler:fun(event:EventData.on_console_chat))
---@overload fun(event:defines.events.on_console_command, handler:fun(event:EventData.on_console_command))
---@overload fun(event:defines.events.on_cutscene_cancelled, handler:fun(event:EventData.on_cutscene_cancelled))
---@overload fun(event:defines.events.on_cutscene_finished, handler:fun(event:EventData.on_cutscene_finished))
---@overload fun(event:defines.events.on_cutscene_started, handler:fun(event:EventData.on_cutscene_started))
---@overload fun(event:defines.events.on_cutscene_waypoint_reached, handler:fun(event:EventData.on_cutscene_waypoint_reached))
---@overload fun(event:defines.events.on_entity_cloned, handler:fun(event:EventData.on_entity_cloned), filters?:(LuaEntityClonedEventFilter)[])
---@overload fun(event:defines.events.on_entity_color_changed, handler:fun(event:EventData.on_entity_color_changed))
---@overload fun(event:defines.events.on_entity_damaged, handler:fun(event:EventData.on_entity_damaged), filters?:(LuaEntityDamagedEventFilter)[])
---@overload fun(event:defines.events.on_entity_died, handler:fun(event:EventData.on_entity_died), filters?:(LuaEntityDiedEventFilter)[])
---@overload fun(event:defines.events.on_entity_logistic_slot_changed, handler:fun(event:EventData.on_entity_logistic_slot_changed))
---@overload fun(event:defines.events.on_entity_renamed, handler:fun(event:EventData.on_entity_renamed))
---@overload fun(event:defines.events.on_entity_settings_pasted, handler:fun(event:EventData.on_entity_settings_pasted))
---@overload fun(event:defines.events.on_entity_spawned, handler:fun(event:EventData.on_entity_spawned))
---@overload fun(event:defines.events.on_equipment_inserted, handler:fun(event:EventData.on_equipment_inserted))
---@overload fun(event:defines.events.on_equipment_removed, handler:fun(event:EventData.on_equipment_removed))
---@overload fun(event:defines.events.on_force_cease_fire_changed, handler:fun(event:EventData.on_force_cease_fire_changed))
---@overload fun(event:defines.events.on_force_created, handler:fun(event:EventData.on_force_created))
---@overload fun(event:defines.events.on_force_friends_changed, handler:fun(event:EventData.on_force_friends_changed))
---@overload fun(event:defines.events.on_force_reset, handler:fun(event:EventData.on_force_reset))
---@overload fun(event:defines.events.on_forces_merged, handler:fun(event:EventData.on_forces_merged))
---@overload fun(event:defines.events.on_forces_merging, handler:fun(event:EventData.on_forces_merging))
---@overload fun(event:defines.events.on_game_created_from_scenario, handler:fun(event:EventData.on_game_created_from_scenario))
---@overload fun(event:defines.events.on_gui_checked_state_changed, handler:fun(event:EventData.on_gui_checked_state_changed))
---@overload fun(event:defines.events.on_gui_click, handler:fun(event:EventData.on_gui_click))
---@overload fun(event:defines.events.on_gui_closed, handler:fun(event:EventData.on_gui_closed))
---@overload fun(event:defines.events.on_gui_confirmed, handler:fun(event:EventData.on_gui_confirmed))
---@overload fun(event:defines.events.on_gui_elem_changed, handler:fun(event:EventData.on_gui_elem_changed))
---@overload fun(event:defines.events.on_gui_hover, handler:fun(event:EventData.on_gui_hover))
---@overload fun(event:defines.events.on_gui_leave, handler:fun(event:EventData.on_gui_leave))
---@overload fun(event:defines.events.on_gui_location_changed, handler:fun(event:EventData.on_gui_location_changed))
---@overload fun(event:defines.events.on_gui_opened, handler:fun(event:EventData.on_gui_opened))
---@overload fun(event:defines.events.on_gui_selected_tab_changed, handler:fun(event:EventData.on_gui_selected_tab_changed))
---@overload fun(event:defines.events.on_gui_selection_state_changed, handler:fun(event:EventData.on_gui_selection_state_changed))
---@overload fun(event:defines.events.on_gui_switch_state_changed, handler:fun(event:EventData.on_gui_switch_state_changed))
---@overload fun(event:defines.events.on_gui_text_changed, handler:fun(event:EventData.on_gui_text_changed))
---@overload fun(event:defines.events.on_gui_value_changed, handler:fun(event:EventData.on_gui_value_changed))
---@overload fun(event:defines.events.on_land_mine_armed, handler:fun(event:EventData.on_land_mine_armed))
---@overload fun(event:defines.events.on_lua_shortcut, handler:fun(event:EventData.on_lua_shortcut))
---@overload fun(event:defines.events.on_marked_for_deconstruction, handler:fun(event:EventData.on_marked_for_deconstruction), filters?:(LuaEntityMarkedForDeconstructionEventFilter)[])
---@overload fun(event:defines.events.on_marked_for_upgrade, handler:fun(event:EventData.on_marked_for_upgrade), filters?:(LuaEntityMarkedForUpgradeEventFilter)[])
---@overload fun(event:defines.events.on_market_item_purchased, handler:fun(event:EventData.on_market_item_purchased))
---@overload fun(event:defines.events.on_mod_item_opened, handler:fun(event:EventData.on_mod_item_opened))
---@overload fun(event:defines.events.on_object_destroyed, handler:fun(event:EventData.on_object_destroyed))
---@overload fun(event:defines.events.on_permission_group_added, handler:fun(event:EventData.on_permission_group_added))
---@overload fun(event:defines.events.on_permission_group_deleted, handler:fun(event:EventData.on_permission_group_deleted))
---@overload fun(event:defines.events.on_permission_group_edited, handler:fun(event:EventData.on_permission_group_edited))
---@overload fun(event:defines.events.on_permission_string_imported, handler:fun(event:EventData.on_permission_string_imported))
---@overload fun(event:defines.events.on_picked_up_item, handler:fun(event:EventData.on_picked_up_item))
---@overload fun(event:defines.events.on_player_alt_reverse_selected_area, handler:fun(event:EventData.on_player_alt_reverse_selected_area))
---@overload fun(event:defines.events.on_player_alt_selected_area, handler:fun(event:EventData.on_player_alt_selected_area))
---@overload fun(event:defines.events.on_player_ammo_inventory_changed, handler:fun(event:EventData.on_player_ammo_inventory_changed))
---@overload fun(event:defines.events.on_player_armor_inventory_changed, handler:fun(event:EventData.on_player_armor_inventory_changed))
---@overload fun(event:defines.events.on_player_banned, handler:fun(event:EventData.on_player_banned))
---@overload fun(event:defines.events.on_player_built_tile, handler:fun(event:EventData.on_player_built_tile))
---@overload fun(event:defines.events.on_player_cancelled_crafting, handler:fun(event:EventData.on_player_cancelled_crafting))
---@overload fun(event:defines.events.on_player_changed_force, handler:fun(event:EventData.on_player_changed_force))
---@overload fun(event:defines.events.on_player_changed_position, handler:fun(event:EventData.on_player_changed_position))
---@overload fun(event:defines.events.on_player_changed_surface, handler:fun(event:EventData.on_player_changed_surface))
---@overload fun(event:defines.events.on_player_cheat_mode_disabled, handler:fun(event:EventData.on_player_cheat_mode_disabled))
---@overload fun(event:defines.events.on_player_cheat_mode_enabled, handler:fun(event:EventData.on_player_cheat_mode_enabled))
---@overload fun(event:defines.events.on_player_clicked_gps_tag, handler:fun(event:EventData.on_player_clicked_gps_tag))
---@overload fun(event:defines.events.on_player_configured_blueprint, handler:fun(event:EventData.on_player_configured_blueprint))
---@overload fun(event:defines.events.on_player_controller_changed, handler:fun(event:EventData.on_player_controller_changed))
---@overload fun(event:defines.events.on_player_crafted_item, handler:fun(event:EventData.on_player_crafted_item))
---@overload fun(event:defines.events.on_player_created, handler:fun(event:EventData.on_player_created))
---@overload fun(event:defines.events.on_player_cursor_stack_changed, handler:fun(event:EventData.on_player_cursor_stack_changed))
---@overload fun(event:defines.events.on_player_deconstructed_area, handler:fun(event:EventData.on_player_deconstructed_area))
---@overload fun(event:defines.events.on_player_demoted, handler:fun(event:EventData.on_player_demoted))
---@overload fun(event:defines.events.on_player_died, handler:fun(event:EventData.on_player_died))
---@overload fun(event:defines.events.on_player_display_density_scale_changed, handler:fun(event:EventData.on_player_display_density_scale_changed))
---@overload fun(event:defines.events.on_player_display_resolution_changed, handler:fun(event:EventData.on_player_display_resolution_changed))
---@overload fun(event:defines.events.on_player_display_scale_changed, handler:fun(event:EventData.on_player_display_scale_changed))
---@overload fun(event:defines.events.on_player_driving_changed_state, handler:fun(event:EventData.on_player_driving_changed_state))
---@overload fun(event:defines.events.on_player_dropped_item, handler:fun(event:EventData.on_player_dropped_item))
---@overload fun(event:defines.events.on_player_fast_transferred, handler:fun(event:EventData.on_player_fast_transferred))
---@overload fun(event:defines.events.on_player_flipped_entity, handler:fun(event:EventData.on_player_flipped_entity))
---@overload fun(event:defines.events.on_player_flushed_fluid, handler:fun(event:EventData.on_player_flushed_fluid))
---@overload fun(event:defines.events.on_player_gun_inventory_changed, handler:fun(event:EventData.on_player_gun_inventory_changed))
---@overload fun(event:defines.events.on_player_input_method_changed, handler:fun(event:EventData.on_player_input_method_changed))
---@overload fun(event:defines.events.on_player_joined_game, handler:fun(event:EventData.on_player_joined_game))
---@overload fun(event:defines.events.on_player_kicked, handler:fun(event:EventData.on_player_kicked))
---@overload fun(event:defines.events.on_player_left_game, handler:fun(event:EventData.on_player_left_game))
---@overload fun(event:defines.events.on_player_locale_changed, handler:fun(event:EventData.on_player_locale_changed))
---@overload fun(event:defines.events.on_player_main_inventory_changed, handler:fun(event:EventData.on_player_main_inventory_changed))
---@overload fun(event:defines.events.on_player_mined_entity, handler:fun(event:EventData.on_player_mined_entity), filters?:(LuaPlayerMinedEntityEventFilter)[])
---@overload fun(event:defines.events.on_player_mined_item, handler:fun(event:EventData.on_player_mined_item))
---@overload fun(event:defines.events.on_player_mined_tile, handler:fun(event:EventData.on_player_mined_tile))
---@overload fun(event:defines.events.on_player_muted, handler:fun(event:EventData.on_player_muted))
---@overload fun(event:defines.events.on_player_pipette, handler:fun(event:EventData.on_player_pipette))
---@overload fun(event:defines.events.on_player_placed_equipment, handler:fun(event:EventData.on_player_placed_equipment))
---@overload fun(event:defines.events.on_player_promoted, handler:fun(event:EventData.on_player_promoted))
---@overload fun(event:defines.events.on_player_removed, handler:fun(event:EventData.on_player_removed))
---@overload fun(event:defines.events.on_player_removed_equipment, handler:fun(event:EventData.on_player_removed_equipment))
---@overload fun(event:defines.events.on_player_repaired_entity, handler:fun(event:EventData.on_player_repaired_entity), filters?:(LuaPlayerRepairedEntityEventFilter)[])
---@overload fun(event:defines.events.on_player_respawned, handler:fun(event:EventData.on_player_respawned))
---@overload fun(event:defines.events.on_player_reverse_selected_area, handler:fun(event:EventData.on_player_reverse_selected_area))
---@overload fun(event:defines.events.on_player_rotated_entity, handler:fun(event:EventData.on_player_rotated_entity))
---@overload fun(event:defines.events.on_player_selected_area, handler:fun(event:EventData.on_player_selected_area))
---@overload fun(event:defines.events.on_player_set_quick_bar_slot, handler:fun(event:EventData.on_player_set_quick_bar_slot))
---@overload fun(event:defines.events.on_player_setup_blueprint, handler:fun(event:EventData.on_player_setup_blueprint))
---@overload fun(event:defines.events.on_player_toggled_alt_mode, handler:fun(event:EventData.on_player_toggled_alt_mode))
---@overload fun(event:defines.events.on_player_toggled_map_editor, handler:fun(event:EventData.on_player_toggled_map_editor))
---@overload fun(event:defines.events.on_player_trash_inventory_changed, handler:fun(event:EventData.on_player_trash_inventory_changed))
---@overload fun(event:defines.events.on_player_unbanned, handler:fun(event:EventData.on_player_unbanned))
---@overload fun(event:defines.events.on_player_unmuted, handler:fun(event:EventData.on_player_unmuted))
---@overload fun(event:defines.events.on_player_used_capsule, handler:fun(event:EventData.on_player_used_capsule))
---@overload fun(event:defines.events.on_player_used_spidertron_remote, handler:fun(event:EventData.on_player_used_spidertron_remote))
---@overload fun(event:defines.events.on_post_entity_died, handler:fun(event:EventData.on_post_entity_died), filters?:(LuaPostEntityDiedEventFilter)[])
---@overload fun(event:defines.events.on_pre_build, handler:fun(event:EventData.on_pre_build))
---@overload fun(event:defines.events.on_pre_chunk_deleted, handler:fun(event:EventData.on_pre_chunk_deleted))
---@overload fun(event:defines.events.on_pre_entity_settings_pasted, handler:fun(event:EventData.on_pre_entity_settings_pasted))
---@overload fun(event:defines.events.on_pre_ghost_deconstructed, handler:fun(event:EventData.on_pre_ghost_deconstructed), filters?:(LuaPreGhostDeconstructedEventFilter)[])
---@overload fun(event:defines.events.on_pre_ghost_upgraded, handler:fun(event:EventData.on_pre_ghost_upgraded), filters?:(LuaPreGhostUpgradedEventFilter)[])
---@overload fun(event:defines.events.on_pre_permission_group_deleted, handler:fun(event:EventData.on_pre_permission_group_deleted))
---@overload fun(event:defines.events.on_pre_permission_string_imported, handler:fun(event:EventData.on_pre_permission_string_imported))
---@overload fun(event:defines.events.on_pre_player_crafted_item, handler:fun(event:EventData.on_pre_player_crafted_item))
---@overload fun(event:defines.events.on_pre_player_died, handler:fun(event:EventData.on_pre_player_died))
---@overload fun(event:defines.events.on_pre_player_left_game, handler:fun(event:EventData.on_pre_player_left_game))
---@overload fun(event:defines.events.on_pre_player_mined_item, handler:fun(event:EventData.on_pre_player_mined_item), filters?:(LuaPrePlayerMinedEntityEventFilter)[])
---@overload fun(event:defines.events.on_pre_player_removed, handler:fun(event:EventData.on_pre_player_removed))
---@overload fun(event:defines.events.on_pre_player_toggled_map_editor, handler:fun(event:EventData.on_pre_player_toggled_map_editor))
---@overload fun(event:defines.events.on_pre_robot_exploded_cliff, handler:fun(event:EventData.on_pre_robot_exploded_cliff))
---@overload fun(event:defines.events.on_pre_scenario_finished, handler:fun(event:EventData.on_pre_scenario_finished))
---@overload fun(event:defines.events.on_pre_script_inventory_resized, handler:fun(event:EventData.on_pre_script_inventory_resized))
---@overload fun(event:defines.events.on_pre_surface_cleared, handler:fun(event:EventData.on_pre_surface_cleared))
---@overload fun(event:defines.events.on_pre_surface_deleted, handler:fun(event:EventData.on_pre_surface_deleted))
---@overload fun(event:defines.events.on_redo_applied, handler:fun(event:EventData.on_redo_applied))
---@overload fun(event:defines.events.on_research_cancelled, handler:fun(event:EventData.on_research_cancelled))
---@overload fun(event:defines.events.on_research_finished, handler:fun(event:EventData.on_research_finished))
---@overload fun(event:defines.events.on_research_moved, handler:fun(event:EventData.on_research_moved))
---@overload fun(event:defines.events.on_research_reversed, handler:fun(event:EventData.on_research_reversed))
---@overload fun(event:defines.events.on_research_started, handler:fun(event:EventData.on_research_started))
---@overload fun(event:defines.events.on_resource_depleted, handler:fun(event:EventData.on_resource_depleted))
---@overload fun(event:defines.events.on_robot_built_entity, handler:fun(event:EventData.on_robot_built_entity), filters?:(LuaRobotBuiltEntityEventFilter)[])
---@overload fun(event:defines.events.on_robot_built_tile, handler:fun(event:EventData.on_robot_built_tile))
---@overload fun(event:defines.events.on_robot_exploded_cliff, handler:fun(event:EventData.on_robot_exploded_cliff))
---@overload fun(event:defines.events.on_robot_mined, handler:fun(event:EventData.on_robot_mined))
---@overload fun(event:defines.events.on_robot_mined_entity, handler:fun(event:EventData.on_robot_mined_entity), filters?:(LuaRobotMinedEntityEventFilter)[])
---@overload fun(event:defines.events.on_robot_mined_tile, handler:fun(event:EventData.on_robot_mined_tile))
---@overload fun(event:defines.events.on_robot_pre_mined, handler:fun(event:EventData.on_robot_pre_mined), filters?:(LuaPreRobotMinedEntityEventFilter)[])
---@overload fun(event:defines.events.on_rocket_launch_ordered, handler:fun(event:EventData.on_rocket_launch_ordered))
---@overload fun(event:defines.events.on_rocket_launched, handler:fun(event:EventData.on_rocket_launched))
---@overload fun(event:defines.events.on_runtime_mod_setting_changed, handler:fun(event:EventData.on_runtime_mod_setting_changed))
---@overload fun(event:defines.events.on_script_inventory_resized, handler:fun(event:EventData.on_script_inventory_resized))
---@overload fun(event:defines.events.on_script_path_request_finished, handler:fun(event:EventData.on_script_path_request_finished))
---@overload fun(event:defines.events.on_script_trigger_effect, handler:fun(event:EventData.on_script_trigger_effect))
---@overload fun(event:defines.events.on_sector_scanned, handler:fun(event:EventData.on_sector_scanned), filters?:(LuaSectorScannedEventFilter)[])
---@overload fun(event:defines.events.on_segment_entity_created, handler:fun(event:EventData.on_segment_entity_created))
---@overload fun(event:defines.events.on_selected_entity_changed, handler:fun(event:EventData.on_selected_entity_changed))
---@overload fun(event:defines.events.on_space_platform_built_entity, handler:fun(event:EventData.on_space_platform_built_entity), filters?:(LuaPlatformBuiltEntityEventFilter)[])
---@overload fun(event:defines.events.on_space_platform_built_tile, handler:fun(event:EventData.on_space_platform_built_tile))
---@overload fun(event:defines.events.on_space_platform_changed_state, handler:fun(event:EventData.on_space_platform_changed_state))
---@overload fun(event:defines.events.on_space_platform_mined_entity, handler:fun(event:EventData.on_space_platform_mined_entity), filters?:(LuaPlatformMinedEntityEventFilter)[])
---@overload fun(event:defines.events.on_space_platform_mined_item, handler:fun(event:EventData.on_space_platform_mined_item))
---@overload fun(event:defines.events.on_space_platform_mined_tile, handler:fun(event:EventData.on_space_platform_mined_tile))
---@overload fun(event:defines.events.on_space_platform_pre_mined, handler:fun(event:EventData.on_space_platform_pre_mined), filters?:(LuaPrePlatformMinedEntityEventFilter)[])
---@overload fun(event:defines.events.on_spider_command_completed, handler:fun(event:EventData.on_spider_command_completed))
---@overload fun(event:defines.events.on_string_translated, handler:fun(event:EventData.on_string_translated))
---@overload fun(event:defines.events.on_surface_cleared, handler:fun(event:EventData.on_surface_cleared))
---@overload fun(event:defines.events.on_surface_created, handler:fun(event:EventData.on_surface_created))
---@overload fun(event:defines.events.on_surface_deleted, handler:fun(event:EventData.on_surface_deleted))
---@overload fun(event:defines.events.on_surface_imported, handler:fun(event:EventData.on_surface_imported))
---@overload fun(event:defines.events.on_surface_renamed, handler:fun(event:EventData.on_surface_renamed))
---@overload fun(event:defines.events.on_technology_effects_reset, handler:fun(event:EventData.on_technology_effects_reset))
---@overload fun(event:defines.events.on_tick, handler:fun(event:EventData.on_tick))
---@overload fun(event:defines.events.on_train_changed_state, handler:fun(event:EventData.on_train_changed_state))
---@overload fun(event:defines.events.on_train_created, handler:fun(event:EventData.on_train_created))
---@overload fun(event:defines.events.on_train_schedule_changed, handler:fun(event:EventData.on_train_schedule_changed))
---@overload fun(event:defines.events.on_trigger_created_entity, handler:fun(event:EventData.on_trigger_created_entity))
---@overload fun(event:defines.events.on_trigger_fired_artillery, handler:fun(event:EventData.on_trigger_fired_artillery))
---@overload fun(event:defines.events.on_undo_applied, handler:fun(event:EventData.on_undo_applied))
---@overload fun(event:defines.events.on_unit_added_to_group, handler:fun(event:EventData.on_unit_added_to_group))
---@overload fun(event:defines.events.on_unit_group_created, handler:fun(event:EventData.on_unit_group_created))
---@overload fun(event:defines.events.on_unit_group_finished_gathering, handler:fun(event:EventData.on_unit_group_finished_gathering))
---@overload fun(event:defines.events.on_unit_removed_from_group, handler:fun(event:EventData.on_unit_removed_from_group))
---@overload fun(event:defines.events.on_worker_robot_expired, handler:fun(event:EventData.on_worker_robot_expired))
---@overload fun(event:defines.events.script_raised_built, handler:fun(event:EventData.script_raised_built), filters?:(LuaScriptRaisedBuiltEventFilter)[])
---@overload fun(event:defines.events.script_raised_destroy, handler:fun(event:EventData.script_raised_destroy), filters?:(LuaScriptRaisedDestroyEventFilter)[])
---@overload fun(event:defines.events.script_raised_revive, handler:fun(event:EventData.script_raised_revive), filters?:(LuaScriptRaisedReviveEventFilter)[])
---@overload fun(event:defines.events.script_raised_set_tiles, handler:fun(event:EventData.script_raised_set_tiles))
---@overload fun(event:defines.events.script_raised_teleported, handler:fun(event:EventData.script_raised_teleported), filters?:(LuaScriptRaisedTeleportedEventFilter)[])
---@overload fun(event:uint, handler:fun(event:EventData))
on_event = function(event, handler, filters) end;
---Register a function to be run on mod initialization.
---
---This is only called when a new save game is created or when a save file is loaded that previously didn't contain the mod. During it, the mod gets the chance to set up initial values that it will use for its lifetime. It has full access to [LuaGameScript](https://lua-api.factorio.com/latest/classes/LuaGameScript.html) and the [storage](runtime:storage) table and can change anything about them that it deems appropriate. No other events will be raised for the mod until it has finished this step.
---
---For more context, refer to the [Data Lifecycle](https://lua-api.factorio.com/latest/auxiliary/data-lifecycle.html) page.
---
---### Example
---
---```
----- Initialize a `players` table in `storage` for later use
---script.on_init(function()
---  storage.players = {}
---end)
---```
---
---[View Documentation](https://lua-api.factorio.com/latest/classes/LuaBootstrap.html#on_init)
---@param handler (function)|(nil) The handler for this event. Passing `nil` will unregister it.
on_init = function(handler) end;
---Register a function to be run on save load. This is only called for mods that have been part of the save previously, or for players connecting to a running multiplayer session.
---
---It gives the mod the opportunity to rectify potential differences in local state introduced by the save/load cycle. Doing anything other than the following three will lead to desyncs, breaking multiplayer and replay functionality. Access to [LuaGameScript](https://lua-api.factorio.com/latest/classes/LuaGameScript.html) is not available. The [storage](runtime:storage) table can be accessed and is safe to read from, but not write to, as doing so will lead to an error.
---
---The only legitimate uses of this event are these:
---
---* Re-setup [metatables](https://www.lua.org/pil/13.html) as they are not persisted through the save/load cycle.
---
---* Re-setup conditional event handlers, meaning subscribing to an event only when some condition is met to save processing time.
---
---* Create local references to data stored in the [storage](runtime:storage) table.
---
---For all other purposes, [LuaBootstrap::on\_init](https://lua-api.factorio.com/latest/classes/LuaBootstrap.html#on_init), [LuaBootstrap::on\_configuration\_changed](https://lua-api.factorio.com/latest/classes/LuaBootstrap.html#on_configuration_changed) or [migrations](https://lua-api.factorio.com/latest/auxiliary/migrations.html) should be used instead.
---
---For more context, refer to the [Data Lifecycle](https://lua-api.factorio.com/latest/auxiliary/data-lifecycle.html) page.
---
---[View Documentation](https://lua-api.factorio.com/latest/classes/LuaBootstrap.html#on_load)
---@param handler (function)|(nil) The handler for this event. Passing `nil` will unregister it.
on_load = function(handler) end;
---Register a handler to run every nth-tick(s). When the game is on tick 0 it will trigger all registered handlers.
---
---[View Documentation](https://lua-api.factorio.com/latest/classes/LuaBootstrap.html#on_nth_tick)
---@param tick (uint)|((uint)[])|(nil) The nth-tick(s) to invoke the handler on. Passing `nil` as the only parameter will unregister all nth-tick handlers.
---@param handler (fun(p1:NthTickEventData))|(nil) The handler to run. Passing `nil` will unregister it for the provided nth-tick(s).
on_nth_tick = function(tick, handler) end;
---**Events:**
---
---* Will raise [on\_biter\_base\_built](https://lua-api.factorio.com/latest/events.html#on_biter_base_built) instantly.
---  Raised with the provided arguments.
---
---[View Documentation](https://lua-api.factorio.com/latest/classes/LuaBootstrap.html#raise_biter_base_built)
---@param param LuaBootstrap.raise_biter_base_built_param 
raise_biter_base_built = function(param) end;
---**Events:**
---
---* Will raise [on\_console\_chat](https://lua-api.factorio.com/latest/events.html#on_console_chat) instantly.
---  Raised with the provided arguments.
---
---[View Documentation](https://lua-api.factorio.com/latest/classes/LuaBootstrap.html#raise_console_chat)
---@param param LuaBootstrap.raise_console_chat_param 
raise_console_chat = function(param) end;
---Raise an event. Only events generated with [LuaBootstrap::generate\_event\_name](https://lua-api.factorio.com/latest/classes/LuaBootstrap.html#generate_event_name) and the following can be raised:
---
---Events that can be raised manually:
---
---* [on\_console\_chat](https://lua-api.factorio.com/latest/events.html#on_console_chat)
---* [on\_player\_crafted\_item](https://lua-api.factorio.com/latest/events.html#on_player_crafted_item)
---* [on\_player\_fast\_transferred](https://lua-api.factorio.com/latest/events.html#on_player_fast_transferred)
---* [on\_biter\_base\_built](https://lua-api.factorio.com/latest/events.html#on_biter_base_built)
---* [on\_market\_item\_purchased](https://lua-api.factorio.com/latest/events.html#on_market_item_purchased)
---* [script\_raised\_built](https://lua-api.factorio.com/latest/events.html#script_raised_built)
---* [script\_raised\_destroy](https://lua-api.factorio.com/latest/events.html#script_raised_destroy)
---* [script\_raised\_revive](https://lua-api.factorio.com/latest/events.html#script_raised_revive)
---* [script\_raised\_teleported](https://lua-api.factorio.com/latest/events.html#script_raised_teleported)
---* [script\_raised\_set\_tiles](https://lua-api.factorio.com/latest/events.html#script_raised_set_tiles)
---
---### Example
---
---```
----- Raise the on_console_chat event with the desired message 'from' the first player
---local data = {player_index = 1, message = "Hello friends!"}
---script.raise_event(defines.events.on_console_chat, data)
---```
---
---[View Documentation](https://lua-api.factorio.com/latest/classes/LuaBootstrap.html#raise_event)
---@param event (uint)|(string) ID or name of the event to raise.
---@param data table Table with extra data that will be passed to the event handler. Any invalid LuaObjects will silently stop the event from being raised.
raise_event = function(event, data) end;
---**Events:**
---
---* Will raise [on\_market\_item\_purchased](https://lua-api.factorio.com/latest/events.html#on_market_item_purchased) instantly.
---  Raised with the provided arguments.
---
---[View Documentation](https://lua-api.factorio.com/latest/classes/LuaBootstrap.html#raise_market_item_purchased)
---@param param LuaBootstrap.raise_market_item_purchased_param 
raise_market_item_purchased = function(param) end;
---**Events:**
---
---* Will raise [on\_player\_crafted\_item](https://lua-api.factorio.com/latest/events.html#on_player_crafted_item) instantly.
---  Raised with the provided arguments.
---
---[View Documentation](https://lua-api.factorio.com/latest/classes/LuaBootstrap.html#raise_player_crafted_item)
---@param param LuaBootstrap.raise_player_crafted_item_param 
raise_player_crafted_item = function(param) end;
---**Events:**
---
---* Will raise [on\_player\_fast\_transferred](https://lua-api.factorio.com/latest/events.html#on_player_fast_transferred) instantly.
---  Raised with the provided arguments.
---
---[View Documentation](https://lua-api.factorio.com/latest/classes/LuaBootstrap.html#raise_player_fast_transferred)
---@param param LuaBootstrap.raise_player_fast_transferred_param 
raise_player_fast_transferred = function(param) end;
---**Events:**
---
---* Will raise [script\_raised\_built](https://lua-api.factorio.com/latest/events.html#script_raised_built) instantly.
---  Raised with the provided arguments.
---
---[View Documentation](https://lua-api.factorio.com/latest/classes/LuaBootstrap.html#raise_script_built)
---@param param LuaBootstrap.raise_script_built_param 
raise_script_built = function(param) end;
---**Events:**
---
---* Will raise [script\_raised\_destroy](https://lua-api.factorio.com/latest/events.html#script_raised_destroy) instantly.
---  Raised with the provided arguments.
---
---[View Documentation](https://lua-api.factorio.com/latest/classes/LuaBootstrap.html#raise_script_destroy)
---@param param LuaBootstrap.raise_script_destroy_param 
raise_script_destroy = function(param) end;
---**Events:**
---
---* Will raise [script\_raised\_revive](https://lua-api.factorio.com/latest/events.html#script_raised_revive) instantly.
---  Raised with the provided arguments.
---
---[View Documentation](https://lua-api.factorio.com/latest/classes/LuaBootstrap.html#raise_script_revive)
---@param param LuaBootstrap.raise_script_revive_param 
raise_script_revive = function(param) end;
---**Events:**
---
---* Will raise [script\_raised\_set\_tiles](https://lua-api.factorio.com/latest/events.html#script_raised_set_tiles) instantly.
---  Raised with the provided arguments.
---
---[View Documentation](https://lua-api.factorio.com/latest/classes/LuaBootstrap.html#raise_script_set_tiles)
---@param param LuaBootstrap.raise_script_set_tiles_param 
raise_script_set_tiles = function(param) end;
---**Events:**
---
---* Will raise [script\_raised\_teleported](https://lua-api.factorio.com/latest/events.html#script_raised_teleported) instantly.
---  Raised with the provided arguments.
---
---[View Documentation](https://lua-api.factorio.com/latest/classes/LuaBootstrap.html#raise_script_teleported)
---@param param LuaBootstrap.raise_script_teleported_param 
raise_script_teleported = function(param) end;
---Register a metatable to have linkage recorded and restored when saving/loading.
---
---The metatable itself will not be saved. Instead, only the linkage to a registered metatable is saved, and the metatable registered under that name will be used when loading the table.
---
---`register_metatable()` can not be used in the console, in event listeners or during a `remote.call()`.
---
---The metatable first needs to be defined in the mod's root scope, then registered using this method. From then on, it will be properly restored for tables in [storage](runtime:storage).
---
---```
---local metatable = {
---  __index = function(key)
---    return "no value for key " .. key
---  end
---}
---script.register_metatable("my_metatable", metatable)
---```
---
---This previously defined `metatable` can then be set on any table as usual:
---
---```
---local table = {key="value"}
---setmetatable(table, metatable)
---```
---
---[View Documentation](https://lua-api.factorio.com/latest/classes/LuaBootstrap.html#register_metatable)
---@param name string The name of this metatable. Names must be unique per mod.
---@param metatable table The metatable to register.
register_metatable = function(name, metatable) end;
---Registers an object so that after it's destroyed, [on\_object\_destroyed](https://lua-api.factorio.com/latest/events.html#on_object_destroyed) is called.
---
---Once an object is registered, it stays registered until it is actually destroyed, even through save/load cycles. The registration is global across all mods, meaning once one mod registers an object, all mods listening to [on\_object\_destroyed](https://lua-api.factorio.com/latest/events.html#on_object_destroyed) will receive the event when it is destroyed. Registering the same object multiple times will still only fire the destruction event once, and will return the same registration number.
---
---Depending on when a given object is destroyed, [on\_object\_destroyed](https://lua-api.factorio.com/latest/events.html#on_object_destroyed) will either be fired at the end of the current tick or at the end of the next tick.
---
---TODOC
---
---```
---Type of provided object; defines.target_type; value of useful_id
---LuaCustomChartTag; defines.target_type.custom_chart_tag; $ref($runtime, LuaCustomChartTag::tag_number)
---LuaEntity; defines.target_type.entity; $ref($runtime, LuaEntity::unit_number)
---LuaEquipment; defines.target_type.equipment; 0
---LuaEquipmentGrid; defines.target_type.equipment_grid; $ref($runtime, LuaEquipmentGrid::unique_id)
---LuaItem; defines.target_type.item; $ref($runtime, LuaItem::item_number)
---LuaLogisticCell; defines.target_type.logistic_cell; 0
---LuaLogisticNetwork; defines.target_type.logistic_network; $ref($runtime, LuaLogisticNetwork::network_id)
---LuaLogisticSection; defines.target_type.logistic_section; 0
---LuaPermissionGroup; defines.target_type.permission_group; $ref($runtime, LuaPermissionGroup::group_id)
---LuaPlanet; defines.target_type.planet; 0
---LuaPlayer; defines.target_type.player; $ref($runtime, LuaPlayer::index)
---LuaRailPath; defines.target_type.rail_path; 0
---LuaRenderObject; defines.target_type.render_object; $ref($runtime, LuaRenderObject::id)
---LuaSpacePlatform; defines.target_type.space_platform; $ref($runtime, LuaSpacePlatform::index)
---LuaSurface; defines.target_type.surface; $ref($runtime, LuaSurface::index)
---LuaTrain; defines.target_type.train; $ref($runtime, LuaTrain::id)
---LuaCommandable; defines.target_type.commandable; $ref($runtime, LuaCommandable::id)
---LuaGuiElement, defines.target_type.gui_element; $ref($runtime, LuaGuiElement::index)
---```
---
---[View Documentation](https://lua-api.factorio.com/latest/classes/LuaBootstrap.html#register_on_object_destroyed)
---@param object (LuaCustomChartTag)|(LuaEntity)|(LuaEquipment)|(LuaEquipmentGrid)|(LuaGuiElement)|(LuaItem)|(LuaLogisticCell)|(LuaLogisticNetwork)|(LuaLogisticSection)|(LuaPermissionGroup)|(LuaPlanet)|(LuaPlayer)|(LuaRailPath)|(LuaRenderObject)|(LuaSpacePlatform)|(LuaSurface)|(LuaTrain)|(LuaCommandable) The object to register.
---@return uint64  #The registration number. It is used to identify the object in the [on\_object\_destroyed](https://lua-api.factorio.com/latest/events.html#on_object_destroyed) event.
---@return uint64  #Useful identifier of the object if it has one. This identifier is specific to the object type, for example for trains it is the value [LuaTrain::id](https://lua-api.factorio.com/latest/classes/LuaTrain.html#id).
---@return defines.target_type  #Type of the target object.
register_on_object_destroyed = function(object) end;
---Sets the filters for the given event. The filters are only retained when set after the actual event registration, because registering for an event with different or no filters will overwrite previously set ones.
---
---Limit the [on\_marked\_for\_deconstruction](https://lua-api.factorio.com/latest/events.html#on_marked_for_deconstruction) event to only be received when a non-ghost entity is marked for deconstruction.
---
---```
---script.set_event_filter(defines.events.on_marked_for_deconstruction, {{filter = "ghost", invert = true}})
---```
---
---Limit the [on\_built\_entity](https://lua-api.factorio.com/latest/events.html#on_built_entity) event to only be received when either a `unit` or a `unit-spawner` is built.
---
---```
---script.set_event_filter(defines.events.on_built_entity, {{filter = "type", type = "unit"}, {filter = "type", type = "unit-spawner"}})
---```
---
---Limit the [on\_entity\_damaged](https://lua-api.factorio.com/latest/events.html#on_entity_damaged) event to only be received when a `rail` is damaged by an `acid` attack.
---
---```
---script.set_event_filter(defines.events.on_entity_damaged, {{filter = "rail"}, {filter = "damage-type", type = "acid", mode = "and"}})
---```
---
---[View Documentation](https://lua-api.factorio.com/latest/classes/LuaBootstrap.html#set_event_filter)
---@param event uint ID of the event to filter.
---@param filters? EventFilter The filters or `nil` to clear them.
set_event_filter = function(event, filters) end;
}
end

