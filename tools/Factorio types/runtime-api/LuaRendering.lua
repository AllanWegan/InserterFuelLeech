---@meta _

--$Factorio 2.0.9
--$Generator 1.1.47
--$Section runtime-api/LuaRendering
-- This file is automatically generated. Edits will be overwritten without warning.

do
---@class LuaRendering.draw_animation_param
---Name of an [AnimationPrototype](https://lua-api.factorio.com/latest/prototypes/AnimationPrototype.html).
---@field animation string
---The orientation of the animation. Default is 0.
---@field orientation? RealOrientation
---Horizontal scale of the animation. Default is 1.
---@field x_scale? double
---Vertical scale of the animation. Default is 1.
---@field y_scale? double
---@field tint? Color
---Render layer of the animation. Defaults to `"arrow"`.
---@field render_layer? RenderLayer
---How many frames the animation goes forward per tick. Default is 1.
---@field animation_speed? double
---Offset of the animation in frames. Default is 0.
---@field animation_offset? double
---If given, the animation rotates so that it faces this target. Note that `orientation` is still applied to the animation.
---@field orientation_target? ScriptRenderTarget
---Only used if `orientation_target` is a LuaEntity.
---@field use_target_orientation? boolean
---Offsets the center of the animation if `orientation_target` is given. This offset will rotate together with the animation.
---@field oriented_offset? Vector
---Center of the animation.
---@field target ScriptRenderTarget
---@field surface SurfaceIdentification
---In ticks. Defaults to living forever.
---@field time_to_live? uint
---The forces that this object is rendered to. Passing `nil` or an empty table will render it to all forces.
---@field forces? ForceSet
---The players that this object is rendered to. Passing `nil` or an empty table will render it to all players.
---@field players? (PlayerIdentification)[]
---If this is rendered to anyone at all. Defaults to true.
---@field visible? boolean
---If this should only be rendered in alt mode. Defaults to false.
---@field only_in_alt_mode? boolean
local LuaRendering_draw_animation_param={
}
end

do
---@class LuaRendering.draw_arc_param
---@field color Color
---The radius of the outer edge of the arc, in tiles.
---@field max_radius double
---The radius of the inner edge of the arc, in tiles.
---@field min_radius double
---Where the arc starts, in radian.
---@field start_angle float
---The angle of the arc, in radian.
---@field angle float
---@field target ScriptRenderTarget
---@field surface SurfaceIdentification
---In ticks. Defaults to living forever.
---@field time_to_live? uint
---The forces that this object is rendered to. Passing `nil` or an empty table will render it to all forces.
---@field forces? ForceSet
---The players that this object is rendered to. Passing `nil` or an empty table will render it to all players.
---@field players? (PlayerIdentification)[]
---If this is rendered to anyone at all. Defaults to true.
---@field visible? boolean
---If this should be drawn below sprites and entities. Defaults to false.
---@field draw_on_ground? boolean
---If this should only be rendered in alt mode. Defaults to false.
---@field only_in_alt_mode? boolean
local LuaRendering_draw_arc_param={
}
end

do
---@class LuaRendering.draw_circle_param
---@field color Color
---In tiles.
---@field radius double
---Width of the outline, used only if filled = false. Value is in pixels (32 per tile). Defaults to 1.
---@field width? float
---If the circle should be filled. Defaults to false.
---@field filled? boolean
---@field target ScriptRenderTarget
---@field surface SurfaceIdentification
---In ticks. Defaults to living forever.
---@field time_to_live? uint
---The forces that this object is rendered to. Passing `nil` or an empty table will render it to all forces.
---@field forces? ForceSet
---The players that this object is rendered to. Passing `nil` or an empty table will render it to all players.
---@field players? (PlayerIdentification)[]
---If this is rendered to anyone at all. Defaults to true.
---@field visible? boolean
---If this should be drawn below sprites and entities. Defaults to false.
---@field draw_on_ground? boolean
---If this should only be rendered in alt mode. Defaults to false.
---@field only_in_alt_mode? boolean
local LuaRendering_draw_circle_param={
}
end

do
---@class LuaRendering.draw_light_param
---@field sprite SpritePath
---The orientation of the light. Default is 0.
---@field orientation? RealOrientation
---Default is 1.
---@field scale? float
---Default is 1.
---@field intensity? float
---The minimum darkness at which this light is rendered. Default is 0.
---@field minimum_darkness? float
---If this light has the same orientation as the entity target, default is false. Note that `orientation` is still applied to the sprite.
---@field oriented? boolean
---Defaults to white (no tint).
---@field color? Color
---Center of the light.
---@field target ScriptRenderTarget
---@field surface SurfaceIdentification
---In ticks. Defaults to living forever.
---@field time_to_live? uint
---The forces that this object is rendered to. Passing `nil` or an empty table will render it to all forces.
---@field forces? ForceSet
---The players that this object is rendered to. Passing `nil` or an empty table will render it to all players.
---@field players? (PlayerIdentification)[]
---If this is rendered to anyone at all. Defaults to true.
---@field visible? boolean
---If this should only be rendered in alt mode. Defaults to false.
---@field only_in_alt_mode? boolean
local LuaRendering_draw_light_param={
}
end

do
---@class LuaRendering.draw_line_param
---@field color Color
---In pixels (32 per tile).
---@field width float
---Length of the gaps that this line has, in tiles. Default is 0.
---@field gap_length? double
---Length of the dashes that this line has. Used only if gap\_length > 0. Default is 0.
---@field dash_length? double
---Starting offset to apply to dashes. Cannot be greater than dash\_length + gap\_length. Default is 0.
---@field dash_offset? double
---@field from ScriptRenderTarget
---@field to ScriptRenderTarget
---@field surface SurfaceIdentification
---In ticks. Defaults to living forever.
---@field time_to_live? uint
---The forces that this object is rendered to. Passing `nil` or an empty table will render it to all forces.
---@field forces? ForceSet
---The players that this object is rendered to. Passing `nil` or an empty table will render it to all players.
---@field players? (PlayerIdentification)[]
---If this is rendered to anyone at all. Defaults to true.
---@field visible? boolean
---If this should be drawn below sprites and entities. Defaults to false.
---@field draw_on_ground? boolean
---If this should only be rendered in alt mode. Defaults to false.
---@field only_in_alt_mode? boolean
local LuaRendering_draw_line_param={
}
end

do
---@class LuaRendering.draw_polygon_param
---@field color Color
---@field vertices (ScriptRenderTarget)[]
---Acts like an offset applied to all vertices that are not set to an entity.
---@field target? ScriptRenderTarget
---The orientation applied to all vertices. Default is 0.
---@field orientation? RealOrientation
---If given, the vertices (that are not set to an entity) rotate so that it faces this target. Note that `orientation` is still applied.
---@field orientation_target? ScriptRenderTarget
---Only used if `orientation_target` is a LuaEntity.
---@field use_target_orientation? boolean
---@field surface SurfaceIdentification
---In ticks. Defaults to living forever.
---@field time_to_live? uint
---The forces that this object is rendered to. Passing `nil` or an empty table will render it to all forces.
---@field forces? ForceSet
---The players that this object is rendered to. Passing `nil` or an empty table will render it to all players.
---@field players? (PlayerIdentification)[]
---If this is rendered to anyone at all. Defaults to true.
---@field visible? boolean
---If this should be drawn below sprites and entities. Defaults to false.
---@field draw_on_ground? boolean
---If this should only be rendered in alt mode. Defaults to false.
---@field only_in_alt_mode? boolean
local LuaRendering_draw_polygon_param={
}
end

do
---@class LuaRendering.draw_rectangle_param
---@field color Color
---Width of the outline, used only if filled = false. Value is in pixels (32 per tile). Defaults to 1.
---@field width? float
---If the rectangle should be filled. Defaults to false.
---@field filled? boolean
---@field left_top ScriptRenderTarget
---@field right_bottom ScriptRenderTarget
---@field surface SurfaceIdentification
---In ticks. Defaults to living forever.
---@field time_to_live? uint
---The forces that this object is rendered to. Passing `nil` or an empty table will render it to all forces.
---@field forces? ForceSet
---The players that this object is rendered to. Passing `nil` or an empty table will render it to all players.
---@field players? (PlayerIdentification)[]
---If this is rendered to anyone at all. Defaults to true.
---@field visible? boolean
---If this should be drawn below sprites and entities. Defaults to false.
---@field draw_on_ground? boolean
---If this should only be rendered in alt mode. Defaults to false.
---@field only_in_alt_mode? boolean
local LuaRendering_draw_rectangle_param={
}
end

do
---@class LuaRendering.draw_sprite_param
---@field sprite SpritePath
---The orientation of the sprite. Default is 0.
---@field orientation? RealOrientation
---Horizontal scale of the sprite. Default is 1.
---@field x_scale? double
---Vertical scale of the sprite. Default is 1.
---@field y_scale? double
---@field tint? Color
---Render layer of the sprite. Defaults to `"arrow"`.
---@field render_layer? RenderLayer
---If given, the sprite rotates so that it faces this target. Note that `orientation` is still applied to the sprite.
---@field orientation_target? ScriptRenderTarget
---Only used if `orientation_target` is a LuaEntity.
---@field use_target_orientation? boolean
---Offsets the center of the sprite if `orientation_target` is given. This offset will rotate together with the sprite.
---@field oriented_offset? Vector
---Center of the sprite.
---@field target ScriptRenderTarget
---@field surface SurfaceIdentification
---In ticks. Defaults to living forever.
---@field time_to_live? uint
---The forces that this object is rendered to. Passing `nil` or an empty table will render it to all forces.
---@field forces? ForceSet
---The players that this object is rendered to. Passing `nil` or an empty table will render it to all players.
---@field players? (PlayerIdentification)[]
---If this is rendered to anyone at all. Defaults to true.
---@field visible? boolean
---If this should only be rendered in alt mode. Defaults to false.
---@field only_in_alt_mode? boolean
local LuaRendering_draw_sprite_param={
}
end

do
---@class LuaRendering.draw_text_param
---The text to display.
---@field text LocalisedString
---@field surface SurfaceIdentification
---@field target ScriptRenderTarget
---@field color Color
---@field scale? double
---Name of font to use. Defaults to the same font as flying-text.
---@field font? string
---In ticks. Defaults to living forever.
---@field time_to_live? uint
---The forces that this object is rendered to. Passing `nil` or an empty table will render it to all forces.
---@field forces? ForceSet
---The players that this object is rendered to. Passing `nil` or an empty table will render it to all players.
---@field players? (PlayerIdentification)[]
---If this is rendered to anyone at all. Defaults to true.
---@field visible? boolean
---If this should be drawn below sprites and entities. Rich text does not support this option. Defaults to false.
---@field draw_on_ground? boolean
---The orientation of the text. Default is 0.
---@field orientation? RealOrientation
---Defaults to "left".
---@field alignment? TextAlign
---Defaults to "top".
---@field vertical_alignment? VerticalTextAlign
---Defaults to false. If true, the text scales with player zoom, resulting in it always being the same size on screen, and the size compared to the game world changes.
---@field scale_with_zoom? boolean
---If this should only be rendered in alt mode. Defaults to false.
---@field only_in_alt_mode? boolean
---If rich text rendering is enabled. Defaults to false.
---@field use_rich_text? boolean
local LuaRendering_draw_text_param={
}
end

do
---Allows rendering of geometric shapes, text and sprites in the game world through the global object named `rendering`. Each render object is identified by an id that is universally unique for the lifetime of a whole game.
---
---If an entity target of an object is destroyed or changes surface, then the object is also destroyed.
---
---[View Documentation](https://lua-api.factorio.com/latest/classes/LuaRendering.html)
---@class LuaRendering:LuaObject
---The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.
---
---[View Documentation](https://lua-api.factorio.com/latest/classes/LuaRendering.html#object_name)
---@field object_name string
rendering={
---Destroys all render objects.
---
---[View Documentation](https://lua-api.factorio.com/latest/classes/LuaRendering.html#clear)
---@param mod_name? string If provided, only the render objects created by this mod are destroyed. An empty string (`""`) refers to all objects not belonging to a mod, such as those created using console commands.
clear = function(mod_name) end;
---Create an animation.
---
---[View Documentation](https://lua-api.factorio.com/latest/classes/LuaRendering.html#draw_animation)
---@param param LuaRendering.draw_animation_param 
---@return LuaRenderObject 
draw_animation = function(param) end;
---Create an arc.
---
---[View Documentation](https://lua-api.factorio.com/latest/classes/LuaRendering.html#draw_arc)
---@param param LuaRendering.draw_arc_param 
---@return LuaRenderObject 
draw_arc = function(param) end;
---Create a circle.
---
---[View Documentation](https://lua-api.factorio.com/latest/classes/LuaRendering.html#draw_circle)
---@param param LuaRendering.draw_circle_param 
---@return LuaRenderObject 
draw_circle = function(param) end;
---Create a light.
---
---The base game uses the utility sprites `light_medium` and `light_small` for lights.
---
---[View Documentation](https://lua-api.factorio.com/latest/classes/LuaRendering.html#draw_light)
---@param param LuaRendering.draw_light_param 
---@return LuaRenderObject 
draw_light = function(param) end;
---Create a line.
---
---### Example
---
---```
----- Draw a white and 2 pixel wide line from {0, 0} to {2, 2}.
---rendering.draw_line{surface = game.player.surface, from = {0, 0}, to = {2, 2}, color = {1, 1, 1}, width = 2}
---```
---
---### Example
---
---```
----- Draw a red and 3 pixel wide line from {0, 0} to {0, 5}. The line has 1 tile long dashes and gaps.
---rendering.draw_line{surface = game.player.surface, from = {0, 0}, to = {0, 5}, color = {r = 1}, width = 3, gap_length = 1, dash_length = 1}
---```
---
---[View Documentation](https://lua-api.factorio.com/latest/classes/LuaRendering.html#draw_line)
---@param param LuaRendering.draw_line_param 
---@return LuaRenderObject 
draw_line = function(param) end;
---Create a triangle mesh defined by a triangle strip.
---
---[View Documentation](https://lua-api.factorio.com/latest/classes/LuaRendering.html#draw_polygon)
---@param param LuaRendering.draw_polygon_param 
---@return LuaRenderObject 
draw_polygon = function(param) end;
---Create a rectangle.
---
---### Example
---
---```
----- Draw a white and 1 pixel wide square outline with the corners {0, 0} and {2, 2}.
---rendering.draw_rectangle{surface = game.player.surface, left_top = {0, 0}, right_bottom = {2, 2}, color = {1, 1, 1}}
---```
---
---[View Documentation](https://lua-api.factorio.com/latest/classes/LuaRendering.html#draw_rectangle)
---@param param LuaRendering.draw_rectangle_param 
---@return LuaRenderObject 
draw_rectangle = function(param) end;
---Create a sprite.
---
---### Example
---
---```
----- This will draw an iron plate icon at the character's feet. The sprite will move together with the character.
---rendering.draw_sprite{sprite = "item.iron-plate", target = game.player.character, surface = game.player.surface}
---```
---
---### Example
---
---```
----- This will draw an iron plate icon at the character's head. The sprite will move together with the character.
---rendering.draw_sprite{sprite = "item.iron-plate", target = {entity = game.player.character, offset = {0, -2}}, surface = game.player.surface}
---```
---
---[View Documentation](https://lua-api.factorio.com/latest/classes/LuaRendering.html#draw_sprite)
---@param param LuaRendering.draw_sprite_param 
---@return LuaRenderObject 
draw_sprite = function(param) end;
---Create a text.
---
---Not all fonts support scaling.
---
---[View Documentation](https://lua-api.factorio.com/latest/classes/LuaRendering.html#draw_text)
---@param param LuaRendering.draw_text_param 
---@return LuaRenderObject 
draw_text = function(param) end;
---Gets an array of all valid objects.
---
---[View Documentation](https://lua-api.factorio.com/latest/classes/LuaRendering.html#get_all_objects)
---@param mod_name? string If provided, get only the render objects created by this mod. An empty string (`""`) refers to all objects not belonging to a mod, such as those created using console commands.
---@return (LuaRenderObject)[] 
get_all_objects = function(mod_name) end;
---Gives LuaRenderObject for given object ID. May return nil if object does not exist or is invalid.
---
---[View Documentation](https://lua-api.factorio.com/latest/classes/LuaRendering.html#get_object_by_id)
---@param object_id uint64 
---@return LuaRenderObject? 
get_object_by_id = function(object_id) end;
}
end

