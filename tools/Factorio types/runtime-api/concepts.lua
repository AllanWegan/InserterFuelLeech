---@meta _

--$Factorio 2.0.9
--$Generator 1.1.47
--$Section runtime-api/concepts
-- This file is automatically generated. Edits will be overwritten without warning.

do
---@class AchievementPrototypeFilter.base
---The condition to filter on.
---@field filter ("allowed-without-fight")|("type")
---How to combine this with the previous filter. Defaults to `"or"`. When evaluating the filters, `"and"` has higher precedence than `"or"`.
---@field mode? ("or")|("and")
---Inverts the condition. Default is `false`.
---@field invert? boolean
local AchievementPrototypeFilter_base={
}
end

---@alias AchievementPrototypeFilter (AchievementPrototypeFilter.type)|(AchievementPrototypeFilter.base)

do
---@class AchievementPrototypeFilter.type:AchievementPrototypeFilter.base
---The prototype type, or a list of acceptable types.
---@field type (string)|((string)[])
local AchievementPrototypeFilter_type={
}
end

do
---@class AdvancedMapGenSettings
---@field pollution PollutionMapSettings
---@field enemy_evolution EnemyEvolutionMapSettings
---@field enemy_expansion EnemyExpansionMapSettings
---@field difficulty_settings DifficultySettings
local AdvancedMapGenSettings={
}
end

do
---@class Alert
---The tick this alert was created.
---@field tick uint
---@field target? LuaEntity
---@field prototype? LuaEntityPrototype
---@field position? MapPosition
---The SignalID used for a custom alert. Only present for custom alerts.
---@field icon? SignalID
---The message for a custom alert. Only present for custom alerts.
---@field message? LocalisedString
local Alert={
}
end

---A [string](https://lua-api.factorio.com/latest/concepts.html#string) that specifies where a GUI element should be.
---
---[View Documentation](https://lua-api.factorio.com/latest/concepts.html#Alignment)
---@alias Alignment ("top-left")|("middle-left")|("left")|("bottom-left")|("top-center")|("middle-center")|("center")|("bottom-center")|("top-right")|("right")|("bottom-right")

do
---@class AmmoType
---@field action? (TriggerItem)[]
---@field target_type TargetType
---When `true`, the gun will be able to shoot even when the target is out of range. Only applies when `target_type` is `position`. The gun will fire at the maximum range in the direction of the target position. Defaults to `false`.
---@field clamp_position? boolean
---Energy consumption of a single shot, if applicable. Defaults to `0`.
---@field energy_consumption? double
---@field range_modifier? double
---@field cooldown_modifier? double
---@field consumption_modifier? float
local AmmoType={
}
end

---Any basic type (string, number, boolean), table, or LuaObject.
---
---[View Documentation](https://lua-api.factorio.com/latest/concepts.html#Any)
---@alias Any (string)|(boolean)|(number)|(table)|(LuaObject)

---Any basic type (string, number, boolean) or table.
---
---[View Documentation](https://lua-api.factorio.com/latest/concepts.html#AnyBasic)
---@alias AnyBasic (string)|(boolean)|(number)|(table)

do
---@class ArithmeticCombinatorParameters
---First signal to use in an operation. If not specified, the second argument will be the value of `first_constant`.
---@field first_signal? SignalID
---Second signal to use in an operation. If not specified, the second argument will be the value of `second_constant`.
---@field second_signal? SignalID
---Constant to use as the first argument of the operation. Has no effect when `first_signal` is set. Defaults to `0`.
---@field first_constant? int
---Constant to use as the second argument of the operation. Has no effect when `second_signal` is set. Defaults to `0`.
---@field second_constant? int
---When not specified, defaults to `"*"`.
---@field operation? ("*")|("/")|("+")|("-")|("%")|("^")|("<<")|(">>")|("AND")|("OR")|("XOR")
---Specifies the signal to output.
---@field output_signal? SignalID
local ArithmeticCombinatorParameters={
}
end

do
---@class AsteroidChunk
---The name of the asteroid chunk prototype.
---@field name string
---@field position MapPosition
---@field movement Vector
local AsteroidChunk={
}
end

---An asteroid chunk prototype may be specified in one of two ways.
---
---[View Documentation](https://lua-api.factorio.com/latest/concepts.html#AsteroidChunkID)
---@alias AsteroidChunkID (LuaAsteroidChunkPrototype)|(string)

do
---@class AsteroidChunkPrototypeFilter
---The condition to filter on.
---@field filter ("minable")
---How to combine this with the previous filter. Defaults to `"or"`. When evaluating the filters, `"and"` has higher precedence than `"or"`.
---@field mode? ("or")|("and")
---Inverts the condition. Default is `false`.
---@field invert? boolean
local AsteroidChunkPrototypeFilter={
}
end

do
---@class AsteroidMapSettings
---@field spawning_rate double
---@field max_ray_portals_expanded_per_tick uint
local AsteroidMapSettings={
}
end

do
---@class AttackParameterFluid
---Name of the [LuaFluidPrototype](https://lua-api.factorio.com/latest/classes/LuaFluidPrototype.html).
---@field type string
---Multiplier applied to the damage of an attack.
---@field damage_modifier double
local AttackParameterFluid={
}
end

do
---@class AttackParameters.base
---The type of AttackParameter.
---@field type ("projectile")|("stream")|("beam")
---Maximum range of attack.
---@field range float
---Minimum range of attack. Used with flamethrower turrets to prevent self-immolation.
---@field min_range float
---Defines how the range is determined.
---@field range_mode RangeMode
---When searching for the nearest enemy to attack, `fire_penalty` is added to the enemy's distance if they are on fire.
---@field fire_penalty float
---When searching for an enemy to attack, a higher `rotate_penalty` will discourage targeting enemies that would take longer to turn to face.
---@field rotate_penalty float
---When searching for an enemy to attack, a higher `health_penalty` will discourage targeting enemies with high health. A negative penalty will do the opposite.
---@field health_penalty float
---If less than `range`, the entity will choose a random distance between `range` and `min_attack_distance` and attack from that distance. Used for spitters.
---@field min_attack_distance float
---The arc that the entity can attack in as a fraction of a circle. A value of `1` means the full 360 degrees.
---@field turn_range float
---Multiplier applied to the damage of an attack.
---@field damage_modifier float
---Multiplier applied to the ammo consumption of an attack.
---@field ammo_consumption_modifier float
---Minimum amount of ticks between shots. If this is less than `1`, multiple shots can be performed per tick.
---@field cooldown float
---Number of ticks it takes for the weapon to actually shoot after it has been ordered to do so.
---@field warmup uint
---@field movement_slow_down_factor double
---@field movement_slow_down_cooldown float
---@field ammo_type? AmmoType
---List of the names of compatible [LuaAmmoCategoryPrototypes](https://lua-api.factorio.com/latest/classes/LuaAmmoCategoryPrototype.html).
---@field ammo_categories? (string)[]
local AttackParameters_base={
}
end

---@alias AttackParameters (AttackParameters.projectile)|(AttackParameters.stream)|(AttackParameters.base)

do
---@class AttackParameters.projectile:AttackParameters.base
---@field projectile_center Vector
---@field projectile_creation_distance float
---@field projectile_orientation_offset float
---@field shell_particle? CircularParticleCreationSpecification
---@field projectile_creation_parameters? (CircularProjectileCreationSpecification)[]
local AttackParameters_projectile={
}
end

do
---@class AttackParameters.stream:AttackParameters.base
---@field gun_barrel_length float
---@field gun_center_shift GunShift4Way
---@field fluid_consumption float
---@field fluids? (AttackParameterFluid)[]
---@field projectile_creation_parameters? (CircularProjectileCreationSpecification)[]
local AttackParameters_stream={
}
end

do
---@class AutoplaceControl
---For things that are placed as spots such as ores and enemy bases, frequency is generally proportional to number of spots placed per unit area. For continuous features such as forests, frequency is how compressed the probability function is over distance, i.e. the inverse of 'scale'. When the [LuaAutoplaceControlPrototype](https://lua-api.factorio.com/latest/classes/LuaAutoplaceControlPrototype.html) is of the category `"terrain"`, then scale is shown in the map generator GUI instead of frequency.
---@field frequency MapGenSize
---For things that are placed as spots, size is proportional to the area of each spot. For continuous features, size affects how much of the map is covered with the thing, and is called 'coverage' in the GUI.
---@field size MapGenSize
---Has different effects for different things, but generally affects the 'health' or density of a thing that is placed without affecting where it is placed. For trees, richness affects tree health.  For ores, richness multiplies the amount of ore at any given tile in a patch. Metadata about autoplace controls (such as whether or not 'richness' does anything for them) can be found in the [LuaAutoplaceControlPrototype](https://lua-api.factorio.com/latest/classes/LuaAutoplaceControlPrototype.html) by looking up `prototypes.autoplace_control[(control prototype name)]`, e.g. `prototypes.autoplace_control["enemy-base"].richness` is false, because enemy base autoplacement doesn't use richness.
---@field richness MapGenSize
local AutoplaceControl={
}
end

do
---@class AutoplaceSettings
---Whether missing autoplace names for this type should be default enabled. Always defined when reading autoplace settings.
---@field treat_missing_as_default? boolean
---Always defined when reading autoplace settings.
---@field settings? {[string]:AutoplaceControl}
local AutoplaceSettings={
}
end

do
---@class AutoplaceSpecification
---Control prototype name.
---@field control? string
---@field default_enabled boolean
---@field force string
---@field order string
---@field placement_density uint
---@field tile_restriction? (AutoplaceSpecificationRestriction)[]
---@field probability_expression NoiseExpression
---@field richness_expression? NoiseExpression
local AutoplaceSpecification={
}
end

do
---@class AutoplaceSpecificationRestriction
---Tile prototype name
---@field first? string
---Second prototype name
---@field second? string
local AutoplaceSpecificationRestriction={
}
end

do
---@class BeamTarget
---The target entity.
---@field entity? LuaEntity
---The target position.
---@field position? MapPosition
local BeamTarget={
}
end

do
---@class BlueprintEntity
---The entity's unique identifier in the blueprint.
---@field entity_number uint
---The prototype name of the entity.
---@field name string
---The position of the entity.
---@field position MapPosition
---The direction the entity is facing. Only present for entities that can face in different directions and when the entity is not facing north.
---@field direction? defines.direction
---Whether this entity is mirrored.
---@field mirror? boolean
---The prototype name of the entity's quality.
---@field quality? string
---The control behavior of the entity, if it has one. The format of the control behavior depends on the entity's type. Only relevant for entities that support control behaviors.
---@field control_behavior? BlueprintControlBehavior
---The items that the entity will request when revived, if any.
---@field items? (BlueprintInsertPlan)[]
---The entity tags of the entity, if there are any.
---@field tags? Tags
---The schedule of the entity, if it has one. Only relevant for locomotives.
---@field schedule? BlueprintSchedule
---Wires connected to this entity in the blueprint.
---@field wires? (BlueprintWire)[]
local BlueprintEntity={
}
end

do
---@class BlueprintInsertPlan
---The prototype name and quality of the item to request.
---@field id ItemIDAndQualityIDPair
---Describes the inventories to insert these items into.
---@field items ItemInventoryPositions
local BlueprintInsertPlan={
}
end

do
---@class BlueprintLogisticFilter
---@field index LogisticFilterIndex
---The type of the logistic filter.
---@field type? SignalIDType
---Name of the logistic filter.
---@field name? string
---The prototype name of the quality. `nil` for any quality.
---@field quality? string
---The comparator for quality. `nil` if any quality.
---@field comparator? ComparatorString
---@field count int
---@field max_count? ItemCountType
---Defaults to 0.
---@field minimum_delivery_count? ItemCountType
---@field import_from? string
local BlueprintLogisticFilter={
}
end

do
---@class BlueprintSchedule
---@field records? (BlueprintScheduleRecord)[]
---@field group? string
---@field interrupts? (BlueprintScheduleInterrupt)[]
local BlueprintSchedule={
}
end

do
---@class BlueprintScheduleInterrupt
---@field name? string
---@field conditions? (WaitCondition)[]
---@field targets? (BlueprintScheduleRecord)[]
---@field inside_interrupt boolean
local BlueprintScheduleInterrupt={
}
end

do
---@class BlueprintScheduleRecord
---Name of the station.
---@field station? string
---@field wait_conditions? (WaitCondition)[]
---Only present when the station is temporary, the value is then always `true`.
---@field temporary? boolean
---@field created_by_interrupt? boolean
---@field allows_unloading? boolean
local BlueprintScheduleRecord={
}
end

do
---@class BlueprintSignalIcon
---The icon to use.
---@field signal SignalID
---Index of the icon in the blueprint icons slots. An integer in the range \[1, 4].
---@field index uint
local BlueprintSignalIcon={
}
end

---Describes a single wire in the blueprint. The members of the tuple are, in order:
---
---* `source_entity_number`
---
---* `source_wire_connector_id`
---
---* `target_entity_number`
---
---* `target_wire_connector_id`
---
---[View Documentation](https://lua-api.factorio.com/latest/concepts.html#BlueprintWire)
---@alias BlueprintWire {[1]:uint, [2]:defines.wire_connector_id, [3]:uint, [4]:defines.wire_connector_id}

do
---@class BlueprintWireEnd
---@field entity BlueprintEntity
---@field connector defines.wire_connector_id
local BlueprintWireEnd={
}
end

do
---@class BoundingBox.0
---@field left_top MapPosition
---@field right_bottom MapPosition
---@field orientation? RealOrientation
local BoundingBox_0={
}
end

---Two positions, specifying the top-left and bottom-right corner of the box respectively. Like with [MapPosition](https://lua-api.factorio.com/latest/concepts.html#MapPosition), the names of the members may be omitted. When read from the game, the third member `orientation` is present if it is non-zero.
---
---[View Documentation](https://lua-api.factorio.com/latest/concepts.html#BoundingBox)
---
---### Example
---
---```
----- Explicit definition
---{left_top = {x = -2, y = -3}, right_bottom = {x = 5, y = 8}}
---```
---
---### Example
---
---```
----- Shorthand
---{{-2, -3}, {5, 8}}
---```
---@alias BoundingBox (BoundingBox.0)|({[1]:MapPosition, [2]:MapPosition})

---The name of a [LuaBurnerUsagePrototype](https://lua-api.factorio.com/latest/classes/LuaBurnerUsagePrototype.html).
---
---[View Documentation](https://lua-api.factorio.com/latest/concepts.html#BurnerUsageID)
---
---### Example
---
---```
---"fuel"
---```
---@alias BurnerUsageID string

do
---@class CapsuleAction.base
---@field type ("throw")|("equipment-remote")|("use-on-self")|("artillery-remote")|("destroy-cliffs")
local CapsuleAction_base={
}
end

---@alias CapsuleAction (CapsuleAction.artillery_remote)|(CapsuleAction.destroy_cliffs)|(CapsuleAction.equipment_remote)|(CapsuleAction.throw)|(CapsuleAction.use_on_self)|(CapsuleAction.base)

do
---@class CapsuleAction.artillery_remote:CapsuleAction.base
---Name of the [flare prototype](https://lua-api.factorio.com/latest/classes/LuaEntityPrototype.html).
---@field flare string
local CapsuleAction_artillery_remote={
}
end

do
---@class CapsuleAction.destroy_cliffs:CapsuleAction.base
---@field attack_parameters AttackParameters
---@field radius float
---@field timeout uint
local CapsuleAction_destroy_cliffs={
}
end

do
---@class CapsuleAction.equipment_remote:CapsuleAction.base
---Name of the [LuaEquipmentPrototype](https://lua-api.factorio.com/latest/classes/LuaEquipmentPrototype.html).
---@field equipment string
local CapsuleAction_equipment_remote={
}
end

do
---@class CapsuleAction.throw:CapsuleAction.base
---@field attack_parameters AttackParameters
---Whether using the capsule consumes an item from the stack.
---@field uses_stack boolean
local CapsuleAction_throw={
}
end

do
---@class CapsuleAction.use_on_self:CapsuleAction.base
---@field attack_parameters AttackParameters
local CapsuleAction_use_on_self={
}
end

do
---@class ChartTagSpec
---@field position MapPosition
---@field icon? SignalID
---@field text? string
---@field last_user? PlayerIdentification
local ChartTagSpec={
}
end

do
---@class ChunkPosition.0
---@field x int
---@field y int
local ChunkPosition_0={
}
end

---Coordinates of a chunk in a [LuaSurface](https://lua-api.factorio.com/latest/classes/LuaSurface.html) where each integer `x`/`y` represents a different chunk. This uses the same format as [MapPosition](https://lua-api.factorio.com/latest/concepts.html#MapPosition), meaning it can be specified either with or without explicit keys. A [MapPosition](https://lua-api.factorio.com/latest/concepts.html#MapPosition) can be translated to a ChunkPosition by dividing the `x`/`y` values by 32.
---
---[View Documentation](https://lua-api.factorio.com/latest/concepts.html#ChunkPosition)
---@alias ChunkPosition (ChunkPosition.0)|({[1]:int, [2]:int})

do
---@class ChunkPositionAndArea
---@field x int
---@field y int
---@field area BoundingBox
local ChunkPositionAndArea={
}
end

do
---@class CircuitCondition
---Specifies how the inputs should be compared. If not specified, defaults to `"<"`.
---@field comparator? ComparatorString
---Defaults to blank
---@field first_signal? SignalID
---What to compare `first_signal` to. If not specified, `first_signal` will be compared to `constant`.
---@field second_signal? SignalID
---Constant to compare `first_signal` to. Has no effect when `second_signal` is set. When neither `second_signal` nor `constant` are specified, the effect is as though `constant` were specified with the value `0`.
---@field constant? int
local CircuitCondition={
}
end

do
---@class CircuitConditionDefinition
---TODOC CircuitConditionDefinition now extends CircuitCondition, all fields of CircuitCondition should be pasted here directly
---@field condition CircuitCondition
---Whether the condition is currently fulfilled
---@field fulfilled? boolean
local CircuitConditionDefinition={
}
end

---[View Documentation](https://lua-api.factorio.com/latest/concepts.html#CircuitNetworkSelection)
---@alias CircuitNetworkSelection table

do
---@class CircularParticleCreationSpecification
---Name of the [LuaEntityPrototype](https://lua-api.factorio.com/latest/classes/LuaEntityPrototype.html).
---@field name string
---@field direction float
---@field direction_deviation float
---@field speed float
---@field speed_deviation float
---@field starting_frame_speed float
---@field starting_frame_speed_deviation float
---@field height float
---@field height_deviation float
---@field vertical_speed float
---@field vertical_speed_deviation float
---@field center Vector
---@field creation_distance double
---@field creation_distance_orientation double
---@field use_source_position boolean
local CircularParticleCreationSpecification={
}
end

---[View Documentation](https://lua-api.factorio.com/latest/concepts.html#CircularProjectileCreationSpecification)
---@alias CircularProjectileCreationSpecification {[1]:RealOrientation, [2]:Vector}

---[View Documentation](https://lua-api.factorio.com/latest/concepts.html#CliffOrientation)
---@alias CliffOrientation ("west-to-east")|("north-to-south")|("east-to-west")|("south-to-north")|("west-to-north")|("north-to-east")|("east-to-south")|("south-to-west")|("west-to-south")|("north-to-west")|("east-to-north")|("south-to-east")|("west-to-none")|("none-to-east")|("east-to-none")|("none-to-west")|("north-to-none")|("none-to-south")|("south-to-none")|("none-to-north")

do
---@class CliffPlacementSettings
---Name of the cliff prototype.
---@field name string
---Name of the autoplace control prototype.
---@field control string
---Elevation at which the first row of cliffs is placed. The default is `10`, and this cannot be set from the map generation GUI.
---@field cliff_elevation_0 float
---Elevation difference between successive rows of cliffs. This is inversely proportional to 'frequency' in the map generation GUI. Specifically, when set from the GUI the value is `40 / frequency`.
---@field cliff_elevation_interval float
---Smoothing makes cliffs straighter on rough elevation but makes placement inaccurate. 0 is no smoothing, 1 is full smoothing. Values outside of 0-1 are possible for specific effects but not recommended.
---@field cliff_smoothing float
---Corresponds to 'continuity' in the GUI. This value is not used directly, but is used by the 'cliffiness' noise expression, which in combination with elevation and the two cliff elevation properties drives cliff placement (cliffs are placed when elevation crosses the elevation contours defined by `cliff_elevation_0` and `cliff_elevation_interval` when 'cliffiness' is greater than `0.5`). The default 'cliffiness' expression interprets this value such that larger values result in longer unbroken walls of cliffs, and smaller values (between `0` and `1`) result in larger gaps in cliff walls.
---@field richness MapGenSize
local CliffPlacementSettings={
}
end

---The name of a [LuaCollisionLayerPrototype](https://lua-api.factorio.com/latest/classes/LuaCollisionLayerPrototype.html).
---
---[View Documentation](https://lua-api.factorio.com/latest/concepts.html#CollisionLayerID)
---
---### Example
---
---```
---"is_lower_object"
---```
---@alias CollisionLayerID string

do
---@class CollisionMask
---Every key in the dictionary is the name of one [layer](https://lua-api.factorio.com/latest/classes/LuaCollisionLayerPrototype.html) the object collides with. The value is meaningless and always `true`. An empty table means that no layers are set.
---@field layers {[string]:true}
---Any two entities that both have this option enabled on their prototype and have an identical collision mask layers list will not collide. Other collision mask options are not included in the identical layer list check. This does mean that two different prototypes with the same collision mask layers and this option enabled will not collide. Defaults to `false`.
---@field not_colliding_with_itself? boolean
---Uses the prototypes position rather than its collision box when doing collision checks with tile prototypes. Allows the prototype to overlap colliding tiles up until its center point. This is only respected for character movement and cars driven by players. Defaults to `false`.
---@field consider_tile_transitions? boolean
---Any prototype with this collision option will only be checked for collision with other prototype's collision masks if they are a tile. Defaults to `false`.
---@field colliding_with_tiles_only? boolean
local CollisionMask={
}
end

do
---@class Color.0
---@field r? float
---@field g? float
---@field b? float
---@field a? float
local Color_0={
}
end

---Red, green, blue and alpha values, all in range \[0, 1] or all in range \[0, 255] if any value is > 1. All values here are optional. Color channels default to `0`, the alpha channel defaults to `1`.
---
---Similar to [MapPosition](https://lua-api.factorio.com/latest/concepts.html#MapPosition), Color allows the short-hand notation of passing an array of exactly 3 or 4 numbers. The game usually expects colors to be in pre-multiplied form (color channels are pre-multiplied by alpha).
---
---[View Documentation](https://lua-api.factorio.com/latest/concepts.html#Color)
---
---### Example
---
---```
---red1 = {r = 0.5, g = 0, b = 0, a = 0.5}  -- Half-opacity red
---red2 = {r = 0.5, a = 0.5}                -- Same color as red1
---black = {}                               -- All channels omitted: black
---red1_short = {0.5, 0, 0, 0.5}            -- Same color as red1 in short-hand notation
---```
---@alias Color (Color.0)|({[1]:float, [2]:float, [3]:float, [4]:float})

do
---@class ColorModifier.0
---@field r? float
---@field g? float
---@field b? float
---@field a? float
local ColorModifier_0={
}
end

---Same as [Color](https://lua-api.factorio.com/latest/concepts.html#Color), but red, green, blue and alpha values can be any floating point number, without any special handling of the range \[1, 255].
---
---[View Documentation](https://lua-api.factorio.com/latest/concepts.html#ColorModifier)
---@alias ColorModifier (ColorModifier.0)|({[1]:float, [2]:float, [3]:float, [4]:float})

do
---@class Command.base
---Type of command. The remaining fields depend on the value of this field.
---@field type defines.command
local Command_base={
}
end

---@alias Command (Command.defines_command_attack)|(Command.defines_command_attack_area)|(Command.defines_command_build_base)|(Command.defines_command_compound)|(Command.defines_command_flee)|(Command.defines_command_go_to_location)|(Command.defines_command_group)|(Command.defines_command_stop)|(Command.defines_command_wander)|(Command.base)

do
---@class Command.defines_command_attack:Command.base
---@field target LuaEntity
---Defaults to `defines.distraction.by_enemy`.
---@field distraction? defines.distraction
local Command_defines_command_attack={
}
end

do
---@class Command.defines_command_attack_area:Command.base
---Center of the attack area.
---@field destination MapPosition
---Radius of the attack area.
---@field radius double
---Defaults to `defines.distraction.by_enemy`.
---@field distraction? defines.distraction
local Command_defines_command_attack_area={
}
end

do
---@class Command.defines_command_build_base:Command.base
---Where to build the base.
---@field destination MapPosition
---Defaults to `defines.distraction.by_enemy`.
---@field distraction? defines.distraction
---Whether the units should ignore expansion candidate chunks. When `false`, they will obey and not build a base in a non-candidate chunk. Defaults to `false`.
---@field ignore_planner? boolean
local Command_defines_command_build_base={
}
end

do
---@class Command.defines_command_compound:Command.base
---How the commands should be chained together.
---@field structure_type defines.compound_command
---The sub-commands.
---@field commands (Command)[]
local Command_defines_command_compound={
}
end

do
---@class Command.defines_command_flee:Command.base
---The entity to flee from
---@field from LuaEntity
---Defaults to `defines.distraction.by_enemy`.
---@field distraction? defines.distraction
local Command_defines_command_flee={
}
end

do
---@class Command.defines_command_go_to_location:Command.base
---The position to path to. Either this or `destination_entity` need to be specified. If both are, `destination_entity` is used.
---@field destination? MapPosition
---The entity to path to. Either this or `destination` need to be specified. If both are, `destination_entity` is used.
---@field destination_entity? LuaEntity
---Defaults to `defines.distraction.by_enemy`.
---@field distraction? defines.distraction
---Flags that affect pathfinder behavior.
---@field pathfind_flags? PathfinderFlags
---How close the pathfinder needs to get to its destination (in tiles). Defaults to `3`.
---@field radius? double
local Command_defines_command_go_to_location={
}
end

do
---@class Command.defines_command_group:Command.base
---The group whose command to follow.
---@field group LuaCommandable
---Defaults to `defines.distraction.by_enemy`.
---@field distraction? defines.distraction
---Whether the unit will use the group distraction or the commands distraction. Defaults to true.
---@field use_group_distraction? boolean
local Command_defines_command_group={
}
end

do
---@class Command.defines_command_stop:Command.base
---Defaults to `defines.distraction.by_enemy`.
---@field distraction? defines.distraction
---Ticks to wander before successfully completing the command. Default is max uint, which means stop forever.
---@field ticks_to_wait? uint
local Command_defines_command_stop={
}
end

do
---@class Command.defines_command_wander:Command.base
---Defaults to `defines.distraction.by_enemy`.
---@field distraction? defines.distraction
---Defaults to 10. Does not apply when `wander_in_group` is `true`.
---@field radius? double
---When commanding a group, defines how the group will wander. When `true`, the units in the group will wander around inside the group's radius, just like gathering biters. When `false`, the units will wander as a group, ie they will all walk together in the same random direction. Default is true for groups. Passing true for a single unit is an error.
---@field wander_in_group? boolean
---Ticks to wander before successfully completing the command. Default is max uint, which means wander forever.
---@field ticks_to_wait? uint
local Command_defines_command_wander={
}
end

---A string that specifies how the inputs should be compared.
---
---While the API accepts both versions for `"less/greater than or equal to"` and `"not equal"`, it'll always return `"≥"`, `"≤"` or `"≠"` respectively when reading them back.
---
---[View Documentation](https://lua-api.factorio.com/latest/concepts.html#ComparatorString)
---@alias ComparatorString ("=")|(">")|("<")|("≥")|(">=")|("≤")|("<=")|("≠")|("!=")

do
---@class CompiledLogisticFilter
---@field index LogisticFilterIndex
---The type of the logistic filter.
---@field type? SignalIDType
---Name of the logistic filter.
---@field name? string
---The prototype name of the quality. `nil` for any quality.
---@field quality? string
---The comparator for quality. `nil` if any quality.
---@field comparator? ComparatorString
---@field count int
---@field max_count? ItemCountType
---Defaults to 0.
---@field minimum_delivery_count? ItemCountType
local CompiledLogisticFilter={
}
end

do
---@class ConfigurationChangedData
---Old version of the map. Present only when loading map version other than the current version.
---@field old_version? string
---New version of the map. Present only when loading map version other than the current version.
---@field new_version? string
---Dictionary of mod changes. It is indexed by mod name.
---@field mod_changes {[string]:ModChangeData}
---`true` when mod startup settings have changed since the last time this save was loaded.
---@field mod_startup_settings_changed boolean
---`true` when mod prototype migrations have been applied since the last time this save was loaded.
---@field migration_applied boolean
local ConfigurationChangedData={
}
end

do
---@class ConstantCombinatorParameters
---Signal to emit.
---@field signal SignalID
---Value of the signal to emit.
---@field count int
---Index of the constant combinator's slot to set this signal to.
---@field index uint
local ConstantCombinatorParameters={
}
end

do
---@class CraftingQueueItem
---The index of the item in the crafting queue.
---@field index uint
---The recipe being crafted.
---@field recipe string
---The amount of items being crafted.
---@field count uint
---The item is a prerequisite for another item in the queue.
---@field prerequisite boolean
local CraftingQueueItem={
}
end

---[View Documentation](https://lua-api.factorio.com/latest/concepts.html#CursorBoxRenderType)
---@alias CursorBoxRenderType ("entity")|("multiplayer-entity")|("electricity")|("copy")|("not-allowed")|("pair")|("logistics")|("train-visualization")|("blueprint-snap-rectangle")|("spidertron-remote-selected")|("spidertron-remote-to-be-selected")

do
---@class CustomCommandData
---The name of the command.
---@field name string
---The tick the command was used in.
---@field tick uint
---The player who issued the command, or `nil` if it was issued from the server console.
---@field player_index? uint
---The parameter passed after the command, if there is one.
---@field parameter? string
local CustomCommandData={
}
end

do
---@class CustomEntityStatus
---@field diode defines.entity_status_diode
---@field label LocalisedString
local CustomEntityStatus={
}
end

do
---@class CutsceneWaypoint
---Position to pan the camera to.
---@field position? MapPosition
---Entity or unit group to pan the camera to.
---@field target? (LuaEntity)|(LuaCommandable)
---How many ticks it will take to reach this waypoint from the previous one.
---@field transition_time uint
---Time in ticks to wait before moving to the next waypoint.
---@field time_to_wait uint
---Zoom level to be set when the waypoint is reached. When not specified, the previous waypoint's zoom is used.
---@field zoom? double
local CutsceneWaypoint={
}
end

do
---@class DamageTypeFilters
---Whether this is a whitelist or a blacklist of damage types. `true` means whitelist.
---@field whitelist boolean
---The damage types to filter for. The value in the dictionary is meaningless and exists just to allow for easy lookup.
---@field types {[string]:true}
local DamageTypeFilters={
}
end

---A damage type prototype may be specified in one of two ways.
---
---[View Documentation](https://lua-api.factorio.com/latest/concepts.html#DamageTypeID)
---@alias DamageTypeID (LuaDamagePrototype)|(string)

---[View Documentation](https://lua-api.factorio.com/latest/concepts.html#DeciderCombinatorCondition)
---@alias DeciderCombinatorCondition table

---[View Documentation](https://lua-api.factorio.com/latest/concepts.html#DeciderCombinatorOutput)
---@alias DeciderCombinatorOutput table

do
---@class DeciderCombinatorParameters
---List of conditions.
---@field conditions (DeciderCombinatorCondition)[]
---List of outputs.
---@field outputs (DeciderCombinatorOutput)[]
local DeciderCombinatorParameters={
}
end

do
---@class Decorative
---The name of the decorative prototype.
---@field name string
---@field position TilePosition
---@field amount uint8
local Decorative={
}
end

---A decorative prototype may be specified in one of two ways.
---
---[View Documentation](https://lua-api.factorio.com/latest/concepts.html#DecorativeID)
---@alias DecorativeID (LuaDecorativePrototype)|(string)

do
---@class DecorativePrototypeFilter.base
---The condition to filter on.
---@field filter ("decal")|("autoplace")|("collision-mask")
---How to combine this with the previous filter. Defaults to `"or"`. When evaluating the filters, `"and"` has higher precedence than `"or"`.
---@field mode? ("or")|("and")
---Inverts the condition. Default is `false`.
---@field invert? boolean
local DecorativePrototypeFilter_base={
}
end

---@alias DecorativePrototypeFilter (DecorativePrototypeFilter.collision_mask)|(DecorativePrototypeFilter.base)

do
---@class DecorativePrototypeFilter.collision_mask:DecorativePrototypeFilter.base
---Name of one [layer](https://lua-api.factorio.com/latest/classes/LuaCollisionLayerPrototype.html) or a full collision mask.
---@field mask (CollisionLayerID)|(CollisionMask)
---How to filter.
---@field mask_mode ("collides")|("layers-equals")|("contains-any")|("contains-all")
local DecorativePrototypeFilter_collision_mask={
}
end

do
---@class DecorativeResult
---@field position TilePosition
---@field decorative LuaDecorativePrototype
---@field amount uint
local DecorativeResult={
}
end

do
---@class DetailedItemOnLine
---@field stack LuaItemStack
---Linear position of this stack on this line.
---@field position float
---Unique identifier of this item while it is on transport lines.
---@field unique_id uint
local DetailedItemOnLine={
}
end

do
---@class DifficultySettings
---A value in range \[0.01, 100].
---@field spoil_time_modifier double
---A value in range \[0.001, 1000].
---@field technology_price_multiplier double
local DifficultySettings={
}
end

do
---@class DisplayPanelMessageDefinition
---The message to show.
---@field text string
---The icon to show alongside the message.
---@field icon SignalID
---The circuit condition under which to show the message.
---@field condition CircuitConditionDefinition
local DisplayPanelMessageDefinition={
}
end

do
---@class DisplayResolution
---@field width uint
---@field height uint
local DisplayResolution={
}
end

do
---@class DragTarget
---@field target_entity LuaEntity
---Identifier of the wire connector from which the wire is being dragged.
---@field wire_connector_id defines.wire_connector_id
local DragTarget={
}
end

do
---@class EffectReceiver
---@field base_effect ModuleEffects
---@field uses_module_effects boolean
---@field uses_beacon_effects boolean
---@field uses_surface_effects boolean
local EffectReceiver={
}
end

do
---@class ElemID
---@field type ElemType
---Name of a prototype as defined by `type`.
---@field name string
---Name of a quality prototype if `type` use quality.
---@field quality? string
local ElemID={
}
end

---A [string](https://lua-api.factorio.com/latest/concepts.html#string) specifying a type for [choose elem buttons](https://lua-api.factorio.com/latest/classes/LuaGuiElement.html#elem_type). It's also used by [ElemID](https://lua-api.factorio.com/latest/concepts.html#ElemID) for [LuaGuiElement::elem\_tooltip](https://lua-api.factorio.com/latest/classes/LuaGuiElement.html#elem_tooltip).
---
---[View Documentation](https://lua-api.factorio.com/latest/concepts.html#ElemType)
---@alias ElemType ("achievement")|("decorative")|("entity")|("equipment")|("fluid")|("item")|("item-group")|("recipe")|("signal")|("technology")|("tile")|("asteroid-chunk")|("space-location")|("item-with-quality")|("entity-with-quality")|("recipe-with-quality")|("equipment-with-quality")

do
---@class EnemyEvolutionMapSettings
---Whether enemy evolution is enabled at all.
---@field enabled boolean
---The amount evolution naturally progresses by every second. Defaults to `0.000004`.
---@field time_factor double
---The amount evolution progresses for every destroyed spawner. Defaults to `0.002`.
---@field destroy_factor double
---The amount evolution progresses for every unit of pollution. Defaults to `0.0000009`.
---@field pollution_factor double
local EnemyEvolutionMapSettings={
}
end

do
---@class EnemyExpansionMapSettings
---Whether enemy expansion is enabled at all.
---@field enabled boolean
---Distance in chunks from the furthest base around to prevent expansions from reaching too far into the player's territory. Defaults to `7`.
---@field max_expansion_distance uint
---Defaults to `2`.
---@field friendly_base_influence_radius uint
---Defaults to `2`.
---@field enemy_building_influence_radius uint
---Defaults to `0.1`.
---@field building_coefficient double
---Defaults to `2.0`.
---@field other_base_coefficient double
---Defaults to `0.5`.
---@field neighbouring_chunk_coefficient double
---Defaults to `0.4`.
---@field neighbouring_base_chunk_coefficient double
---A chunk has to have at most this high of a percentage of unbuildable tiles for it to be considered a candidate to avoid chunks full of water as candidates. Defaults to `0.9`, or 90%.
---@field max_colliding_tiles_coefficient double
---The minimum size of a biter group that goes to build a new base. This is multiplied by the evolution factor. Defaults to `5`.
---@field settler_group_min_size uint
---The maximum size of a biter group that goes to build a new base. This is multiplied by the evolution factor. Defaults to `20`.
---@field settler_group_max_size uint
---The minimum time between expansions in ticks. The actual cooldown is adjusted to the current evolution levels. Defaults to `4*3 600=14 400` ticks.
---@field min_expansion_cooldown uint
---The maximum time between expansions in ticks. The actual cooldown is adjusted to the current evolution levels. Defaults to `60*3 600=216 000` ticks.
---@field max_expansion_cooldown uint
local EnemyExpansionMapSettings={
}
end

---An entity prototype may be specified in one of three ways.
---
---[View Documentation](https://lua-api.factorio.com/latest/concepts.html#EntityID)
---@alias EntityID (LuaEntityPrototype)|(LuaEntity)|(string)

do
---@class EntityIDAndQualityIDPair
---Entity prototype.
---@field name EntityID
---Quality prototype. Normal quality will be used if not specified.
---@field quality? QualityID
local EntityIDAndQualityIDPair={
}
end

do
---@class EntityIDFilter
---The entity name.
---@field name string
---The name of the quality.
---@field quality? string
---The quality comparison type.
---@field comparator? ComparatorString
local EntityIDFilter={
}
end

do
---@class EntityPrototypeFilter.base
---The condition to filter on.
---@field filter ("flying-robot")|("robot-with-logistics-interface")|("rail")|("ghost")|("explosion")|("vehicle")|("crafting-machine")|("rolling-stock")|("turret")|("transport-belt-connectable")|("wall-connectable")|("buildable")|("placable-in-editor")|("clonable")|("selectable")|("hidden")|("entity-with-health")|("building")|("fast-replaceable")|("uses-direction")|("minable")|("circuit-connectable")|("autoplace")|("blueprintable")|("item-to-place")|("name")|("type")|("collision-mask")|("flag")|("build-base-evolution-requirement")|("selection-priority")|("emissions-per-second")|("crafting-category")
---How to combine this with the previous filter. Defaults to `"or"`. When evaluating the filters, `"and"` has higher precedence than `"or"`.
---@field mode? ("or")|("and")
---Inverts the condition. Default is `false`.
---@field invert? boolean
local EntityPrototypeFilter_base={
}
end

---@alias EntityPrototypeFilter (EntityPrototypeFilter.build_base_evolution_requirement)|(EntityPrototypeFilter.collision_mask)|(EntityPrototypeFilter.crafting_category)|(EntityPrototypeFilter.emissions_per_second)|(EntityPrototypeFilter.flag)|(EntityPrototypeFilter.name)|(EntityPrototypeFilter.selection_priority)|(EntityPrototypeFilter.type)|(EntityPrototypeFilter.base)

do
---@class EntityPrototypeFilter.build_base_evolution_requirement:EntityPrototypeFilter.base
---@field comparison ComparatorString
---The value to compare against.
---@field value double
local EntityPrototypeFilter_build_base_evolution_requirement={
}
end

do
---@class EntityPrototypeFilter.collision_mask:EntityPrototypeFilter.base
---Name of one [layer](https://lua-api.factorio.com/latest/classes/LuaCollisionLayerPrototype.html) or a full collision mask.
---@field mask (CollisionLayerID)|(CollisionMask)
---@field mask_mode ("collides")|("layers-equals")|("contains-any")|("contains-all")
local EntityPrototypeFilter_collision_mask={
}
end

do
---@class EntityPrototypeFilter.crafting_category:EntityPrototypeFilter.base
---Matches if the prototype is for a crafting machine with this [crafting category](https://lua-api.factorio.com/latest/classes/LuaEntityPrototype.html#crafting_categories).
---@field crafting_category string
local EntityPrototypeFilter_crafting_category={
}
end

do
---@class EntityPrototypeFilter.emissions_per_second:EntityPrototypeFilter.base
---The name of a pollutant type to check.
---@field pollutant string
---@field comparison ComparatorString
---The value to compare against.
---@field value double
local EntityPrototypeFilter_emissions_per_second={
}
end

do
---@class EntityPrototypeFilter.flag:EntityPrototypeFilter.base
---@field flag EntityPrototypeFlag
local EntityPrototypeFilter_flag={
}
end

do
---@class EntityPrototypeFilter.name:EntityPrototypeFilter.base
---The prototype name, or list of acceptable names.
---@field name (string)|((string)[])
local EntityPrototypeFilter_name={
}
end

do
---@class EntityPrototypeFilter.selection_priority:EntityPrototypeFilter.base
---@field comparison ComparatorString
---The value to compare against.
---@field value uint8
local EntityPrototypeFilter_selection_priority={
}
end

do
---@class EntityPrototypeFilter.type:EntityPrototypeFilter.base
---The prototype type, or a list of acceptable types.
---@field type (string)|((string)[])
local EntityPrototypeFilter_type={
}
end

---A [string](https://lua-api.factorio.com/latest/concepts.html#string) specifying an entity prototype flag.
---
---[View Documentation](https://lua-api.factorio.com/latest/concepts.html#EntityPrototypeFlag)
---@alias EntityPrototypeFlag ("not-rotatable")|("placeable-neutral")|("placeable-player")|("placeable-enemy")|("placeable-off-grid")|("player-creation")|("building-direction-8-way")|("filter-directions")|("get-by-unit-number")|("breaths-air")|("not-repairable")|("not-on-map")|("not-deconstructable")|("not-blueprintable")|("hide-alt-info")|("no-gap-fill-while-building")|("not-flammable")|("no-automated-item-removal")|("no-automated-item-insertion")|("no-copy-paste")|("not-selectable-in-game")|("not-upgradable")|("not-in-kill-statistics")|("building-direction-16-way")|("snap-to-rail-support-spot")|("not-in-made-in")

---A set of flags. Active flags are in the dictionary as `true`, while inactive flags aren't present at all.
---
---By default, none of these flags are set.
---
---[View Documentation](https://lua-api.factorio.com/latest/concepts.html#EntityPrototypeFlags)
---@alias EntityPrototypeFlags {[EntityPrototypeFlag]:true}

do
---@class EntitySearchFilters
---@field area? BoundingBox
---Has precedence over area field.
---@field position? MapPosition
---If given with position, will return all entities within the radius of the position.
---@field radius? double
---An empty array means nothing matches the name filter.
---@field name? (EntityID)|((EntityID)[])
---An empty array means nothing matches the type filter.
---@field type? (string)|((string)[])
---An empty array means nothing matches the ghost\_name filter.
---@field ghost_name? (EntityID)|((EntityID)[])
---An empty array means nothing matches the ghost\_type filter.
---@field ghost_type? (string)|((string)[])
---@field direction? (defines.direction)|((defines.direction)[])
---@field collision_mask? (CollisionLayerID)|((CollisionLayerID)[])|({[CollisionLayerID]:true})
---@field force? ForceSet
---@field to_be_deconstructed? boolean
---@field to_be_upgraded? boolean
---@field limit? uint
---@field is_military_target? boolean
---@field has_item_inside? ItemWithQualityID
---@field quality? QualityCondition
---Whether the filters should be inverted.
---@field invert? boolean
local EntitySearchFilters={
}
end

---An entity prototype with optional quality specification. Can be specified in one of four ways.
---
---[View Documentation](https://lua-api.factorio.com/latest/concepts.html#EntityWithQualityID)
---@alias EntityWithQualityID (LuaEntity)|(LuaEntityPrototype)|(string)|(EntityIDAndQualityIDPair)

---An equipment prototype may be specified in one of three ways.
---
---[View Documentation](https://lua-api.factorio.com/latest/concepts.html#EquipmentID)
---@alias EquipmentID (LuaEquipmentPrototype)|(LuaEquipment)|(string)

do
---@class EquipmentIDAndQualityIDPair
---Equipment prototype.
---@field name EquipmentID
---Quality prototype. Normal quality will be used if not specified.
---@field quality? QualityID
local EquipmentIDAndQualityIDPair={
}
end

do
---@class EquipmentPoint
---@field x uint
---@field y uint
local EquipmentPoint={
}
end

do
---@class EquipmentPosition.0
---@field x int
---@field y int
local EquipmentPosition_0={
}
end

---Position inside an equipment grid. This uses the same format as [MapPosition](https://lua-api.factorio.com/latest/concepts.html#MapPosition), meaning it can be specified either with or without explicit keys.
---
---[View Documentation](https://lua-api.factorio.com/latest/concepts.html#EquipmentPosition)
---
---### Example
---
---```
----- Explicit definition
---{x = 5, y = 2}
---{y = 2, x = 5}
---```
---
---### Example
---
---```
----- Shorthand
---{1, 2}
---```
---@alias EquipmentPosition (EquipmentPosition.0)|({[1]:int, [2]:int})

do
---@class EquipmentPrototypeFilter.base
---The condition to filter on.
---@field filter ("item-to-place")|("type")
---How to combine this with the previous filter. Defaults to `"or"`. When evaluating the filters, `"and"` has higher precedence than `"or"`.
---@field mode? ("or")|("and")
---Inverts the condition. Default is `false`.
---@field invert? boolean
local EquipmentPrototypeFilter_base={
}
end

---@alias EquipmentPrototypeFilter (EquipmentPrototypeFilter.type)|(EquipmentPrototypeFilter.base)

do
---@class EquipmentPrototypeFilter.type:EquipmentPrototypeFilter.base
---The prototype type, or a list of acceptable types.
---@field type (string)|((string)[])
local EquipmentPrototypeFilter_type={
}
end

---An equipment prototype with optional quality specification.
---
---[View Documentation](https://lua-api.factorio.com/latest/concepts.html#EquipmentWithQualityID)
---@alias EquipmentWithQualityID (LuaEquipmentPrototype)|(LuaEquipment)|(string)|(EquipmentIDAndQualityIDPair)

do
---@class EventData
---The identifier of the event this handler was registered to.
---@field name defines.events
---The tick during which the event happened.
---@field tick uint
---The name of the mod that raised the event if it was raised using [LuaBootstrap::raise\_event](https://lua-api.factorio.com/latest/classes/LuaBootstrap.html#raise_event).
---@field mod_name? string
local EventData={
}
end

---Used to filter out irrelevant event callbacks in a performant way.
---
---Filters are always used as an array of filters of a specific type. Every filter can only be used with its corresponding event, and different types of event filters can not be mixed.
---
---[View Documentation](https://lua-api.factorio.com/latest/concepts.html#EventFilter)
---@alias EventFilter ((LuaPrePlatformMinedEntityEventFilter)|(LuaRobotMinedEntityEventFilter)|(LuaEntityMarkedForUpgradeEventFilter)|(LuaPreGhostUpgradedEventFilter)|(LuaPlatformMinedEntityEventFilter)|(LuaScriptRaisedDestroyEventFilter)|(LuaPlayerBuiltEntityEventFilter)|(LuaPlatformBuiltEntityEventFilter)|(LuaPreGhostDeconstructedEventFilter)|(LuaEntityClonedEventFilter)|(LuaScriptRaisedTeleportedEventFilter)|(LuaEntityDeconstructionCancelledEventFilter)|(LuaRobotBuiltEntityEventFilter)|(LuaScriptRaisedBuiltEventFilter)|(LuaPrePlayerMinedEntityEventFilter)|(LuaPlayerRepairedEntityEventFilter)|(LuaUpgradeCancelledEventFilter)|(LuaSectorScannedEventFilter)|(LuaPostEntityDiedEventFilter)|(LuaEntityMarkedForDeconstructionEventFilter)|(LuaPlayerMinedEntityEventFilter)|(LuaEntityDamagedEventFilter)|(LuaScriptRaisedReviveEventFilter)|(LuaEntityDiedEventFilter)|(LuaPreRobotMinedEntityEventFilter))[]

do
---@class Fluid
---Fluid prototype name of the fluid.
---@field name string
---Amount of the fluid.
---@field amount double
---The temperature. When reading from [LuaFluidBox](https://lua-api.factorio.com/latest/classes/LuaFluidBox.html), this field will always be present. It is not necessary to specify it when writing, however. When not specified, the fluid will be set to the fluid's default temperature as specified in the fluid's prototype.
---@field temperature? float
local Fluid={
}
end

do
---@class FluidBoxConnectionRecord
---@field this_linked_connection_id uint
---@field other_entity LuaEntity
---@field other_linked_connection_id uint
local FluidBoxConnectionRecord={
}
end

do
---@class FluidBoxFilter
---Fluid prototype name of the filtered fluid.
---@field name string
---The minimum temperature allowed into the fluidbox.
---@field minimum_temperature float
---The maximum temperature allowed into the fluidbox.
---@field maximum_temperature float
local FluidBoxFilter={
}
end

do
---@class FluidBoxFilterSpec
---Fluid prototype name of the filtered fluid.
---@field name string
---The minimum temperature allowed into the fluidbox.
---@field minimum_temperature? float
---The maximum temperature allowed into the fluidbox.
---@field maximum_temperature? float
---Force the filter to be set, regardless of current fluid content.
---@field force? boolean
local FluidBoxFilterSpec={
}
end

---A fluid may be specified in one of three ways.
---
---[View Documentation](https://lua-api.factorio.com/latest/concepts.html#FluidID)
---@alias FluidID (string)|(LuaFluidPrototype)|(Fluid)

do
---@class FluidProduct
---@field type "fluid"
---Prototype name of the result.
---@field name string
---Amount of the fluid to give. If not returned, `amount_min` and `amount_max` will be present instead.
---@field amount? double
---Minimal amount of the fluid to give. Not returned if `amount` is returned.
---@field amount_min? double
---Maximum amount of the fluid to give. Not returned if `amount` is returned.
---@field amount_max? double
---A value in range `[0, 1]`. Fluid is only given with this probability; otherwise no product is produced.
---@field probability double
---How much of this product is ignored by statistics.
---@field ignored_by_stats? double
---How much of this product is ignored by productivity.
---@field ignored_by_productivity? double
---The fluid temperature of this product.
---@field temperature? float
---@field fluidbox_index? uint
local FluidProduct={
}
end

do
---@class FluidPrototypeFilter.base
---The condition to filter on.
---@field filter ("hidden")|("name")|("subgroup")|("default-temperature")|("max-temperature")|("heat-capacity")|("fuel-value")|("emissions-multiplier")|("gas-temperature")
---How to combine this with the previous filter. Defaults to `"or"`. When evaluating the filters, `"and"` has higher precedence than `"or"`.
---@field mode? ("or")|("and")
---Inverts the condition. Default is `false`.
---@field invert? boolean
local FluidPrototypeFilter_base={
}
end

---@alias FluidPrototypeFilter (FluidPrototypeFilter.default_temperature)|(FluidPrototypeFilter.emissions_multiplier)|(FluidPrototypeFilter.fuel_value)|(FluidPrototypeFilter.gas_temperature)|(FluidPrototypeFilter.heat_capacity)|(FluidPrototypeFilter.max_temperature)|(FluidPrototypeFilter.name)|(FluidPrototypeFilter.subgroup)|(FluidPrototypeFilter.base)

do
---@class FluidPrototypeFilter.default_temperature:FluidPrototypeFilter.base
---@field comparison ComparatorString
---The value to compare against.
---@field value double
local FluidPrototypeFilter_default_temperature={
}
end

do
---@class FluidPrototypeFilter.emissions_multiplier:FluidPrototypeFilter.base
---@field comparison ComparatorString
---The value to compare against.
---@field value double
local FluidPrototypeFilter_emissions_multiplier={
}
end

do
---@class FluidPrototypeFilter.fuel_value:FluidPrototypeFilter.base
---@field comparison ComparatorString
---The value to compare against.
---@field value double
local FluidPrototypeFilter_fuel_value={
}
end

do
---@class FluidPrototypeFilter.gas_temperature:FluidPrototypeFilter.base
---@field comparison ComparatorString
---The value to compare against.
---@field value double
local FluidPrototypeFilter_gas_temperature={
}
end

do
---@class FluidPrototypeFilter.heat_capacity:FluidPrototypeFilter.base
---@field comparison ComparatorString
---The value to compare against.
---@field value double
local FluidPrototypeFilter_heat_capacity={
}
end

do
---@class FluidPrototypeFilter.max_temperature:FluidPrototypeFilter.base
---@field comparison ComparatorString
---The value to compare against.
---@field value double
local FluidPrototypeFilter_max_temperature={
}
end

do
---@class FluidPrototypeFilter.name:FluidPrototypeFilter.base
---The prototype name, or list of acceptable names.
---@field name (string)|((string)[])
local FluidPrototypeFilter_name={
}
end

do
---@class FluidPrototypeFilter.subgroup:FluidPrototypeFilter.base
---A [LuaGroup](https://lua-api.factorio.com/latest/classes/LuaGroup.html) (subgroup) name
---@field subgroup string
local FluidPrototypeFilter_subgroup={
}
end

---[View Documentation](https://lua-api.factorio.com/latest/concepts.html#ForceCondition)
---@alias ForceCondition ("all")|("enemy")|("ally")|("friend")|("not-friend")|("same")|("not-same")

---A force may be specified in one of three ways.
---
---[View Documentation](https://lua-api.factorio.com/latest/concepts.html#ForceID)
---@alias ForceID (string)|(uint8)|(LuaForce)

---Set of forces. Can be specified in one of two ways.
---
---[View Documentation](https://lua-api.factorio.com/latest/concepts.html#ForceSet)
---@alias ForceSet ((ForceID)[])|(ForceID)

do
---@class GameViewSettings
---Show the flashing alert icons next to the player's toolbar.
---@field show_alert_gui boolean
---Show the controller GUI elements. This includes the toolbar, the selected tool slot, the armour slot, and the gun and ammunition slots.
---@field show_controller_gui boolean
---Shows or hides the crafting queue.
---@field show_crafting_queue boolean
---Show overlay icons on entities. Also known as "alt-mode".
---@field show_entity_info boolean
---Shows or hides the tooltip that is displayed when selecting an entity.
---@field show_entity_tooltip boolean
---hows or hides the mouse and keyboard/controller button hints in the bottom left corner if they are enabled in the interface settings.
---@field show_hotkey_suggestions boolean
---Shows or hides the view options when map is opened.
---@field show_map_view_options boolean
---Show the chart in the upper right-hand corner of the screen.
---@field show_minimap boolean
---Shows or hides quickbar of shortcuts.
---@field show_quickbar boolean
---When `true` (`false` is default), the rails will always show the rail block visualisation.
---@field show_rail_block_visualisation boolean
---Show research progress and name in the upper right-hand corner of the screen.
---@field show_research_info boolean
---Shows or hides the shortcut bar.
---@field show_shortcut_bar boolean
---Shows or hides the buttons row.
---@field show_side_menu boolean
---Shows or hides the tool window with the weapons and armor.
---@field show_tool_bar boolean
---When `true` (the default), mousing over an entity will select it. Otherwise, moving the mouse won't update entity selection.
---@field update_entity_selection boolean
local GameViewSettings={
}
end

do
---@class GuiAnchor
---@field gui defines.relative_gui_type
---@field position defines.relative_gui_position
---If provided, only anchors the GUI element when the opened things type matches the type.
---@field type? string
---If provided, only anchors the GUI element when the opened thing matches the name. `name` takes precedence over `names`.
---@field name? string
---If provided, only anchors the GUI element when the opened thing matches one of the names. When reading an anchor, `names` is always populated.
---@field names? (string)[]
local GuiAnchor={
}
end

do
---@class GuiArrowSpecification.base
---@field margin uint
---This determines which of the following fields will be required.
---@field type GuiArrowType
local GuiArrowSpecification_base={
}
end

---@alias GuiArrowSpecification (GuiArrowSpecification.crafting_queue)|(GuiArrowSpecification.entity)|(GuiArrowSpecification.item_stack)|(GuiArrowSpecification.position)|(GuiArrowSpecification.base)

do
---@class GuiArrowSpecification.crafting_queue:GuiArrowSpecification.base
---Index in the crafting queue to point to.
---@field crafting_queueindex uint
local GuiArrowSpecification_crafting_queue={
}
end

do
---@class GuiArrowSpecification.entity:GuiArrowSpecification.base
---@field entity LuaEntity
local GuiArrowSpecification_entity={
}
end

do
---@class GuiArrowSpecification.item_stack:GuiArrowSpecification.base
---Which inventory the stack is in.
---@field inventory_index defines.inventory
---Which stack to point to.
---@field item_stack_index uint
---@field source ("player")|("target")|("player-quickbar")
local GuiArrowSpecification_item_stack={
}
end

do
---@class GuiArrowSpecification.position:GuiArrowSpecification.base
---@field position MapPosition
local GuiArrowSpecification_position={
}
end

---Used by [GuiArrowSpecification](https://lua-api.factorio.com/latest/concepts.html#GuiArrowSpecification).
---
---[View Documentation](https://lua-api.factorio.com/latest/concepts.html#GuiArrowType)
---@alias GuiArrowType ("nowhere")|("goal")|("entity_info")|("active_window")|("entity")|("position")|("crafting_queue")|("item_stack")

---Direction of a [LuaGuiElement's](https://lua-api.factorio.com/latest/classes/LuaGuiElement.html#direction) layout.
---
---[View Documentation](https://lua-api.factorio.com/latest/concepts.html#GuiDirection)
---@alias GuiDirection ("horizontal")|("vertical")

---[View Documentation](https://lua-api.factorio.com/latest/concepts.html#GuiElementType)
---@alias GuiElementType ("button")|("sprite-button")|("checkbox")|("flow")|("frame")|("label")|("line")|("progressbar")|("table")|("textfield")|("radiobutton")|("sprite")|("scroll-pane")|("drop-down")|("list-box")|("camera")|("choose-elem-button")|("text-box")|("slider")|("minimap")|("entity-preview")|("empty-widget")|("tabbed-pane")|("tab")|("switch")

do
---@class GuiLocation.0
---@field x int
---@field y int
local GuiLocation_0={
}
end

---Screen coordinates of a GUI element in a [LuaGui](https://lua-api.factorio.com/latest/classes/LuaGui.html). This uses the same format as [TilePosition](https://lua-api.factorio.com/latest/concepts.html#TilePosition), meaning it can be specified either with or without explicit keys.
---
---[View Documentation](https://lua-api.factorio.com/latest/concepts.html#GuiLocation)
---@alias GuiLocation (GuiLocation.0)|({[1]:int, [2]:int})

do
---@class GunShift4Way
---@field north Vector
---@field east Vector
---@field south Vector
---@field west Vector
local GunShift4Way={
}
end

do
---@class HeatConnection
---@field position Vector
---@field direction defines.direction
local HeatConnection={
}
end

do
---@class HeatSetting
---The target temperature. Defaults to the minimum temperature of the heat buffer.
---@field temperature? double
---Defaults to `"at-least"`.
---@field mode? ("at-least")|("at-most")|("exactly")|("add")|("remove")
local HeatSetting={
}
end

do
---@class InfinityInventoryFilter
---Name of the item.
---@field name string
---The count of the filter.
---@field count? uint
---Defaults to `"at-least"`.
---@field mode? ("at-least")|("at-most")|("exactly")
---The index of this filter in the filters list. Not required when writing a filter.
---@field index uint
local InfinityInventoryFilter={
}
end

do
---@class InfinityPipeFilter
---Name of the fluid.
---@field name string
---The fill percentage the pipe (for example `0.5` for 50%). Can't be negative.
---@field percentage? double
---The temperature of the fluid. Defaults to the default/minimum temperature of the fluid.
---@field temperature? double
---Defaults to `"at-least"`.
---@field mode? ("at-least")|("at-most")|("exactly")|("add")|("remove")
local InfinityPipeFilter={
}
end

do
---@class Ingredient.base
---@field type ("item")|("fluid")
---Prototype name of the required item or fluid.
---@field name string
---Amount of the item or fluid.
---@field amount double
---How much of this ingredient is ignored by statistics.
---@field ignored_by_stats? (uint)|(double)
local Ingredient_base={
}
end

---@alias Ingredient (Ingredient.fluid)|(Ingredient.base)

do
---@class Ingredient.fluid:Ingredient.base
---The minimum fluid temperature required.
---@field minimum_temperature? float
---The maximum fluid temperature allowed.
---@field maximum_temperature? float
local Ingredient_fluid={
}
end

do
---@class InserterCircuitConditions
---@field circuit? CircuitCondition
---@field logistics? CircuitCondition
local InserterCircuitConditions={
}
end

do
---@class InventoryFilter
---Position of the corresponding filter slot.
---@field index uint
---Item prototype name of the item to filter.
---@field name string
local InventoryFilter={
}
end

do
---@class InventoryPosition
---The ID of the inventory to insert into.
---@field inventory defines.inventory
---The stack index of the inventory to insert into.
---@field stack ItemStackIndex
---How many items to insert. Defaults to `1`.
---@field count? ItemCountType
local InventoryPosition={
}
end

---[View Documentation](https://lua-api.factorio.com/latest/concepts.html#ItemCountType)
---@alias ItemCountType uint

do
---@class ItemCountWithQuality
---The name of the item prototype.
---@field name string
---The number of items.
---@field count uint
---The quality level of the items.
---@field quality QualityID
local ItemCountWithQuality={
}
end

do
---@class ItemFilter.0
---The item.
---@field name? ItemID
---The quality.
---@field quality? QualityID
---The quality comparison type.
---@field comparator? ComparatorString
local ItemFilter_0={
}
end

---An item filter may be specified in two ways, either as a string which is an item prototype name or as a table.
---
---[View Documentation](https://lua-api.factorio.com/latest/concepts.html#ItemFilter)
---@alias ItemFilter (ItemFilter.0)|(string)

---An item prototype may be specified in one of four ways.
---
---[View Documentation](https://lua-api.factorio.com/latest/concepts.html#ItemID)
---@alias ItemID (LuaItemPrototype)|(LuaItemStack)|(LuaItem)|(string)

do
---@class ItemIDAndQualityIDPair
---Item prototype. Returns `LuaItemPrototype` when read.
---@field name ItemID
---Quality prototype. Normal quality will be used if not specified. Returns `LuaQualityPrototype` when read.
---@field quality? QualityID
local ItemIDAndQualityIDPair={
}
end

do
---@class ItemIDFilter
---The item name.
---@field name string
---The name of the quality.
---@field quality? string
---The quality comparison type.
---@field comparator? ComparatorString
local ItemIDFilter={
}
end

do
---@class ItemInventoryPositions
---A list of stacks into which items should be inserted.
---@field in_inventory? (InventoryPosition)[]
---Defaults to `0`. Number of items to request for the equipment grid. When the items arrive they will be used to revive the first matching ghost equipment.
---@field grid_count? ItemCountType
local ItemInventoryPositions={
}
end

do
---@class ItemLocationData
---@field surface LuaSurface
---@field entity? LuaEntity
---@field player? LuaPlayer
---@field position MapPosition
---@field force LuaForce
local ItemLocationData={
}
end

do
---@class ItemProduct
---@field type "item"
---Prototype name of the result.
---@field name string
---Amount of the item to give. If not returned, `amount_min` and `amount_max` will be present instead.
---@field amount? uint16
---Minimal amount of the item to give. Not returned if `amount` is returned.
---@field amount_min? uint16
---Maximum amount of the item to give. Not returned if `amount` is returned.
---@field amount_max? uint16
---A value in range `[0, 1]`. Item is only given with this probability; otherwise no product is produced.
---@field probability double
---How much of this product is ignored by statistics.
---@field ignored_by_stats? uint16
---How much of this product is ignored by productivity.
---@field ignored_by_productivity? uint16
---Probability that a craft will yield one additional product. Also applies to bonus crafts caused by productivity.
---@field extra_count_fraction? float
---@field percent_spoiled? float
local ItemProduct={
}
end

do
---@class ItemPrototypeFilter.base
---The condition to filter on.
---@field filter ("tool")|("mergeable")|("hidden")|("hidden-in-factoriopedia")|("is-parameter")|("item-with-inventory")|("selection-tool")|("item-with-label")|("has-rocket-launch-products")|("fuel")|("place-result")|("burnt-result")|("place-as-tile")|("placed-as-equipment-result")|("name")|("type")|("flag")|("subgroup")|("fuel-category")|("stack-size")|("fuel-value")|("fuel-acceleration-multiplier")|("fuel-top-speed-multiplier")|("fuel-emissions-multiplier")
---How to combine this with the previous filter. Defaults to `"or"`. When evaluating the filters, `"and"` has higher precedence than `"or"`.
---@field mode? ("or")|("and")
---Inverts the condition. Default is `false`.
---@field invert? boolean
local ItemPrototypeFilter_base={
}
end

---@alias ItemPrototypeFilter (ItemPrototypeFilter.burnt_result)|(ItemPrototypeFilter.flag)|(ItemPrototypeFilter.fuel_acceleration_multiplier)|(ItemPrototypeFilter.fuel_category)|(ItemPrototypeFilter.fuel_emissions_multiplier)|(ItemPrototypeFilter.fuel_top_speed_multiplier)|(ItemPrototypeFilter.fuel_value)|(ItemPrototypeFilter.name)|(ItemPrototypeFilter.place_as_tile)|(ItemPrototypeFilter.place_result)|(ItemPrototypeFilter.placed_as_equipment_result)|(ItemPrototypeFilter.stack_size)|(ItemPrototypeFilter.subgroup)|(ItemPrototypeFilter.type)|(ItemPrototypeFilter.base)

do
---@class ItemPrototypeFilter.burnt_result:ItemPrototypeFilter.base
---Filters for the burnt result.
---@field elem_filters? (ItemPrototypeFilter)[]
local ItemPrototypeFilter_burnt_result={
}
end

do
---@class ItemPrototypeFilter.flag:ItemPrototypeFilter.base
---@field flag ItemPrototypeFlag
local ItemPrototypeFilter_flag={
}
end

do
---@class ItemPrototypeFilter.fuel_acceleration_multiplier:ItemPrototypeFilter.base
---@field comparison ComparatorString
---The value to compare against.
---@field value double
local ItemPrototypeFilter_fuel_acceleration_multiplier={
}
end

do
---@class ItemPrototypeFilter.fuel_category:ItemPrototypeFilter.base
---A [LuaFuelCategoryPrototype](https://lua-api.factorio.com/latest/classes/LuaFuelCategoryPrototype.html) name
---@field fuel-category string
local ItemPrototypeFilter_fuel_category={
}
end

do
---@class ItemPrototypeFilter.fuel_emissions_multiplier:ItemPrototypeFilter.base
---@field comparison ComparatorString
---The value to compare against.
---@field value double
local ItemPrototypeFilter_fuel_emissions_multiplier={
}
end

do
---@class ItemPrototypeFilter.fuel_top_speed_multiplier:ItemPrototypeFilter.base
---@field comparison ComparatorString
---The value to compare against.
---@field value double
local ItemPrototypeFilter_fuel_top_speed_multiplier={
}
end

do
---@class ItemPrototypeFilter.fuel_value:ItemPrototypeFilter.base
---@field comparison ComparatorString
---The value to compare against.
---@field value double
local ItemPrototypeFilter_fuel_value={
}
end

do
---@class ItemPrototypeFilter.name:ItemPrototypeFilter.base
---The prototype name, or list of acceptable names.
---@field name (string)|((string)[])
local ItemPrototypeFilter_name={
}
end

do
---@class ItemPrototypeFilter.place_as_tile:ItemPrototypeFilter.base
---Filters for the placed tile.
---@field elem_filters? (TilePrototypeFilter)[]
local ItemPrototypeFilter_place_as_tile={
}
end

do
---@class ItemPrototypeFilter.place_result:ItemPrototypeFilter.base
---Filters for the place result.
---@field elem_filters? (EntityPrototypeFilter)[]
local ItemPrototypeFilter_place_result={
}
end

do
---@class ItemPrototypeFilter.placed_as_equipment_result:ItemPrototypeFilter.base
---Filters for the placed equipment.
---@field elem_filters? (EquipmentPrototypeFilter)[]
local ItemPrototypeFilter_placed_as_equipment_result={
}
end

do
---@class ItemPrototypeFilter.stack_size:ItemPrototypeFilter.base
---@field comparison ComparatorString
---The value to compare against.
---@field value uint
local ItemPrototypeFilter_stack_size={
}
end

do
---@class ItemPrototypeFilter.subgroup:ItemPrototypeFilter.base
---A [LuaGroup](https://lua-api.factorio.com/latest/classes/LuaGroup.html) (subgroup) name
---@field subgroup string
local ItemPrototypeFilter_subgroup={
}
end

do
---@class ItemPrototypeFilter.type:ItemPrototypeFilter.base
---The prototype type, or a list of acceptable types.
---@field type (string)|((string)[])
local ItemPrototypeFilter_type={
}
end

---A [string](https://lua-api.factorio.com/latest/concepts.html#string) specifying an item prototype flag.
---
---[View Documentation](https://lua-api.factorio.com/latest/concepts.html#ItemPrototypeFlag)
---@alias ItemPrototypeFlag ("draw-logistic-overlay")|("excluded-from-trash-unrequested")|("always-show")|("hide-from-bonus-gui")|("hide-from-fuel-tooltip")|("not-stackable")|("primary-place-result")|("mod-openable")|("only-in-cursor")|("spawnable")|("spoil-result")|("ignore-spoil-time-modifier")

---A set of flags. Active flags are in the dictionary as `true`, while inactive flags aren't present at all.
---
---By default, none of these flags are set.
---
---[View Documentation](https://lua-api.factorio.com/latest/concepts.html#ItemPrototypeFlags)
---@alias ItemPrototypeFlags {[ItemPrototypeFlag]:true}

do
---@class ItemStackDefinition
---Prototype name of the item the stack holds.
---@field name string
---Number of items the stack holds. Defaults to `1`.
---@field count? ItemCountType
---Quality of the item the stack holds. Defaults to `"normal"`.
---@field quality? string
---Health of the items in the stack. Defaults to `1.0`.
---@field health? float
---Durability of the tool items in the stack.
---@field durability? double
---Amount of ammo in the ammo items in the stack.
---@field ammo? float
---Tags of the items with tags in the stack.
---@field tags? (string)[]
---Description of the items with tags in the stack.
---@field custom_description? LocalisedString
---The spoil percent for this item if the item can spoil. Defaults to `0`.
---@field spoil_percent? double
local ItemStackDefinition={
}
end

---An item may be specified in one of two ways.
---
---[View Documentation](https://lua-api.factorio.com/latest/concepts.html#ItemStackIdentification)
---@alias ItemStackIdentification (SimpleItemStack)|(LuaItemStack)

---[View Documentation](https://lua-api.factorio.com/latest/concepts.html#ItemStackIndex)
---@alias ItemStackIndex uint16

do
---@class ItemStackLocation
---@field inventory defines.inventory
---@field slot uint
local ItemStackLocation={
}
end

---An item prototype with optional quality specification. Can be specified in one of four ways.
---
---[View Documentation](https://lua-api.factorio.com/latest/concepts.html#ItemWithQualityID)
---@alias ItemWithQualityID (LuaItemStack)|(LuaItemPrototype)|(string)|(ItemIDAndQualityIDPair)

---The internal name of a game control (key binding).
---
---[View Documentation](https://lua-api.factorio.com/latest/concepts.html#LinkedGameControl)
---@alias LinkedGameControl ("move-up")|("move-down")|("move-left")|("move-right")|("open-character-gui")|("open-gui")|("confirm-gui")|("toggle-free-cursor")|("mine")|("build")|("build-ghost")|("super-forced-build")|("clear-cursor")|("pipette")|("rotate")|("reverse-rotate")|("flip-horizontal")|("flip-vertical")|("pick-items")|("drop-cursor")|("show-info")|("shoot-enemy")|("shoot-selected")|("next-weapon")|("toggle-driving")|("zoom-in")|("zoom-out")|("use-item")|("alternative-use-item")|("toggle-console")|("copy-entity-settings")|("paste-entity-settings")|("controller-gui-logistics-tab")|("controller-gui-character-tab")|("controller-gui-crafting-tab")|("toggle-rail-layer")|("select-for-blueprint")|("select-for-cancel-deconstruct")|("select-for-super-forced-deconstruct")|("reverse-select")|("alt-reverse-select")|("deselect")|("cycle-blueprint-forwards")|("cycle-blueprint-backwards")|("focus-search")|("larger-terrain-building-area")|("smaller-terrain-building-area")|("remove-pole-cables")|("build-with-obstacle-avoidance")|("add-station")|("add-temporary-station")|("rename-all")|("fast-wait-condition")|("drag-map")|("move-tag")|("place-in-chat")|("place-ping")|("pin")|("activate-tooltip")|("next-surface")|("previous-surface")|("cycle-quality-up")|("cycle-quality-down")|("craft")|("craft-5")|("craft-all")|("cancel-craft")|("cancel-craft-5")|("cancel-craft-all")|("pick-item")|("stack-transfer")|("inventory-transfer")|("fast-entity-transfer")|("cursor-split")|("stack-split")|("inventory-split")|("fast-entity-split")|("toggle-filter")|("open-item")|("copy-inventory-filter")|("paste-inventory-filter")|("show-quick-panel")|("next-quick-panel-page")|("previous-quick-panel-page")|("next-quick-panel-tab")|("previous-quick-panel-tab")|("rotate-active-quick-bars")|("next-active-quick-bar")|("previous-active-quick-bar")|("quick-bar-button-1")|("quick-bar-button-2")|("quick-bar-button-3")|("quick-bar-button-4")|("quick-bar-button-5")|("quick-bar-button-6")|("quick-bar-button-7")|("quick-bar-button-8")|("quick-bar-button-9")|("quick-bar-button-10")|("quick-bar-button-1-secondary")|("quick-bar-button-2-secondary")|("quick-bar-button-3-secondary")|("quick-bar-button-4-secondary")|("quick-bar-button-5-secondary")|("quick-bar-button-6-secondary")|("quick-bar-button-7-secondary")|("quick-bar-button-8-secondary")|("quick-bar-button-9-secondary")|("quick-bar-button-10-secondary")|("action-bar-select-page-1")|("action-bar-select-page-2")|("action-bar-select-page-3")|("action-bar-select-page-4")|("action-bar-select-page-5")|("action-bar-select-page-6")|("action-bar-select-page-7")|("action-bar-select-page-8")|("action-bar-select-page-9")|("action-bar-select-page-10")|("copy")|("cut")|("paste")|("cycle-clipboard-forwards")|("cycle-clipboard-backwards")|("undo")|("redo")|("toggle-menu")|("toggle-map")|("close-menu")|("open-technology-gui")|("production-statistics")|("logistic-networks")|("toggle-blueprint-library")|("open-trains-gui")|("open-factoriopedia")|("back")|("forward")|("pause-game")|("confirm-message")|("previous-technology")|("previous-mod")|("connect-train")|("disconnect-train")|("submit-feedback")|("editor-next-variation")|("editor-previous-variation")|("editor-clone-item")|("editor-delete-item")|("editor-toggle-pause")|("editor-tick-once")|("editor-speed-up")|("editor-speed-down")|("editor-reset-speed")|("editor-set-clone-brush-source")|("editor-set-clone-brush-destination")|("editor-switch-to-surface")|("editor-remove-scripting-object")|("debug-toggle-atlas-gui")|("debug-toggle-gui-visibility")|("debug-toggle-debug-settings")|("debug-toggle-basic")|("debug-reset-zoom")|("debug-reset-zoom-2x")|("toggle-gui-debug")|("toggle-gui-style-view")|("toggle-gui-shadows")|("toggle-gui-glows")|("open-prototypes-gui")|("open-prototype-explorer-gui")|("increase-ui-scale")|("decrease-ui-scale")|("reset-ui-scale")|("slash-editor")|("toggle-entity")|("next-player-in-replay")|("move-blueprint-absolute-grid-up")|("move-blueprint-absolute-grid-down")|("move-blueprint-absolute-grid-left")|("move-blueprint-absolute-grid-right")|("move-blueprint-entities-up")|("move-blueprint-entities-down")|("move-blueprint-entities-left")|("move-blueprint-entities-right")|("play-next-track")|("play-previous-track")|("pause-resume-music")

---Localised strings are a way to support translation of in-game text. It is an array where the first element is the key and the remaining elements are parameters that will be substituted for placeholders in the template designated by the key.
---
---The key identifies the string template. For example, `"gui-alert-tooltip.attack"` (for the template `"__1__ objects are being damaged"`; see the file `data/core/locale/en.cfg`).
---
---The template can contain placeholders such as `__1__` or `__2__`. These will be replaced by the respective parameter in the LocalisedString. The parameters themselves can be other localised strings, which will be processed recursively in the same fashion. Localised strings can not be recursed deeper than 20 levels and can not have more than 20 parameters.
---
---There are two special flags for the localised string, indicated by the key being a particular string. First, if the key is the empty string (`""`), then all parameters will be concatenated (after processing, if any are localised strings themselves). Second, if the key is a question mark (`"?"`), then the first valid parameter will be used. A parameter can be invalid if its name doesn't match any string template. If no parameters are valid, the last one is returned. This is useful to implement a fallback for missing locale templates.
---
---Furthermore, when an API function expects a localised string, it will also accept a regular string (i.e. not a table) which will not be translated, as well as a number, boolean or `nil`, which will be converted to their textual representation.
---
---[View Documentation](https://lua-api.factorio.com/latest/concepts.html#LocalisedString)
---
---### Example
---
---```
----- In the English translation, this will print "No ammo"; in the Czech translation, it will print "Bez munice":
---game.player.print({"description.no-ammo"})
----- The 'description.no-ammo' template contains no placeholders, so no further parameters are necessary.
---```
---
---### Example
---
---```
----- In the English translation, this will print "Durability: 5/9"; in the Japanese one, it will print "耐久度: 5/9":
---game.player.print({"description.durability", 5, 9})
---```
---
---### Example
---
---```
----- This will print "hello" in all translations:
---game.player.print({"", "hello"})
---```
---
---### Example
---
---```
----- This will print "Iron plate: 60" in the English translation and "Eisenplatte: 60" in the German translation.
---game.print({"", {"item-name.iron-plate"}, ": ", 60})
---```
---
---### Example
---
---```
----- As an example of a localised string with fallback, consider this:
---{"?", {"", {"entity-description.furnace"}, "\n"}, {"item-description.furnace"}, "optional fallback"}
----- If 'entity-description.furnace' exists, it is concatenated with "\n" and returned. Otherwise, if 'item-description.furnace'
-----  exists, it is returned as-is. Otherwise, "optional fallback" is returned. If this value wasn't specified, the
-----  translation result would be "Unknown key: 'item-description.furnace'".
---```
---@alias LocalisedString (string)|(number)|(boolean)|(LuaObject)|(nil)|((LocalisedString)[])

do
---@class LogisticFilter
---The item filter to put into the slot.
---@field value? SignalFilter
---The minimum amount to satisfy.
---@field min? int
---The maximum amount to keep in inventory. `nil` for infinite.
---@field max? ItemCountType
---The minimum count that will be delivered to a space platform. `nil` if unchanged from the default.
---@field minimum_delivery_count? ItemCountType
---The space location to import from.
---@field import_from? SpaceLocationID
local LogisticFilter={
}
end

---[View Documentation](https://lua-api.factorio.com/latest/concepts.html#LogisticFilterIndex)
---@alias LogisticFilterIndex uint16

do
---@class LogisticSection
---@field index uint8
---@field filters? (BlueprintLogisticFilter)[]
---@field group? string
---Defaults to 1.
---@field multiplier? float
local LogisticSection={
}
end

do
---@class LogisticSections
---@field sections? (LogisticSection)[]
---Defaults to false.
---@field trash_not_requested? boolean
local LogisticSections={
}
end

do
---@class LogisticsNetworkSupplyCounts
---Number of available items in the storage members.
---@field storage uint
---Number of available items in the passive provider members.
---@field passive-provider uint
---Number of available items in the buffer members.
---@field buffer uint
---Number of available items in the active provider members.
---@field active-provider uint
local LogisticsNetworkSupplyCounts={
}
end

do
---@class LogisticsNetworkSupplyPoints
---@field storage (LuaLogisticPoint)[]
---@field passive-provider (LuaLogisticPoint)[]
---@field buffer (LuaLogisticPoint)[]
---@field active-provider (LuaLogisticPoint)[]
local LogisticsNetworkSupplyPoints={
}
end

do
---@class Loot
---Item prototype name of the result.
---@field item string
---Probability that any loot at all will drop, as a number in range \[0, 1].
---@field probability double
---Minimum amount of loot to drop.
---@field count_min double
---Maximum amount of loot to drop.
---@field count_max double
local Loot={
}
end

do
---@class LuaEntityClonedEventFilter.base
---The condition to filter on.
---@field filter ("ghost")|("rail")|("rail-signal")|("rolling-stock")|("robot-with-logistics-interface")|("vehicle")|("turret")|("crafting-machine")|("wall-connectable")|("transport-belt-connectable")|("circuit-network-connectable")|("type")|("name")|("ghost_type")|("ghost_name")
---How to combine this with the previous filter. Defaults to `"or"`. When evaluating the filters, `"and"` has higher precedence than `"or"`.
---@field mode? ("or")|("and")
---Inverts the condition. Default is `false`.
---@field invert? boolean
local LuaEntityClonedEventFilter_base={
}
end

---@alias LuaEntityClonedEventFilter (LuaEntityClonedEventFilter.ghost_name)|(LuaEntityClonedEventFilter.ghost_type)|(LuaEntityClonedEventFilter.name)|(LuaEntityClonedEventFilter.type)|(LuaEntityClonedEventFilter.base)

do
---@class LuaEntityClonedEventFilter.ghost_name:LuaEntityClonedEventFilter.base
---The ghost prototype name.
---@field name string
local LuaEntityClonedEventFilter_ghost_name={
}
end

do
---@class LuaEntityClonedEventFilter.ghost_type:LuaEntityClonedEventFilter.base
---The ghost prototype type.
---@field type string
local LuaEntityClonedEventFilter_ghost_type={
}
end

do
---@class LuaEntityClonedEventFilter.name:LuaEntityClonedEventFilter.base
---The prototype name.
---@field name string
local LuaEntityClonedEventFilter_name={
}
end

do
---@class LuaEntityClonedEventFilter.type:LuaEntityClonedEventFilter.base
---The prototype type.
---@field type string
local LuaEntityClonedEventFilter_type={
}
end

do
---@class LuaEntityDamagedEventFilter.base
---The condition to filter on.
---@field filter ("ghost")|("rail")|("rail-signal")|("rolling-stock")|("robot-with-logistics-interface")|("vehicle")|("turret")|("crafting-machine")|("wall-connectable")|("transport-belt-connectable")|("circuit-network-connectable")|("type")|("name")|("ghost_type")|("ghost_name")|("original-damage-amount")|("final-damage-amount")|("damage-type")|("final-health")
---How to combine this with the previous filter. Defaults to `"or"`. When evaluating the filters, `"and"` has higher precedence than `"or"`.
---@field mode? ("or")|("and")
---Inverts the condition. Default is `false`.
---@field invert? boolean
local LuaEntityDamagedEventFilter_base={
}
end

---@alias LuaEntityDamagedEventFilter (LuaEntityDamagedEventFilter.damage_type)|(LuaEntityDamagedEventFilter.final_damage_amount)|(LuaEntityDamagedEventFilter.final_health)|(LuaEntityDamagedEventFilter.ghost_name)|(LuaEntityDamagedEventFilter.ghost_type)|(LuaEntityDamagedEventFilter.name)|(LuaEntityDamagedEventFilter.original_damage_amount)|(LuaEntityDamagedEventFilter.type)|(LuaEntityDamagedEventFilter.base)

do
---@class LuaEntityDamagedEventFilter.damage_type:LuaEntityDamagedEventFilter.base
---A [LuaDamagePrototype](https://lua-api.factorio.com/latest/classes/LuaDamagePrototype.html) name.
---@field type string
local LuaEntityDamagedEventFilter_damage_type={
}
end

do
---@class LuaEntityDamagedEventFilter.final_damage_amount:LuaEntityDamagedEventFilter.base
---@field comparison ComparatorString
---The value to compare against.
---@field value float
local LuaEntityDamagedEventFilter_final_damage_amount={
}
end

do
---@class LuaEntityDamagedEventFilter.final_health:LuaEntityDamagedEventFilter.base
---@field comparison ComparatorString
---The value to compare against.
---@field value float
local LuaEntityDamagedEventFilter_final_health={
}
end

do
---@class LuaEntityDamagedEventFilter.ghost_name:LuaEntityDamagedEventFilter.base
---The ghost prototype name.
---@field name string
local LuaEntityDamagedEventFilter_ghost_name={
}
end

do
---@class LuaEntityDamagedEventFilter.ghost_type:LuaEntityDamagedEventFilter.base
---The ghost prototype type.
---@field type string
local LuaEntityDamagedEventFilter_ghost_type={
}
end

do
---@class LuaEntityDamagedEventFilter.name:LuaEntityDamagedEventFilter.base
---The prototype name.
---@field name string
local LuaEntityDamagedEventFilter_name={
}
end

do
---@class LuaEntityDamagedEventFilter.original_damage_amount:LuaEntityDamagedEventFilter.base
---@field comparison ComparatorString
---The value to compare against.
---@field value float
local LuaEntityDamagedEventFilter_original_damage_amount={
}
end

do
---@class LuaEntityDamagedEventFilter.type:LuaEntityDamagedEventFilter.base
---The prototype type.
---@field type string
local LuaEntityDamagedEventFilter_type={
}
end

do
---@class LuaEntityDeconstructionCancelledEventFilter.base
---The condition to filter on.
---@field filter ("ghost")|("rail")|("rail-signal")|("rolling-stock")|("robot-with-logistics-interface")|("vehicle")|("turret")|("crafting-machine")|("wall-connectable")|("transport-belt-connectable")|("circuit-network-connectable")|("type")|("name")|("ghost_type")|("ghost_name")
---How to combine this with the previous filter. Defaults to `"or"`. When evaluating the filters, `"and"` has higher precedence than `"or"`.
---@field mode? ("or")|("and")
---Inverts the condition. Default is `false`.
---@field invert? boolean
local LuaEntityDeconstructionCancelledEventFilter_base={
}
end

---@alias LuaEntityDeconstructionCancelledEventFilter (LuaEntityDeconstructionCancelledEventFilter.ghost_name)|(LuaEntityDeconstructionCancelledEventFilter.ghost_type)|(LuaEntityDeconstructionCancelledEventFilter.name)|(LuaEntityDeconstructionCancelledEventFilter.type)|(LuaEntityDeconstructionCancelledEventFilter.base)

do
---@class LuaEntityDeconstructionCancelledEventFilter.ghost_name:LuaEntityDeconstructionCancelledEventFilter.base
---The ghost prototype name.
---@field name string
local LuaEntityDeconstructionCancelledEventFilter_ghost_name={
}
end

do
---@class LuaEntityDeconstructionCancelledEventFilter.ghost_type:LuaEntityDeconstructionCancelledEventFilter.base
---The ghost prototype type.
---@field type string
local LuaEntityDeconstructionCancelledEventFilter_ghost_type={
}
end

do
---@class LuaEntityDeconstructionCancelledEventFilter.name:LuaEntityDeconstructionCancelledEventFilter.base
---The prototype name.
---@field name string
local LuaEntityDeconstructionCancelledEventFilter_name={
}
end

do
---@class LuaEntityDeconstructionCancelledEventFilter.type:LuaEntityDeconstructionCancelledEventFilter.base
---The prototype type.
---@field type string
local LuaEntityDeconstructionCancelledEventFilter_type={
}
end

do
---@class LuaEntityDiedEventFilter.base
---The condition to filter on.
---@field filter ("ghost")|("rail")|("rail-signal")|("rolling-stock")|("robot-with-logistics-interface")|("vehicle")|("turret")|("crafting-machine")|("wall-connectable")|("transport-belt-connectable")|("circuit-network-connectable")|("type")|("name")|("ghost_type")|("ghost_name")
---How to combine this with the previous filter. Defaults to `"or"`. When evaluating the filters, `"and"` has higher precedence than `"or"`.
---@field mode? ("or")|("and")
---Inverts the condition. Default is `false`.
---@field invert? boolean
local LuaEntityDiedEventFilter_base={
}
end

---@alias LuaEntityDiedEventFilter (LuaEntityDiedEventFilter.ghost_name)|(LuaEntityDiedEventFilter.ghost_type)|(LuaEntityDiedEventFilter.name)|(LuaEntityDiedEventFilter.type)|(LuaEntityDiedEventFilter.base)

do
---@class LuaEntityDiedEventFilter.ghost_name:LuaEntityDiedEventFilter.base
---The ghost prototype name.
---@field name string
local LuaEntityDiedEventFilter_ghost_name={
}
end

do
---@class LuaEntityDiedEventFilter.ghost_type:LuaEntityDiedEventFilter.base
---The ghost prototype type.
---@field type string
local LuaEntityDiedEventFilter_ghost_type={
}
end

do
---@class LuaEntityDiedEventFilter.name:LuaEntityDiedEventFilter.base
---The prototype name.
---@field name string
local LuaEntityDiedEventFilter_name={
}
end

do
---@class LuaEntityDiedEventFilter.type:LuaEntityDiedEventFilter.base
---The prototype type.
---@field type string
local LuaEntityDiedEventFilter_type={
}
end

do
---@class LuaEntityMarkedForDeconstructionEventFilter.base
---The condition to filter on.
---@field filter ("ghost")|("rail")|("rail-signal")|("rolling-stock")|("robot-with-logistics-interface")|("vehicle")|("turret")|("crafting-machine")|("wall-connectable")|("transport-belt-connectable")|("circuit-network-connectable")|("type")|("name")|("ghost_type")|("ghost_name")
---How to combine this with the previous filter. Defaults to `"or"`. When evaluating the filters, `"and"` has higher precedence than `"or"`.
---@field mode? ("or")|("and")
---Inverts the condition. Default is `false`.
---@field invert? boolean
local LuaEntityMarkedForDeconstructionEventFilter_base={
}
end

---@alias LuaEntityMarkedForDeconstructionEventFilter (LuaEntityMarkedForDeconstructionEventFilter.ghost_name)|(LuaEntityMarkedForDeconstructionEventFilter.ghost_type)|(LuaEntityMarkedForDeconstructionEventFilter.name)|(LuaEntityMarkedForDeconstructionEventFilter.type)|(LuaEntityMarkedForDeconstructionEventFilter.base)

do
---@class LuaEntityMarkedForDeconstructionEventFilter.ghost_name:LuaEntityMarkedForDeconstructionEventFilter.base
---The ghost prototype name.
---@field name string
local LuaEntityMarkedForDeconstructionEventFilter_ghost_name={
}
end

do
---@class LuaEntityMarkedForDeconstructionEventFilter.ghost_type:LuaEntityMarkedForDeconstructionEventFilter.base
---The ghost prototype type.
---@field type string
local LuaEntityMarkedForDeconstructionEventFilter_ghost_type={
}
end

do
---@class LuaEntityMarkedForDeconstructionEventFilter.name:LuaEntityMarkedForDeconstructionEventFilter.base
---The prototype name.
---@field name string
local LuaEntityMarkedForDeconstructionEventFilter_name={
}
end

do
---@class LuaEntityMarkedForDeconstructionEventFilter.type:LuaEntityMarkedForDeconstructionEventFilter.base
---The prototype type.
---@field type string
local LuaEntityMarkedForDeconstructionEventFilter_type={
}
end

do
---@class LuaEntityMarkedForUpgradeEventFilter.base
---The condition to filter on.
---@field filter ("ghost")|("rail")|("rail-signal")|("rolling-stock")|("robot-with-logistics-interface")|("vehicle")|("turret")|("crafting-machine")|("wall-connectable")|("transport-belt-connectable")|("circuit-network-connectable")|("type")|("name")|("ghost_type")|("ghost_name")
---How to combine this with the previous filter. Defaults to `"or"`. When evaluating the filters, `"and"` has higher precedence than `"or"`.
---@field mode? ("or")|("and")
---Inverts the condition. Default is `false`.
---@field invert? boolean
local LuaEntityMarkedForUpgradeEventFilter_base={
}
end

---@alias LuaEntityMarkedForUpgradeEventFilter (LuaEntityMarkedForUpgradeEventFilter.ghost_name)|(LuaEntityMarkedForUpgradeEventFilter.ghost_type)|(LuaEntityMarkedForUpgradeEventFilter.name)|(LuaEntityMarkedForUpgradeEventFilter.type)|(LuaEntityMarkedForUpgradeEventFilter.base)

do
---@class LuaEntityMarkedForUpgradeEventFilter.ghost_name:LuaEntityMarkedForUpgradeEventFilter.base
---The ghost prototype name.
---@field name string
local LuaEntityMarkedForUpgradeEventFilter_ghost_name={
}
end

do
---@class LuaEntityMarkedForUpgradeEventFilter.ghost_type:LuaEntityMarkedForUpgradeEventFilter.base
---The ghost prototype type.
---@field type string
local LuaEntityMarkedForUpgradeEventFilter_ghost_type={
}
end

do
---@class LuaEntityMarkedForUpgradeEventFilter.name:LuaEntityMarkedForUpgradeEventFilter.base
---The prototype name.
---@field name string
local LuaEntityMarkedForUpgradeEventFilter_name={
}
end

do
---@class LuaEntityMarkedForUpgradeEventFilter.type:LuaEntityMarkedForUpgradeEventFilter.base
---The prototype type.
---@field type string
local LuaEntityMarkedForUpgradeEventFilter_type={
}
end

do
---@class LuaPlatformBuiltEntityEventFilter.base
---The condition to filter on.
---@field filter ("ghost")|("rail")|("rail-signal")|("rolling-stock")|("robot-with-logistics-interface")|("vehicle")|("turret")|("crafting-machine")|("wall-connectable")|("transport-belt-connectable")|("circuit-network-connectable")|("type")|("name")|("ghost_type")|("ghost_name")|("force")
---How to combine this with the previous filter. Defaults to `"or"`. When evaluating the filters, `"and"` has higher precedence than `"or"`.
---@field mode? ("or")|("and")
---Inverts the condition. Default is `false`.
---@field invert? boolean
local LuaPlatformBuiltEntityEventFilter_base={
}
end

---@alias LuaPlatformBuiltEntityEventFilter (LuaPlatformBuiltEntityEventFilter.force)|(LuaPlatformBuiltEntityEventFilter.ghost_name)|(LuaPlatformBuiltEntityEventFilter.ghost_type)|(LuaPlatformBuiltEntityEventFilter.name)|(LuaPlatformBuiltEntityEventFilter.type)|(LuaPlatformBuiltEntityEventFilter.base)

do
---@class LuaPlatformBuiltEntityEventFilter.force:LuaPlatformBuiltEntityEventFilter.base
---The entity force
---@field force string
local LuaPlatformBuiltEntityEventFilter_force={
}
end

do
---@class LuaPlatformBuiltEntityEventFilter.ghost_name:LuaPlatformBuiltEntityEventFilter.base
---The ghost prototype name.
---@field name string
local LuaPlatformBuiltEntityEventFilter_ghost_name={
}
end

do
---@class LuaPlatformBuiltEntityEventFilter.ghost_type:LuaPlatformBuiltEntityEventFilter.base
---The ghost prototype type.
---@field type string
local LuaPlatformBuiltEntityEventFilter_ghost_type={
}
end

do
---@class LuaPlatformBuiltEntityEventFilter.name:LuaPlatformBuiltEntityEventFilter.base
---The prototype name.
---@field name string
local LuaPlatformBuiltEntityEventFilter_name={
}
end

do
---@class LuaPlatformBuiltEntityEventFilter.type:LuaPlatformBuiltEntityEventFilter.base
---The prototype type.
---@field type string
local LuaPlatformBuiltEntityEventFilter_type={
}
end

do
---@class LuaPlatformMinedEntityEventFilter.base
---The condition to filter on.
---@field filter ("ghost")|("rail")|("rail-signal")|("rolling-stock")|("robot-with-logistics-interface")|("vehicle")|("turret")|("crafting-machine")|("wall-connectable")|("transport-belt-connectable")|("circuit-network-connectable")|("type")|("name")|("ghost_type")|("ghost_name")
---How to combine this with the previous filter. Defaults to `"or"`. When evaluating the filters, `"and"` has higher precedence than `"or"`.
---@field mode? ("or")|("and")
---Inverts the condition. Default is `false`.
---@field invert? boolean
local LuaPlatformMinedEntityEventFilter_base={
}
end

---@alias LuaPlatformMinedEntityEventFilter (LuaPlatformMinedEntityEventFilter.ghost_name)|(LuaPlatformMinedEntityEventFilter.ghost_type)|(LuaPlatformMinedEntityEventFilter.name)|(LuaPlatformMinedEntityEventFilter.type)|(LuaPlatformMinedEntityEventFilter.base)

do
---@class LuaPlatformMinedEntityEventFilter.ghost_name:LuaPlatformMinedEntityEventFilter.base
---The ghost prototype name.
---@field name string
local LuaPlatformMinedEntityEventFilter_ghost_name={
}
end

do
---@class LuaPlatformMinedEntityEventFilter.ghost_type:LuaPlatformMinedEntityEventFilter.base
---The ghost prototype type.
---@field type string
local LuaPlatformMinedEntityEventFilter_ghost_type={
}
end

do
---@class LuaPlatformMinedEntityEventFilter.name:LuaPlatformMinedEntityEventFilter.base
---The prototype name.
---@field name string
local LuaPlatformMinedEntityEventFilter_name={
}
end

do
---@class LuaPlatformMinedEntityEventFilter.type:LuaPlatformMinedEntityEventFilter.base
---The prototype type.
---@field type string
local LuaPlatformMinedEntityEventFilter_type={
}
end

do
---@class LuaPlayerBuiltEntityEventFilter.base
---The condition to filter on.
---@field filter ("ghost")|("rail")|("rail-signal")|("rolling-stock")|("robot-with-logistics-interface")|("vehicle")|("turret")|("crafting-machine")|("wall-connectable")|("transport-belt-connectable")|("circuit-network-connectable")|("type")|("name")|("ghost_type")|("ghost_name")|("force")
---How to combine this with the previous filter. Defaults to `"or"`. When evaluating the filters, `"and"` has higher precedence than `"or"`.
---@field mode? ("or")|("and")
---Inverts the condition. Default is `false`.
---@field invert? boolean
local LuaPlayerBuiltEntityEventFilter_base={
}
end

---@alias LuaPlayerBuiltEntityEventFilter (LuaPlayerBuiltEntityEventFilter.force)|(LuaPlayerBuiltEntityEventFilter.ghost_name)|(LuaPlayerBuiltEntityEventFilter.ghost_type)|(LuaPlayerBuiltEntityEventFilter.name)|(LuaPlayerBuiltEntityEventFilter.type)|(LuaPlayerBuiltEntityEventFilter.base)

do
---@class LuaPlayerBuiltEntityEventFilter.force:LuaPlayerBuiltEntityEventFilter.base
---The entity force
---@field force string
local LuaPlayerBuiltEntityEventFilter_force={
}
end

do
---@class LuaPlayerBuiltEntityEventFilter.ghost_name:LuaPlayerBuiltEntityEventFilter.base
---The ghost prototype name.
---@field name string
local LuaPlayerBuiltEntityEventFilter_ghost_name={
}
end

do
---@class LuaPlayerBuiltEntityEventFilter.ghost_type:LuaPlayerBuiltEntityEventFilter.base
---The ghost prototype type.
---@field type string
local LuaPlayerBuiltEntityEventFilter_ghost_type={
}
end

do
---@class LuaPlayerBuiltEntityEventFilter.name:LuaPlayerBuiltEntityEventFilter.base
---The prototype name.
---@field name string
local LuaPlayerBuiltEntityEventFilter_name={
}
end

do
---@class LuaPlayerBuiltEntityEventFilter.type:LuaPlayerBuiltEntityEventFilter.base
---The prototype type.
---@field type string
local LuaPlayerBuiltEntityEventFilter_type={
}
end

do
---@class LuaPlayerMinedEntityEventFilter.base
---The condition to filter on.
---@field filter ("ghost")|("rail")|("rail-signal")|("rolling-stock")|("robot-with-logistics-interface")|("vehicle")|("turret")|("crafting-machine")|("wall-connectable")|("transport-belt-connectable")|("circuit-network-connectable")|("type")|("name")|("ghost_type")|("ghost_name")
---How to combine this with the previous filter. Defaults to `"or"`. When evaluating the filters, `"and"` has higher precedence than `"or"`.
---@field mode? ("or")|("and")
---Inverts the condition. Default is `false`.
---@field invert? boolean
local LuaPlayerMinedEntityEventFilter_base={
}
end

---@alias LuaPlayerMinedEntityEventFilter (LuaPlayerMinedEntityEventFilter.ghost_name)|(LuaPlayerMinedEntityEventFilter.ghost_type)|(LuaPlayerMinedEntityEventFilter.name)|(LuaPlayerMinedEntityEventFilter.type)|(LuaPlayerMinedEntityEventFilter.base)

do
---@class LuaPlayerMinedEntityEventFilter.ghost_name:LuaPlayerMinedEntityEventFilter.base
---The ghost prototype name.
---@field name string
local LuaPlayerMinedEntityEventFilter_ghost_name={
}
end

do
---@class LuaPlayerMinedEntityEventFilter.ghost_type:LuaPlayerMinedEntityEventFilter.base
---The ghost prototype type.
---@field type string
local LuaPlayerMinedEntityEventFilter_ghost_type={
}
end

do
---@class LuaPlayerMinedEntityEventFilter.name:LuaPlayerMinedEntityEventFilter.base
---The prototype name.
---@field name string
local LuaPlayerMinedEntityEventFilter_name={
}
end

do
---@class LuaPlayerMinedEntityEventFilter.type:LuaPlayerMinedEntityEventFilter.base
---The prototype type.
---@field type string
local LuaPlayerMinedEntityEventFilter_type={
}
end

do
---@class LuaPlayerRepairedEntityEventFilter.base
---The condition to filter on.
---@field filter ("ghost")|("rail")|("rail-signal")|("rolling-stock")|("robot-with-logistics-interface")|("vehicle")|("turret")|("crafting-machine")|("wall-connectable")|("transport-belt-connectable")|("circuit-network-connectable")|("type")|("name")|("ghost_type")|("ghost_name")
---How to combine this with the previous filter. Defaults to `"or"`. When evaluating the filters, `"and"` has higher precedence than `"or"`.
---@field mode? ("or")|("and")
---Inverts the condition. Default is `false`.
---@field invert? boolean
local LuaPlayerRepairedEntityEventFilter_base={
}
end

---@alias LuaPlayerRepairedEntityEventFilter (LuaPlayerRepairedEntityEventFilter.ghost_name)|(LuaPlayerRepairedEntityEventFilter.ghost_type)|(LuaPlayerRepairedEntityEventFilter.name)|(LuaPlayerRepairedEntityEventFilter.type)|(LuaPlayerRepairedEntityEventFilter.base)

do
---@class LuaPlayerRepairedEntityEventFilter.ghost_name:LuaPlayerRepairedEntityEventFilter.base
---The ghost prototype name.
---@field name string
local LuaPlayerRepairedEntityEventFilter_ghost_name={
}
end

do
---@class LuaPlayerRepairedEntityEventFilter.ghost_type:LuaPlayerRepairedEntityEventFilter.base
---The ghost prototype type.
---@field type string
local LuaPlayerRepairedEntityEventFilter_ghost_type={
}
end

do
---@class LuaPlayerRepairedEntityEventFilter.name:LuaPlayerRepairedEntityEventFilter.base
---The prototype name.
---@field name string
local LuaPlayerRepairedEntityEventFilter_name={
}
end

do
---@class LuaPlayerRepairedEntityEventFilter.type:LuaPlayerRepairedEntityEventFilter.base
---The prototype type.
---@field type string
local LuaPlayerRepairedEntityEventFilter_type={
}
end

do
---@class LuaPostEntityDiedEventFilter.base
---The condition to filter on.
---@field filter ("ghost")
---How to combine this with the previous filter. Defaults to `"or"`. When evaluating the filters, `"and"` has higher precedence than `"or"`.
---@field mode? ("or")|("and")
---Inverts the condition. Default is `false`.
---@field invert? boolean
local LuaPostEntityDiedEventFilter_base={
}
end

---@alias LuaPostEntityDiedEventFilter (LuaPostEntityDiedEventFilter.type)|(LuaPostEntityDiedEventFilter.base)

do
---@class LuaPostEntityDiedEventFilter.type:LuaPostEntityDiedEventFilter.base
---The prototype type.
---@field type string
local LuaPostEntityDiedEventFilter_type={
}
end

do
---@class LuaPreGhostDeconstructedEventFilter.base
---The condition to filter on.
---@field filter ("ghost")|("rail")|("rail-signal")|("rolling-stock")|("robot-with-logistics-interface")|("vehicle")|("turret")|("crafting-machine")|("wall-connectable")|("transport-belt-connectable")|("circuit-network-connectable")|("type")|("name")|("ghost_type")|("ghost_name")
---How to combine this with the previous filter. Defaults to `"or"`. When evaluating the filters, `"and"` has higher precedence than `"or"`.
---@field mode? ("or")|("and")
---Inverts the condition. Default is `false`.
---@field invert? boolean
local LuaPreGhostDeconstructedEventFilter_base={
}
end

---@alias LuaPreGhostDeconstructedEventFilter (LuaPreGhostDeconstructedEventFilter.ghost_name)|(LuaPreGhostDeconstructedEventFilter.ghost_type)|(LuaPreGhostDeconstructedEventFilter.name)|(LuaPreGhostDeconstructedEventFilter.type)|(LuaPreGhostDeconstructedEventFilter.base)

do
---@class LuaPreGhostDeconstructedEventFilter.ghost_name:LuaPreGhostDeconstructedEventFilter.base
---The ghost prototype name.
---@field name string
local LuaPreGhostDeconstructedEventFilter_ghost_name={
}
end

do
---@class LuaPreGhostDeconstructedEventFilter.ghost_type:LuaPreGhostDeconstructedEventFilter.base
---The ghost prototype type.
---@field type string
local LuaPreGhostDeconstructedEventFilter_ghost_type={
}
end

do
---@class LuaPreGhostDeconstructedEventFilter.name:LuaPreGhostDeconstructedEventFilter.base
---The prototype name.
---@field name string
local LuaPreGhostDeconstructedEventFilter_name={
}
end

do
---@class LuaPreGhostDeconstructedEventFilter.type:LuaPreGhostDeconstructedEventFilter.base
---The prototype type.
---@field type string
local LuaPreGhostDeconstructedEventFilter_type={
}
end

do
---@class LuaPreGhostUpgradedEventFilter.base
---The condition to filter on.
---@field filter ("ghost")|("rail")|("rail-signal")|("rolling-stock")|("robot-with-logistics-interface")|("vehicle")|("turret")|("crafting-machine")|("wall-connectable")|("transport-belt-connectable")|("circuit-network-connectable")|("type")|("name")|("ghost_type")|("ghost_name")
---How to combine this with the previous filter. Defaults to `"or"`. When evaluating the filters, `"and"` has higher precedence than `"or"`.
---@field mode? ("or")|("and")
---Inverts the condition. Default is `false`.
---@field invert? boolean
local LuaPreGhostUpgradedEventFilter_base={
}
end

---@alias LuaPreGhostUpgradedEventFilter (LuaPreGhostUpgradedEventFilter.ghost_name)|(LuaPreGhostUpgradedEventFilter.ghost_type)|(LuaPreGhostUpgradedEventFilter.name)|(LuaPreGhostUpgradedEventFilter.type)|(LuaPreGhostUpgradedEventFilter.base)

do
---@class LuaPreGhostUpgradedEventFilter.ghost_name:LuaPreGhostUpgradedEventFilter.base
---The ghost prototype name.
---@field name string
local LuaPreGhostUpgradedEventFilter_ghost_name={
}
end

do
---@class LuaPreGhostUpgradedEventFilter.ghost_type:LuaPreGhostUpgradedEventFilter.base
---The ghost prototype type.
---@field type string
local LuaPreGhostUpgradedEventFilter_ghost_type={
}
end

do
---@class LuaPreGhostUpgradedEventFilter.name:LuaPreGhostUpgradedEventFilter.base
---The prototype name.
---@field name string
local LuaPreGhostUpgradedEventFilter_name={
}
end

do
---@class LuaPreGhostUpgradedEventFilter.type:LuaPreGhostUpgradedEventFilter.base
---The prototype type.
---@field type string
local LuaPreGhostUpgradedEventFilter_type={
}
end

do
---@class LuaPrePlatformMinedEntityEventFilter.base
---The condition to filter on.
---@field filter ("ghost")|("rail")|("rail-signal")|("rolling-stock")|("robot-with-logistics-interface")|("vehicle")|("turret")|("crafting-machine")|("wall-connectable")|("transport-belt-connectable")|("circuit-network-connectable")|("type")|("name")|("ghost_type")|("ghost_name")
---How to combine this with the previous filter. Defaults to `"or"`. When evaluating the filters, `"and"` has higher precedence than `"or"`.
---@field mode? ("or")|("and")
---Inverts the condition. Default is `false`.
---@field invert? boolean
local LuaPrePlatformMinedEntityEventFilter_base={
}
end

---@alias LuaPrePlatformMinedEntityEventFilter (LuaPrePlatformMinedEntityEventFilter.ghost_name)|(LuaPrePlatformMinedEntityEventFilter.ghost_type)|(LuaPrePlatformMinedEntityEventFilter.name)|(LuaPrePlatformMinedEntityEventFilter.type)|(LuaPrePlatformMinedEntityEventFilter.base)

do
---@class LuaPrePlatformMinedEntityEventFilter.ghost_name:LuaPrePlatformMinedEntityEventFilter.base
---The ghost prototype name.
---@field name string
local LuaPrePlatformMinedEntityEventFilter_ghost_name={
}
end

do
---@class LuaPrePlatformMinedEntityEventFilter.ghost_type:LuaPrePlatformMinedEntityEventFilter.base
---The ghost prototype type.
---@field type string
local LuaPrePlatformMinedEntityEventFilter_ghost_type={
}
end

do
---@class LuaPrePlatformMinedEntityEventFilter.name:LuaPrePlatformMinedEntityEventFilter.base
---The prototype name.
---@field name string
local LuaPrePlatformMinedEntityEventFilter_name={
}
end

do
---@class LuaPrePlatformMinedEntityEventFilter.type:LuaPrePlatformMinedEntityEventFilter.base
---The prototype type.
---@field type string
local LuaPrePlatformMinedEntityEventFilter_type={
}
end

do
---@class LuaPrePlayerMinedEntityEventFilter.base
---The condition to filter on.
---@field filter ("ghost")|("rail")|("rail-signal")|("rolling-stock")|("robot-with-logistics-interface")|("vehicle")|("turret")|("crafting-machine")|("wall-connectable")|("transport-belt-connectable")|("circuit-network-connectable")|("type")|("name")|("ghost_type")|("ghost_name")
---How to combine this with the previous filter. Defaults to `"or"`. When evaluating the filters, `"and"` has higher precedence than `"or"`.
---@field mode? ("or")|("and")
---Inverts the condition. Default is `false`.
---@field invert? boolean
local LuaPrePlayerMinedEntityEventFilter_base={
}
end

---@alias LuaPrePlayerMinedEntityEventFilter (LuaPrePlayerMinedEntityEventFilter.ghost_name)|(LuaPrePlayerMinedEntityEventFilter.ghost_type)|(LuaPrePlayerMinedEntityEventFilter.name)|(LuaPrePlayerMinedEntityEventFilter.type)|(LuaPrePlayerMinedEntityEventFilter.base)

do
---@class LuaPrePlayerMinedEntityEventFilter.ghost_name:LuaPrePlayerMinedEntityEventFilter.base
---The ghost prototype name.
---@field name string
local LuaPrePlayerMinedEntityEventFilter_ghost_name={
}
end

do
---@class LuaPrePlayerMinedEntityEventFilter.ghost_type:LuaPrePlayerMinedEntityEventFilter.base
---The ghost prototype type.
---@field type string
local LuaPrePlayerMinedEntityEventFilter_ghost_type={
}
end

do
---@class LuaPrePlayerMinedEntityEventFilter.name:LuaPrePlayerMinedEntityEventFilter.base
---The prototype name.
---@field name string
local LuaPrePlayerMinedEntityEventFilter_name={
}
end

do
---@class LuaPrePlayerMinedEntityEventFilter.type:LuaPrePlayerMinedEntityEventFilter.base
---The prototype type.
---@field type string
local LuaPrePlayerMinedEntityEventFilter_type={
}
end

do
---@class LuaPreRobotMinedEntityEventFilter.base
---The condition to filter on.
---@field filter ("ghost")|("rail")|("rail-signal")|("rolling-stock")|("robot-with-logistics-interface")|("vehicle")|("turret")|("crafting-machine")|("wall-connectable")|("transport-belt-connectable")|("circuit-network-connectable")|("type")|("name")|("ghost_type")|("ghost_name")
---How to combine this with the previous filter. Defaults to `"or"`. When evaluating the filters, `"and"` has higher precedence than `"or"`.
---@field mode? ("or")|("and")
---Inverts the condition. Default is `false`.
---@field invert? boolean
local LuaPreRobotMinedEntityEventFilter_base={
}
end

---@alias LuaPreRobotMinedEntityEventFilter (LuaPreRobotMinedEntityEventFilter.ghost_name)|(LuaPreRobotMinedEntityEventFilter.ghost_type)|(LuaPreRobotMinedEntityEventFilter.name)|(LuaPreRobotMinedEntityEventFilter.type)|(LuaPreRobotMinedEntityEventFilter.base)

do
---@class LuaPreRobotMinedEntityEventFilter.ghost_name:LuaPreRobotMinedEntityEventFilter.base
---The ghost prototype name.
---@field name string
local LuaPreRobotMinedEntityEventFilter_ghost_name={
}
end

do
---@class LuaPreRobotMinedEntityEventFilter.ghost_type:LuaPreRobotMinedEntityEventFilter.base
---The ghost prototype type.
---@field type string
local LuaPreRobotMinedEntityEventFilter_ghost_type={
}
end

do
---@class LuaPreRobotMinedEntityEventFilter.name:LuaPreRobotMinedEntityEventFilter.base
---The prototype name.
---@field name string
local LuaPreRobotMinedEntityEventFilter_name={
}
end

do
---@class LuaPreRobotMinedEntityEventFilter.type:LuaPreRobotMinedEntityEventFilter.base
---The prototype type.
---@field type string
local LuaPreRobotMinedEntityEventFilter_type={
}
end

do
---@class LuaRobotBuiltEntityEventFilter.base
---The condition to filter on.
---@field filter ("ghost")|("rail")|("rail-signal")|("rolling-stock")|("robot-with-logistics-interface")|("vehicle")|("turret")|("crafting-machine")|("wall-connectable")|("transport-belt-connectable")|("circuit-network-connectable")|("type")|("name")|("ghost_type")|("ghost_name")|("force")
---How to combine this with the previous filter. Defaults to `"or"`. When evaluating the filters, `"and"` has higher precedence than `"or"`.
---@field mode? ("or")|("and")
---Inverts the condition. Default is `false`.
---@field invert? boolean
local LuaRobotBuiltEntityEventFilter_base={
}
end

---@alias LuaRobotBuiltEntityEventFilter (LuaRobotBuiltEntityEventFilter.force)|(LuaRobotBuiltEntityEventFilter.ghost_name)|(LuaRobotBuiltEntityEventFilter.ghost_type)|(LuaRobotBuiltEntityEventFilter.name)|(LuaRobotBuiltEntityEventFilter.type)|(LuaRobotBuiltEntityEventFilter.base)

do
---@class LuaRobotBuiltEntityEventFilter.force:LuaRobotBuiltEntityEventFilter.base
---The entity force
---@field force string
local LuaRobotBuiltEntityEventFilter_force={
}
end

do
---@class LuaRobotBuiltEntityEventFilter.ghost_name:LuaRobotBuiltEntityEventFilter.base
---The ghost prototype name.
---@field name string
local LuaRobotBuiltEntityEventFilter_ghost_name={
}
end

do
---@class LuaRobotBuiltEntityEventFilter.ghost_type:LuaRobotBuiltEntityEventFilter.base
---The ghost prototype type.
---@field type string
local LuaRobotBuiltEntityEventFilter_ghost_type={
}
end

do
---@class LuaRobotBuiltEntityEventFilter.name:LuaRobotBuiltEntityEventFilter.base
---The prototype name.
---@field name string
local LuaRobotBuiltEntityEventFilter_name={
}
end

do
---@class LuaRobotBuiltEntityEventFilter.type:LuaRobotBuiltEntityEventFilter.base
---The prototype type.
---@field type string
local LuaRobotBuiltEntityEventFilter_type={
}
end

do
---@class LuaRobotMinedEntityEventFilter.base
---The condition to filter on.
---@field filter ("ghost")|("rail")|("rail-signal")|("rolling-stock")|("robot-with-logistics-interface")|("vehicle")|("turret")|("crafting-machine")|("wall-connectable")|("transport-belt-connectable")|("circuit-network-connectable")|("type")|("name")|("ghost_type")|("ghost_name")
---How to combine this with the previous filter. Defaults to `"or"`. When evaluating the filters, `"and"` has higher precedence than `"or"`.
---@field mode? ("or")|("and")
---Inverts the condition. Default is `false`.
---@field invert? boolean
local LuaRobotMinedEntityEventFilter_base={
}
end

---@alias LuaRobotMinedEntityEventFilter (LuaRobotMinedEntityEventFilter.ghost_name)|(LuaRobotMinedEntityEventFilter.ghost_type)|(LuaRobotMinedEntityEventFilter.name)|(LuaRobotMinedEntityEventFilter.type)|(LuaRobotMinedEntityEventFilter.base)

do
---@class LuaRobotMinedEntityEventFilter.ghost_name:LuaRobotMinedEntityEventFilter.base
---The ghost prototype name.
---@field name string
local LuaRobotMinedEntityEventFilter_ghost_name={
}
end

do
---@class LuaRobotMinedEntityEventFilter.ghost_type:LuaRobotMinedEntityEventFilter.base
---The ghost prototype type.
---@field type string
local LuaRobotMinedEntityEventFilter_ghost_type={
}
end

do
---@class LuaRobotMinedEntityEventFilter.name:LuaRobotMinedEntityEventFilter.base
---The prototype name.
---@field name string
local LuaRobotMinedEntityEventFilter_name={
}
end

do
---@class LuaRobotMinedEntityEventFilter.type:LuaRobotMinedEntityEventFilter.base
---The prototype type.
---@field type string
local LuaRobotMinedEntityEventFilter_type={
}
end

do
---@class LuaScriptRaisedBuiltEventFilter.base
---The condition to filter on.
---@field filter ("ghost")|("rail")|("rail-signal")|("rolling-stock")|("robot-with-logistics-interface")|("vehicle")|("turret")|("crafting-machine")|("wall-connectable")|("transport-belt-connectable")|("circuit-network-connectable")|("type")|("name")|("ghost_type")|("ghost_name")
---How to combine this with the previous filter. Defaults to `"or"`. When evaluating the filters, `"and"` has higher precedence than `"or"`.
---@field mode? ("or")|("and")
---Inverts the condition. Default is `false`.
---@field invert? boolean
local LuaScriptRaisedBuiltEventFilter_base={
}
end

---@alias LuaScriptRaisedBuiltEventFilter (LuaScriptRaisedBuiltEventFilter.ghost_name)|(LuaScriptRaisedBuiltEventFilter.ghost_type)|(LuaScriptRaisedBuiltEventFilter.name)|(LuaScriptRaisedBuiltEventFilter.type)|(LuaScriptRaisedBuiltEventFilter.base)

do
---@class LuaScriptRaisedBuiltEventFilter.ghost_name:LuaScriptRaisedBuiltEventFilter.base
---The ghost prototype name.
---@field name string
local LuaScriptRaisedBuiltEventFilter_ghost_name={
}
end

do
---@class LuaScriptRaisedBuiltEventFilter.ghost_type:LuaScriptRaisedBuiltEventFilter.base
---The ghost prototype type.
---@field type string
local LuaScriptRaisedBuiltEventFilter_ghost_type={
}
end

do
---@class LuaScriptRaisedBuiltEventFilter.name:LuaScriptRaisedBuiltEventFilter.base
---The prototype name.
---@field name string
local LuaScriptRaisedBuiltEventFilter_name={
}
end

do
---@class LuaScriptRaisedBuiltEventFilter.type:LuaScriptRaisedBuiltEventFilter.base
---The prototype type.
---@field type string
local LuaScriptRaisedBuiltEventFilter_type={
}
end

do
---@class LuaScriptRaisedDestroyEventFilter.base
---The condition to filter on.
---@field filter ("ghost")|("rail")|("rail-signal")|("rolling-stock")|("robot-with-logistics-interface")|("vehicle")|("turret")|("crafting-machine")|("wall-connectable")|("transport-belt-connectable")|("circuit-network-connectable")|("type")|("name")|("ghost_type")|("ghost_name")
---How to combine this with the previous filter. Defaults to `"or"`. When evaluating the filters, `"and"` has higher precedence than `"or"`.
---@field mode? ("or")|("and")
---Inverts the condition. Default is `false`.
---@field invert? boolean
local LuaScriptRaisedDestroyEventFilter_base={
}
end

---@alias LuaScriptRaisedDestroyEventFilter (LuaScriptRaisedDestroyEventFilter.ghost_name)|(LuaScriptRaisedDestroyEventFilter.ghost_type)|(LuaScriptRaisedDestroyEventFilter.name)|(LuaScriptRaisedDestroyEventFilter.type)|(LuaScriptRaisedDestroyEventFilter.base)

do
---@class LuaScriptRaisedDestroyEventFilter.ghost_name:LuaScriptRaisedDestroyEventFilter.base
---The ghost prototype name.
---@field name string
local LuaScriptRaisedDestroyEventFilter_ghost_name={
}
end

do
---@class LuaScriptRaisedDestroyEventFilter.ghost_type:LuaScriptRaisedDestroyEventFilter.base
---The ghost prototype type.
---@field type string
local LuaScriptRaisedDestroyEventFilter_ghost_type={
}
end

do
---@class LuaScriptRaisedDestroyEventFilter.name:LuaScriptRaisedDestroyEventFilter.base
---The prototype name.
---@field name string
local LuaScriptRaisedDestroyEventFilter_name={
}
end

do
---@class LuaScriptRaisedDestroyEventFilter.type:LuaScriptRaisedDestroyEventFilter.base
---The prototype type.
---@field type string
local LuaScriptRaisedDestroyEventFilter_type={
}
end

do
---@class LuaScriptRaisedReviveEventFilter.base
---The condition to filter on.
---@field filter ("ghost")|("rail")|("rail-signal")|("rolling-stock")|("robot-with-logistics-interface")|("vehicle")|("turret")|("crafting-machine")|("wall-connectable")|("transport-belt-connectable")|("circuit-network-connectable")|("type")|("name")|("ghost_type")|("ghost_name")
---How to combine this with the previous filter. Defaults to `"or"`. When evaluating the filters, `"and"` has higher precedence than `"or"`.
---@field mode? ("or")|("and")
---Inverts the condition. Default is `false`.
---@field invert? boolean
local LuaScriptRaisedReviveEventFilter_base={
}
end

---@alias LuaScriptRaisedReviveEventFilter (LuaScriptRaisedReviveEventFilter.ghost_name)|(LuaScriptRaisedReviveEventFilter.ghost_type)|(LuaScriptRaisedReviveEventFilter.name)|(LuaScriptRaisedReviveEventFilter.type)|(LuaScriptRaisedReviveEventFilter.base)

do
---@class LuaScriptRaisedReviveEventFilter.ghost_name:LuaScriptRaisedReviveEventFilter.base
---The ghost prototype name.
---@field name string
local LuaScriptRaisedReviveEventFilter_ghost_name={
}
end

do
---@class LuaScriptRaisedReviveEventFilter.ghost_type:LuaScriptRaisedReviveEventFilter.base
---The ghost prototype type.
---@field type string
local LuaScriptRaisedReviveEventFilter_ghost_type={
}
end

do
---@class LuaScriptRaisedReviveEventFilter.name:LuaScriptRaisedReviveEventFilter.base
---The prototype name.
---@field name string
local LuaScriptRaisedReviveEventFilter_name={
}
end

do
---@class LuaScriptRaisedReviveEventFilter.type:LuaScriptRaisedReviveEventFilter.base
---The prototype type.
---@field type string
local LuaScriptRaisedReviveEventFilter_type={
}
end

do
---@class LuaScriptRaisedTeleportedEventFilter.base
---The condition to filter on.
---@field filter ("ghost")|("rail")|("rail-signal")|("rolling-stock")|("robot-with-logistics-interface")|("vehicle")|("turret")|("crafting-machine")|("wall-connectable")|("transport-belt-connectable")|("circuit-network-connectable")|("type")|("name")|("ghost_type")|("ghost_name")
---How to combine this with the previous filter. Defaults to `"or"`. When evaluating the filters, `"and"` has higher precedence than `"or"`.
---@field mode? ("or")|("and")
---Inverts the condition. Default is `false`.
---@field invert? boolean
local LuaScriptRaisedTeleportedEventFilter_base={
}
end

---@alias LuaScriptRaisedTeleportedEventFilter (LuaScriptRaisedTeleportedEventFilter.ghost_name)|(LuaScriptRaisedTeleportedEventFilter.ghost_type)|(LuaScriptRaisedTeleportedEventFilter.name)|(LuaScriptRaisedTeleportedEventFilter.type)|(LuaScriptRaisedTeleportedEventFilter.base)

do
---@class LuaScriptRaisedTeleportedEventFilter.ghost_name:LuaScriptRaisedTeleportedEventFilter.base
---The ghost prototype name.
---@field name string
local LuaScriptRaisedTeleportedEventFilter_ghost_name={
}
end

do
---@class LuaScriptRaisedTeleportedEventFilter.ghost_type:LuaScriptRaisedTeleportedEventFilter.base
---The ghost prototype type.
---@field type string
local LuaScriptRaisedTeleportedEventFilter_ghost_type={
}
end

do
---@class LuaScriptRaisedTeleportedEventFilter.name:LuaScriptRaisedTeleportedEventFilter.base
---The prototype name.
---@field name string
local LuaScriptRaisedTeleportedEventFilter_name={
}
end

do
---@class LuaScriptRaisedTeleportedEventFilter.type:LuaScriptRaisedTeleportedEventFilter.base
---The prototype type.
---@field type string
local LuaScriptRaisedTeleportedEventFilter_type={
}
end

do
---@class LuaSectorScannedEventFilter.base
---The condition to filter on.
---@field filter ("ghost")|("rail")|("rail-signal")|("rolling-stock")|("robot-with-logistics-interface")|("vehicle")|("turret")|("crafting-machine")|("wall-connectable")|("transport-belt-connectable")|("circuit-network-connectable")|("type")|("name")|("ghost_type")|("ghost_name")
---How to combine this with the previous filter. Defaults to `"or"`. When evaluating the filters, `"and"` has higher precedence than `"or"`.
---@field mode? ("or")|("and")
---Inverts the condition. Default is `false`.
---@field invert? boolean
local LuaSectorScannedEventFilter_base={
}
end

---@alias LuaSectorScannedEventFilter (LuaSectorScannedEventFilter.ghost_name)|(LuaSectorScannedEventFilter.ghost_type)|(LuaSectorScannedEventFilter.name)|(LuaSectorScannedEventFilter.type)|(LuaSectorScannedEventFilter.base)

do
---@class LuaSectorScannedEventFilter.ghost_name:LuaSectorScannedEventFilter.base
---The ghost prototype name.
---@field name string
local LuaSectorScannedEventFilter_ghost_name={
}
end

do
---@class LuaSectorScannedEventFilter.ghost_type:LuaSectorScannedEventFilter.base
---The ghost prototype type.
---@field type string
local LuaSectorScannedEventFilter_ghost_type={
}
end

do
---@class LuaSectorScannedEventFilter.name:LuaSectorScannedEventFilter.base
---The prototype name.
---@field name string
local LuaSectorScannedEventFilter_name={
}
end

do
---@class LuaSectorScannedEventFilter.type:LuaSectorScannedEventFilter.base
---The prototype type.
---@field type string
local LuaSectorScannedEventFilter_type={
}
end

do
---@class LuaUpgradeCancelledEventFilter.base
---The condition to filter on.
---@field filter ("ghost")|("rail")|("rail-signal")|("rolling-stock")|("robot-with-logistics-interface")|("vehicle")|("turret")|("crafting-machine")|("wall-connectable")|("transport-belt-connectable")|("circuit-network-connectable")|("type")|("name")|("ghost_type")|("ghost_name")
---How to combine this with the previous filter. Defaults to `"or"`. When evaluating the filters, `"and"` has higher precedence than `"or"`.
---@field mode? ("or")|("and")
---Inverts the condition. Default is `false`.
---@field invert? boolean
local LuaUpgradeCancelledEventFilter_base={
}
end

---@alias LuaUpgradeCancelledEventFilter (LuaUpgradeCancelledEventFilter.ghost_name)|(LuaUpgradeCancelledEventFilter.ghost_type)|(LuaUpgradeCancelledEventFilter.name)|(LuaUpgradeCancelledEventFilter.type)|(LuaUpgradeCancelledEventFilter.base)

do
---@class LuaUpgradeCancelledEventFilter.ghost_name:LuaUpgradeCancelledEventFilter.base
---The ghost prototype name.
---@field name string
local LuaUpgradeCancelledEventFilter_ghost_name={
}
end

do
---@class LuaUpgradeCancelledEventFilter.ghost_type:LuaUpgradeCancelledEventFilter.base
---The ghost prototype type.
---@field type string
local LuaUpgradeCancelledEventFilter_ghost_type={
}
end

do
---@class LuaUpgradeCancelledEventFilter.name:LuaUpgradeCancelledEventFilter.base
---The prototype name.
---@field name string
local LuaUpgradeCancelledEventFilter_name={
}
end

do
---@class LuaUpgradeCancelledEventFilter.type:LuaUpgradeCancelledEventFilter.base
---The prototype type.
---@field type string
local LuaUpgradeCancelledEventFilter_type={
}
end

do
---@class MapAndDifficultySettings
---@field pollution PollutionMapSettings
---@field enemy_evolution EnemyEvolutionMapSettings
---@field enemy_expansion EnemyExpansionMapSettings
---@field unit_group UnitGroupMapSettings
---@field steering SteeringMapSettings
---@field path_finder PathFinderMapSettings
---@field asteroids AsteroidMapSettings
---If a behavior fails this many times, the enemy (or enemy group) is destroyed. This solves biters getting stuck within their own base.
---@field max_failed_behavior_count uint
---@field difficulty_settings MapDifficultySettings
local MapAndDifficultySettings={
}
end

do
---@class MapDifficultySettings
---A value in range \[0.001, 1000].
---@field technology_price_multiplier double
---A value in range \[0.01, 100].
---@field spoil_time_modifier double
local MapDifficultySettings={
}
end

do
---@class MapExchangeStringData
---@field map_settings MapAndDifficultySettings
---@field map_gen_settings MapGenSettings
local MapExchangeStringData={
}
end

do
---@class MapGenPreset
---The string used to alphabetically sort the presets. It is a simple string that has no additional semantic meaning.
---@field order string
---Whether this is the preset that is selected by default.
---@field default? boolean
---@field basic_settings? MapGenSettings
---@field advanced_settings? AdvancedMapGenSettings
local MapGenPreset={
}
end

do
---@class MapGenSettings
---Indexed by autoplace control prototype name.
---@field autoplace_controls {[string]:AutoplaceControl}
---Whether undefined `autoplace_controls` should fall back to the default controls or not. Defaults to `true`.
---@field default_enable_all_autoplace_controls boolean
---Each setting in this dictionary maps the string type to the settings for that type.
---@field autoplace_settings {[("entity")|("tile")|("decorative")]:AutoplaceSettings}
---The random seed used to generated this map.
---@field seed uint
---Width in tiles. If `0`, the map has 'infinite' width, with the actual limitation being one million tiles in each direction from the center.
---@field width uint
---Height in tiles. If `0`, the map has 'infinite' height, with the actual limitation being one million tiles in each direction from the center.
---@field height uint
---Size of the starting area.
---@field starting_area MapGenSize
---Positions of the starting areas.
---@field starting_points (MapPosition)[]
---Whether enemy creatures will not attack unless the player first attacks them.
---@field peaceful_mode boolean
---Whether enemy creatures will not naturally spawn from spawners, map gen, or trigger effects.
---@field no_enemies_mode boolean
---Overrides for tile property value generators.
---@field property_expression_names PropertyExpressionNames
---Map generation settings for entities of the type "cliff".
---@field cliff_settings CliffPlacementSettings
---@field territory_settings TerritorySettings
local MapGenSettings={
}
end

---A floating point number specifying an amount.
---
---For backwards compatibility, MapGenSizes can also be specified as a string, which will be converted to a number (when queried, a number will always be returned).
---
---The map generation algorithm officially supports the range of values the in-game map generation screen shows (specifically `0` and values from `1/6` to `6`). Values outside this range are not guaranteed to work as expected.
---
---[View Documentation](https://lua-api.factorio.com/latest/concepts.html#MapGenSize)
---@alias MapGenSize (float)|("none")|("very-low")|("very-small")|("very-poor")|("low")|("small")|("poor")|("normal")|("medium")|("regular")|("high")|("big")|("good")|("very-high")|("very-big")|("very-good")

do
---@class MapPosition.0
---@field x double
---@field y double
local MapPosition_0={
}
end

---Coordinates on a surface, for example of an entity. MapPositions may be specified either as a dictionary with `x`, `y` as keys, or simply as an array with two elements.
---
---The coordinates are saved as a fixed-size 32 bit integer, with 8 bits reserved for decimal precision, meaning the smallest value step is `1/2^8 = 0.00390625` tiles.
---
---[View Documentation](https://lua-api.factorio.com/latest/concepts.html#MapPosition)
---
---### Example
---
---```
----- Explicit definition
---{x = 5.5, y = 2}
---{y = 2.25, x = 5.125}
---```
---
---### Example
---
---```
----- Shorthand
---{1.625, 2.375}
---```
---@alias MapPosition (MapPosition.0)|({[1]:double, [2]:double})

do
---@class MapSettings
---@field asteroids AsteroidMapSettings
---@field enemy_evolution EnemyEvolutionMapSettings
---@field enemy_expansion EnemyExpansionMapSettings
---If a behavior fails this many times, the enemy (or enemy group) is destroyed. This solves biters getting stuck within their own base.
---@field max_failed_behavior_count uint
---@field path_finder PathFinderMapSettings
---@field pollution PollutionMapSettings
---@field steering SteeringMapSetting
---@field unit_group UnitGroupMapSettings
local MapSettings={
}
end

---`math.huge` represents the maximum possible tick.
---
---[View Documentation](https://lua-api.factorio.com/latest/concepts.html#MapTick)
---@alias MapTick uint64

do
---@class MapViewSettings
---@field show-logistic-network? boolean
---@field show-electric-network? boolean
---@field show-turret-range? boolean
---@field show-pollution? boolean
---@field show-networkless-logistic-members? boolean
---@field show-train-station-names? boolean
---@field show-player-names? boolean
---@field show-tags? boolean
---@field show-worker-robots? boolean
---@field show-rail-signal-states? boolean
---@field show-recipe-icons? boolean
---@field show-pipelines? boolean
---@field show-non-standard-map-info? boolean
local MapViewSettings={
}
end

do
---@class MarketIngredient
---Prototype name of the required item.
---@field name string
---Normal quality will be used if not specified.
---@field quality? string
---Count of the item. Cannot be 0.
---@field count ItemCountType
local MarketIngredient={
}
end

---A string that represents a math expression. The expression parser recognizes four basic token types (with their regex):
---
---* Whitespace: `[ \n\r\t]*`
---
---* Number: `(0x[0-9a-f]+|([0-9]+\.?[0-9]*|\.[0-9]+)(e-?[0-9]+)?)` (e.g. `3.2`, `100`, `.6`, `4.2e-5`, `0x2a5f`). Supports hexadecimal input and scientific notation for decimal numbers.
---
---* Operator: `+`, `-`, `*`, `/`, `^`, and `()` for brackets, which may be nested.
---
---* Identifier: The functions listed below and any variables listed where the expression is used.
---
---Identifiers are used to name functions and variables, which result in or represent numbers. The following functions are always available:
---
---* `abs(value)`: Returns absolute value of the given argument; i.e. if the argument is negative, it is inverted.
---
---* `log2(value)`: Returns a binary logarithm of the given value.
---
---* `sign(value)`: Returns `-1` for negative numbers, `0` for zero (regardless of sign), `1` for positive numbers
---
---* `max(value1, value2, ...)`: Returns the greater of the given values. Supports between 2 and 255 arguments.
---
---* `min(value1, value2, ...)`: Returns the smaller of the given values. Supports between 2 and 255 arguments.
---
---The property where the expression is used may provide variables. For example in [TechnologyUnit::count\_formula](https://lua-api.factorio.com/latest/types/TechnologyUnit.html#count_formula) `L` and `l` may be used for the technology level.
---
---The formula is executed following the [BODMAS](https://en.wikipedia.org/wiki/Order_of_operations#Conventional_order) order (also known as PEMDAS).
---
---[View Documentation](https://lua-api.factorio.com/latest/concepts.html#MathExpression)
---
---### Example
---
---```
---"2500 * (L - 3)"
---```
---
---### Example
---
---```
---"(4e5 * (abs(speed) + 10.5)) / weight"
---```
---@alias MathExpression string

do
---@class MineableProperties
---Is this entity mineable at all?
---@field minable boolean
---Energy required to mine an entity.
---@field mining_time double
---Prototype name of the particle produced when mining this entity. Will only be present if this entity produces any particle during mining.
---@field mining_particle? string
---Products obtained by mining this entity.
---@field products? (Product)[]
---The required fluid amount if any.
---@field fluid_amount? double
---The prototype name of the required fluid if any.
---@field required_fluid? string
---The mining trigger if any.
---@field mining_trigger? (TriggerItem)[]
local MineableProperties={
}
end

do
---@class ModChangeData
---Old version of the mod. May be `nil` if the mod wasn't previously present (i.e. it was just added).
---@field old_version string
---New version of the mod. May be `nil` if the mod is no longer present (i.e. it was just removed).
---@field new_version string
local ModChangeData={
}
end

do
---@class ModSetting
---The value of the mod setting. The type depends on the kind of setting.
---@field value (int)|(double)|(boolean)|(string)|(Color)
local ModSetting={
}
end

do
---@class ModSettingPrototypeFilter.base
---The condition to filter on.
---@field filter ("type")|("mod")|("setting-type")
---How to combine this with the previous filter. Defaults to `"or"`. When evaluating the filters, `"and"` has higher precedence than `"or"`.
---@field mode? ("or")|("and")
---Inverts the condition. Default is `false`.
---@field invert? boolean
local ModSettingPrototypeFilter_base={
}
end

---@alias ModSettingPrototypeFilter (ModSettingPrototypeFilter.mod)|(ModSettingPrototypeFilter.setting_type)|(ModSettingPrototypeFilter.type)|(ModSettingPrototypeFilter.base)

do
---@class ModSettingPrototypeFilter.mod:ModSettingPrototypeFilter.base
---The mod name
---@field mod string
local ModSettingPrototypeFilter_mod={
}
end

do
---@class ModSettingPrototypeFilter.setting_type:ModSettingPrototypeFilter.base
---The setting scope type.
---@field type ("startup")|("runtime-global")|("runtime-per-user")
local ModSettingPrototypeFilter_setting_type={
}
end

do
---@class ModSettingPrototypeFilter.type:ModSettingPrototypeFilter.base
---The prototype type, or a list of acceptable types.
---@field type (string)|((string)[])
local ModSettingPrototypeFilter_type={
}
end

---Used by [TechnologyModifier](https://lua-api.factorio.com/latest/concepts.html#TechnologyModifier).
---
---[View Documentation](https://lua-api.factorio.com/latest/concepts.html#ModifierType)
---@alias ModifierType ("inserter-stack-size-bonus")|("bulk-inserter-capacity-bonus")|("laboratory-speed")|("character-logistic-trash-slots")|("maximum-following-robots-count")|("worker-robot-speed")|("worker-robot-storage")|("turret-attack")|("ammo-damage")|("give-item")|("gun-speed")|("unlock-recipe")|("character-crafting-speed")|("character-mining-speed")|("character-running-speed")|("character-build-distance")|("character-item-drop-distance")|("character-reach-distance")|("character-resource-reach-distance")|("character-item-pickup-distance")|("character-loot-pickup-distance")|("character-inventory-slots-bonus")|("deconstruction-time-to-live")|("max-failed-attempts-per-tick-per-construction-queue")|("max-successful-attempts-per-tick-per-construction-queue")|("character-health-bonus")|("mining-drill-productivity-bonus")|("train-braking-force-bonus")|("worker-robot-battery")|("laboratory-productivity")|("follower-robot-lifetime")|("artillery-range")|("nothing")|("character-logistic-requests")|("unlock-space-location")|("unlock-quality")|("unlock-space-platforms")|("unlock-circuit-network")|("cargo-landing-pad-count")|("change-recipe-productivity")|("cliff-deconstruction-enabled")|("mining-with-fluid")|("rail-support-on-deep-oil-ocean")|("rail-planner-allow-elevated-rails")|("beacon-distribution")|("create-ghost-on-entity-death")|("belt-stack-size-bonus")|("vehicle-logistics")

---The percentual increase of the attribute. A value of `0.6` means a 60% increase.
---
---[View Documentation](https://lua-api.factorio.com/latest/concepts.html#ModuleEffectValue)
---@alias ModuleEffectValue float

do
---@class ModuleEffects
---@field consumption? ModuleEffectValue
---@field speed? ModuleEffectValue
---@field productivity? ModuleEffectValue
---@field pollution? ModuleEffectValue
---@field quality? ModuleEffectValue
local ModuleEffects={
}
end

do
---A set of flags. Active flags are in the dictionary as `true`, while inactive flags aren't present at all.
---
---To write to this, use an array\[[string](https://lua-api.factorio.com/latest/concepts.html#string)] of the mouse buttons that should be possible to use with on button. The flag `"left-and-right"` can also be set, which will set `"left"` and `"right"` to `true`.
---
---[View Documentation](https://lua-api.factorio.com/latest/concepts.html#MouseButtonFlags)
---@class MouseButtonFlags
---@field ["left"] true
---@field ["right"] true
---@field ["middle"] true
---@field ["button-4"] true
---@field ["button-5"] true
---@field ["button-6"] true
---@field ["button-7"] true
---@field ["button-8"] true
---@field ["button-9"] true
local MouseButtonFlags={
}
end

do
---@class NoiseExpression
---Names the type of the expression and determines what other fields are required.
---@field type string
local NoiseExpression={
}
end

do
---@class NthTickEventData
---The tick during which the event happened.
---@field tick uint
---The nth tick this handler was registered to.
---@field nth_tick uint
local NthTickEventData={
}
end

do
---@class Offer
---List of prices.
---@field price? (MarketIngredient)[]
---The action that will take place when a player accepts the offer. Usually a `"give-item"` modifier.
---@field offer TechnologyModifier
local Offer={
}
end

do
---@class OldTileAndPosition
---@field old_tile LuaTilePrototype
---@field position TilePosition
local OldTileAndPosition={
}
end

---A particle prototype may be specified in one of two ways.
---
---[View Documentation](https://lua-api.factorio.com/latest/concepts.html#ParticleID)
---@alias ParticleID (LuaParticlePrototype)|(string)

do
---@class PathFinderMapSettings
---The pathfinder performs a step of the backward search every `fwd2bwd_ratio`'th step. The minimum allowed value is `2`, which means symmetric search. The default value is `5`.
---@field fwd2bwd_ratio uint
---When looking at which node to check next, their heuristic value is multiplied by this ratio. The higher it is, the more the search is directed straight at the goal. Defaults to `2`.
---@field goal_pressure_ratio double
---Whether to cache paths at all. Defaults to `true`.
---@field use_path_cache boolean
---The maximum number of nodes that are expanded per tick. Defaults to `1 000`.
---@field max_steps_worked_per_tick double
---The maximum amount of work each pathfinding job is allowed to do per tick. Defaults to `8 000`.
---@field max_work_done_per_tick uint
---Number of elements in the short cache. Defaults to `5`.
---@field short_cache_size uint
---Number of elements in the long cache. Defaults to `25`.
---@field long_cache_size uint
---The minimal distance to the goal in tiles required to be searched in the short path cache. Defaults to `10`.
---@field short_cache_min_cacheable_distance double
---The minimal number of nodes required to be searched in the short path cache. Defaults to `50`.
---@field short_cache_min_algo_steps_to_cache uint
---The minimal distance to the goal in tiles required to be searched in the long path cache. Defaults to `30`.
---@field long_cache_min_cacheable_distance double
---When looking for a connection to a cached path, search at most for this number of steps times the original estimate. Defaults to `100`.
---@field cache_max_connect_to_cache_steps_multiplier uint
---When looking for a path from cache, make sure it doesn't start too far from the requested start in relative terms. Defaults to `0.2`.
---@field cache_accept_path_start_distance_ratio double
---When looking for a path from cache, make sure it doesn't end too far from the requested end in relative terms. This is typically more lenient than the start ratio since the end target could be moving. Defaults to `0.15`.
---@field cache_accept_path_end_distance_ratio double
---Same principle as `cache_accept_path_start_distance_ratio`, but used for negative cache queries. Defaults to `0.3`.
---@field negative_cache_accept_path_start_distance_ratio double
---Same principle as `cache_accept_path_end_distance_ratio`, but used for negative cache queries. Defaults to `0.3`.
---@field negative_cache_accept_path_end_distance_ratio double
---When assigning a rating to the best path, this multiplier times start distances is considered. Defaults to `10`.
---@field cache_path_start_distance_rating_multiplier double
---When assigning a rating to the best path, this multiplier times end distances is considered. This value is typically higher than the start multiplier as this results in better end path quality. Defaults to `20`.
---@field cache_path_end_distance_rating_multiplier double
---A penalty that is applied for another unit that is on the way to the goal. This is mainly relevant for situations where a group of units has arrived at the target they are supposed to attack, making units further back circle around to reach the target. Defaults to `30`.
---@field stale_enemy_with_same_destination_collision_penalty double
---The distance in tiles after which other moving units are not considered for pathfinding. Defaults to `5`.
---@field ignore_moving_enemy_collision_distance double
---A penalty that is applied for another unit that is too close and either not moving or has a different goal. Defaults to `30`.
---@field enemy_with_different_destination_collision_penalty double
---The general collision penalty with other units. Defaults to `10`.
---@field general_entity_collision_penalty double
---The collision penalty for positions that require the destruction of an entity to get to. Defaults to `3`.
---@field general_entity_subsequent_collision_penalty double
---The collision penalty for collisions in the extended bounding box but outside the entity's actual bounding box. Defaults to `3`.
---@field extended_collision_penalty double
---The amount of path finder requests accepted per tick regardless of the requested path's length. Defaults to `10`.
---@field max_clients_to_accept_any_new_request uint
---When the `max_clients_to_accept_any_new_request` amount is exhausted, only path finder requests with a short estimate will be accepted until this amount (per tick) is reached. Defaults to `100`.
---@field max_clients_to_accept_short_new_request uint
---The maximum direct distance in tiles before a request is no longer considered short. Defaults to `100`.
---@field direct_distance_to_consider_short_request uint
---The maximum amount of nodes a short request will traverse before being rescheduled as a long request. Defaults to `1000`.
---@field short_request_max_steps uint
---The amount of steps that are allocated to short requests each tick, as a percentage of all available steps. Defaults to `0.5`, or 50%.
---@field short_request_ratio double
---The minimum amount of steps that are guaranteed to be performed for every request. Defaults to `2000`.
---@field min_steps_to_check_path_find_termination uint
---If the actual amount of steps is higher than the initial estimate by this factor, pathfinding is terminated. Defaults to `2000.0`.
---@field start_to_goal_cost_multiplier_to_terminate_path_find double
---The thresholds of waiting clients after each of which the per-tick work limit will be increased by the corresponding value in `overload_multipliers`. This is to avoid clients having to wait too long. Must have the same number of elements as `overload_multipliers`. Defaults to `{0, 100, 500}`.
---@field overload_levels (uint)[]
---The multipliers to the amount of per-tick work applied after the corresponding thresholds in `overload_levels` have been reached. Must have the same number of elements as `overload_multipliers`. Defaults to `{2, 3, 4}`.
---@field overload_multipliers (double)[]
---The delay in ticks between decrementing the score of all paths in the negative cache by one. Defaults to `20`.
---@field negative_path_cache_delay_interval uint
local PathFinderMapSettings={
}
end

do
---@class PathfinderFlags
---Allows pathing through friendly entities. Defaults to `false`.
---@field allow_destroy_friendly_entities? boolean
---Allows the pathfinder to path through entities of the same force. Defaults to `false`.
---@field allow_paths_through_own_entities? boolean
---Enables path caching. This can be more efficient, but might fail to respond to changes in the environment. Defaults to `true`.
---@field cache? boolean
---Makes the pathfinder try to path in straight lines. Defaults to `false`.
---@field prefer_straight_paths? boolean
---Sets lower priority on the path request, meaning it might take longer to find a path at the expense of speeding up others. Defaults to `false`.
---@field low_priority? boolean
---Makes the pathfinder not break in the middle of processing this pathfind, no matter how much work is needed. Defaults to `false`.
---@field no_break? boolean
local PathfinderFlags={
}
end

do
---@class PathfinderWaypoint
---The position of the waypoint on its surface.
---@field position MapPosition
---`true` if the path from the previous waypoint to this one goes through an entity that must be destroyed.
---@field needs_destroy_to_reach boolean
local PathfinderWaypoint={
}
end

do
---@class PipeConnection
---@field flow_direction ("input")|("output")|("input-output")
---@field connection_type ("normal")|("underground")|("linked")
---The absolute position of this connection within the entity.
---@field position MapPosition
---The absolute position of the connection's intended target.
---@field target_position MapPosition
---The connected fluidbox, if any.
---@field target? LuaFluidBox
---The index of the target fluidbox, if any.
---@field target_fluidbox_index? uint
---The index of the target fluidbox pipe connection, if any.
---@field target_pipe_connection_index? uint
local PipeConnection={
}
end

do
---@class PipeConnectionDefinition
---The 4 cardinal direction connection points for this pipe.
---@field positions (MapPosition)[]
---The maximum tile distance this underground connection can connect.
---@field max_underground_distance? uint
---@field flow_direction ("input-output")|("input")|("output")
---@field direction defines.direction
local PipeConnectionDefinition={
}
end

do
---@class PlaceAsTileResult
---The tile prototype.
---@field result LuaTilePrototype
---@field condition_size uint
---@field condition CollisionMask
local PlaceAsTileResult={
}
end

do
---@class PlatformSchedule
---Index of the currently active record
---@field current uint
---@field records (ScheduleRecord)[]
local PlatformSchedule={
}
end

---A player may be specified in one of three ways.
---
---[View Documentation](https://lua-api.factorio.com/latest/concepts.html#PlayerIdentification)
---@alias PlayerIdentification (uint)|(string)|(LuaPlayer)

do
---@class PollutionMapSettings
---Whether pollution is enabled at all.
---@field enabled boolean
---The amount that is diffused to a neighboring chunk (possibly repeated for other directions as well). Defaults to `0.02`.
---@field diffusion_ratio double
---The amount of PUs that need to be in a chunk for it to start diffusing. Defaults to `15`.
---@field min_to_diffuse double
---The amount of pollution eaten by a chunk's tiles as a percentage of 1. Also known as absorption modifier. Defaults to `1`.
---@field ageing double
---Any amount of pollution larger than this value is visualized as this value instead. Defaults to `150`.
---@field expected_max_per_chunk double
---Any amount of pollution smaller than this value (but bigger than zero) is visualized as this value instead. Defaults to `50`.
---@field min_to_show_per_chunk double
---Defaults to `60`.
---@field min_pollution_to_damage_trees double
---Defaults to `150`.
---@field pollution_with_max_forest_damage double
---Defaults to `50`.
---@field pollution_per_tree_damage double
---Defaults to `10`.
---@field pollution_restored_per_tree_damage double
---Defaults to `20`.
---@field max_pollution_to_restore_trees double
---Defaults to `1`.
---@field enemy_attack_pollution_consumption_modifier double
local PollutionMapSettings={
}
end

do
---@class PrintSettings
---Color of the message to print. Defaults to white.
---@field color? Color
---If a sound should be emitted for this message. Defaults to `defines.print_sound.use_player_settings`.
---@field sound? defines.print_sound
---Condition when to skip adding message. Defaults to `defines.print_skip.if_redundant`.
---@field skip? defines.print_skip
---The sound to play. If not given, [UtilitySounds::console\_message](https://lua-api.factorio.com/latest/prototypes/UtilitySounds.html#console_message) will be used instead.
---@field sound_path? SoundPath
---The volume of the sound to play. Must be between 0 and 1 inclusive. Defaults to 1.
---@field volume_modifier? float
---If set to false, message will not be part of game state and will disappear from output console after save-load. Defaults to `true`.
---@field game_state? boolean
local PrintSettings={
}
end

---Returns one of the subtypes, depending on the value of `type`.
---
---[View Documentation](https://lua-api.factorio.com/latest/concepts.html#Product)
---
---### Example
---
---```
----- Products of the "steel-chest" recipe (an array of Product)
---{{type="item", name="steel-chest", amount=1}}
---```
---
---### Example
---
---```
----- Products of the "advanced-oil-processing" recipe
---{{type="fluid", name="heavy-oil", amount=1},
---  {type="fluid", name="light-oil", amount=4.5},
---  {type="fluid", name="petroleum-gas", amount=5.5}}
---```
---
---### Example
---
---```
----- What a custom recipe would look like that had a probability of 0.5 to return a
----- minimum amount of 1 and a maximum amount of 5
---{{type="item", name="custom-item", probability=0.5, amount_min=1, amount_max=5}}
---```
---@alias Product (ItemProduct)|(FluidProduct)|(ResearchProgressProduct)

do
---@class ProgrammableSpeakerAlertParameters
---@field show_alert boolean
---@field show_on_map boolean
---@field icon_signal_id SignalID
---@field alert_message string
local ProgrammableSpeakerAlertParameters={
}
end

do
---@class ProgrammableSpeakerCircuitParameters
---@field signal_value_is_pitch boolean
---@field instrument_id uint
---@field note_id uint
local ProgrammableSpeakerCircuitParameters={
}
end

do
---@class ProgrammableSpeakerInstrument
---@field name string
---@field notes (string)[]
local ProgrammableSpeakerInstrument={
}
end

do
---@class ProgrammableSpeakerParameters
---@field playback_volume float
---@field playback_mode ProgrammableSpeakerPlaybackMode
---@field allow_polyphony boolean
local ProgrammableSpeakerParameters={
}
end

---Specifies from where the programmable speaker's sound will be heard.
---
---[View Documentation](https://lua-api.factorio.com/latest/concepts.html#ProgrammableSpeakerPlaybackMode)
---@alias ProgrammableSpeakerPlaybackMode ("local")|("surface")|("global")

---All other MapGenSettings feed into named noise expressions, and therefore placement can be overridden by including the name of a property in this dictionary. The probability and richness functions for placing specific tiles, entities, and decoratives can be overridden by including an entry named `{tile|entity|decorative}:(prototype name):{probability|richness}`.
---
---Values either name a NamedNoiseExpression or can be literal numbers, stored as strings (e.g. `5`). All other controls can be overridden by a property expression names. Notable properties:
---
---* `moisture` - a value between 0 and 1 that determines whether a tile becomes sandy (low moisture) or grassy (high moisture).
---* `aux` - a value between 0 and 1 that determines whether low-moisture tiles become sand or red desert.
---* `temperature` - provides a value (vaguely representing degrees Celsius, varying between -20 and 50) that is used (together with moisture and aux) as part of tree and decorative placement.
---* `elevation` - tiles values less than zero become water. Cliffs are placed along certain contours according to [CliffPlacementSettings](https://lua-api.factorio.com/latest/concepts.html#CliffPlacementSettings).
---* `cliffiness` - determines whether (when >0.5) or not (when <0.5) a cliff will be placed at an otherwise suitable (according to [CliffPlacementSettings](https://lua-api.factorio.com/latest/concepts.html#CliffPlacementSettings)) location.
---* `enemy-base-intensity` - a number that is referenced by both `enemy-base-frequency` and `enemy-base-radius`. i.e. if this is overridden, enemy base frequency and size will both be affected and do something reasonable. By default, this expression returns a value proportional to distance from any starting point, clamped at about 7.
---* `enemy-base-frequency` - a number representing average number of enemy bases per tile for a region, by default in terms of `enemy-base-intensity`.
---* `enemy-base-radius` - a number representing the radius of an enemy base, if one were to be placed on the given tile, by default proportional to a constant plus `enemy-base-intensity`.
---
---Climate controls ('Moisture' and 'Terrain type' at the bottom of the Terrain tab in the map generator GUI) don't have their own dedicated structures in MapGenSettings. Instead, their values are stored as property expression overrides with long names:
---
---* `control:moisture:frequency` - frequency (inverse of scale) multiplier for moisture noise.  Default is 1.
---* `control:moisture:bias` - global bias for moisture (which normally varies between 0 and 1). Default is 0.
---* `control:aux:frequency` - frequency (inverse of scale) multiplier for aux (called 'terrain type' in the GUI) noise.  Default is 1.
---* `control:aux:bias` - global bias for aux/terrain type (which normally varies between 0 and 1). Default is 0.
---
---[View Documentation](https://lua-api.factorio.com/latest/concepts.html#PropertyExpressionNames)
---@alias PropertyExpressionNames {[string]:string}

---Types `"signal"` and `"item-group"` do not support filters.
---
---Filters are always used as an array of filters of a specific type. Every filter can only be used with its corresponding event, and different types of event filters can not be mixed.
---
---[View Documentation](https://lua-api.factorio.com/latest/concepts.html#PrototypeFilter)
---@alias PrototypeFilter ((ModSettingPrototypeFilter)|(TilePrototypeFilter)|(DecorativePrototypeFilter)|(RecipePrototypeFilter)|(AchievementPrototypeFilter)|(TechnologyPrototypeFilter)|(AsteroidChunkPrototypeFilter)|(ItemPrototypeFilter)|(EquipmentPrototypeFilter)|(EntityPrototypeFilter)|(SpaceLocationPrototypeFilter)|(FluidPrototypeFilter))[]

---[View Documentation](https://lua-api.factorio.com/latest/concepts.html#PrototypeFilterMode)
---@alias PrototypeFilterMode ("none")|("whitelist")|("blacklist")

do
---@class PrototypeHistory
---The mod that created this prototype.
---@field created string
---The mods that changed this prototype in the order they changed it.
---@field changed (string)[]
local PrototypeHistory={
}
end

do
---@class QualityCondition.0
---The prototype name of the quality.
---@field quality? string
---The comparator for quality.
---@field comparator? ComparatorString
local QualityCondition_0={
}
end

---An item filter may be specified in two ways, either as a string which is a quality prototype name or as a table.
---
---[View Documentation](https://lua-api.factorio.com/latest/concepts.html#QualityCondition)
---@alias QualityCondition (QualityCondition.0)|(string)

---A quality prototype may be specified in one of two ways.
---
---[View Documentation](https://lua-api.factorio.com/latest/concepts.html#QualityID)
---@alias QualityID (LuaQualityPrototype)|(string)

do
---@class RadiusVisualisationSpecification
---@field distance double
---@field offset Vector
---@field draw_in_cursor boolean
---@field draw_on_selection boolean
local RadiusVisualisationSpecification={
}
end

do
---@class RailEndGoal
---Rail target.
---@field rail LuaEntity
---@field direction defines.rail_direction
---Goal priority. If not provided, defaults to 50.
---@field priority? uint8
local RailEndGoal={
}
end

do
---@class RailEndStart
---@field rail LuaEntity
---@field direction defines.rail_direction
---Defaults to `true`. Providing false will cause the pathfinder to reject a path that starts here and ends in the same segment as the path would be too short to provide correct alignment with a goal.
---@field allow_path_within_segment? boolean
---Defaults to `false`.
---@field is_front? boolean
---Start priority. Defaults to `50`.
---@field priority? uint8
local RailEndStart={
}
end

do
---@class RailExtensionData
---Name of the entity prototype to be built
---@field name string
---Position of the entity to be built
---@field position MapPosition
---Direction of the entity to be built
---@field direction defines.direction
---Goal where this rail extension will go to
---@field goal RailLocation
local RailExtensionData={
}
end

do
---@class RailLocation
---@field position MapPosition
---@field direction defines.direction
---@field rail_layer defines.rail_layer
local RailLocation={
}
end

---A table containing the parameters required to raise a given game event. See the event being raised for what parameters are required.
---
---[View Documentation](https://lua-api.factorio.com/latest/concepts.html#RaiseEventParameters)
---@alias RaiseEventParameters table

---[View Documentation](https://lua-api.factorio.com/latest/concepts.html#RangeMode)
---@alias RangeMode ("center-to-center")|("bounding-box-to-bounding-box")|("center-to-bounding-box")

---The smooth orientation. It is a [float](https://lua-api.factorio.com/latest/concepts.html#float) in the range `[0, 1)` that covers a full circle, starting at the top and going clockwise. This means a value of `0` indicates "north", a value of `0.5` indicates "south".
---
---For example then, a value of `0.625` would indicate "south-west", and a value of `0.875` would indicate "north-west".
---
---[View Documentation](https://lua-api.factorio.com/latest/concepts.html#RealOrientation)
---@alias RealOrientation float

---A recipe may be specified in one of three ways.
---
---[View Documentation](https://lua-api.factorio.com/latest/concepts.html#RecipeID)
---@alias RecipeID (LuaRecipePrototype)|(LuaRecipe)|(string)

do
---@class RecipeIDAndQualityIDPair
---Recipe prototype.
---@field name RecipeID
---Quality prototype.
---@field quality QualityID
local RecipeIDAndQualityIDPair={
}
end

do
---@class RecipePrototypeFilter.base
---The condition to filter on.
---@field filter ("enabled")|("hidden")|("hidden-from-flow-stats")|("hidden-from-player-crafting")|("allow-as-intermediate")|("allow-intermediates")|("allow-decomposition")|("always-show-made-in")|("always-show-products")|("show-amount-in-title")|("has-ingredients")|("has-products")|("has-ingredient-item")|("has-ingredient-fluid")|("has-product-item")|("has-product-fluid")|("subgroup")|("category")|("energy")|("emissions-multiplier")|("request-paste-multiplier")|("overload-multiplier")
---How to combine this with the previous filter. Defaults to `"or"`. When evaluating the filters, `"and"` has higher precedence than `"or"`.
---@field mode? ("or")|("and")
---Inverts the condition. Default is `false`.
---@field invert? boolean
local RecipePrototypeFilter_base={
}
end

---@alias RecipePrototypeFilter (RecipePrototypeFilter.category)|(RecipePrototypeFilter.emissions_multiplier)|(RecipePrototypeFilter.energy)|(RecipePrototypeFilter.has_ingredient_fluid)|(RecipePrototypeFilter.has_ingredient_item)|(RecipePrototypeFilter.has_product_fluid)|(RecipePrototypeFilter.has_product_item)|(RecipePrototypeFilter.overload_multiplier)|(RecipePrototypeFilter.request_paste_multiplier)|(RecipePrototypeFilter.subgroup)|(RecipePrototypeFilter.base)

do
---@class RecipePrototypeFilter.category:RecipePrototypeFilter.base
---A [LuaRecipeCategoryPrototype](https://lua-api.factorio.com/latest/classes/LuaRecipeCategoryPrototype.html) name
---@field category string
local RecipePrototypeFilter_category={
}
end

do
---@class RecipePrototypeFilter.emissions_multiplier:RecipePrototypeFilter.base
---@field comparison ComparatorString
---The value to compare against.
---@field value double
local RecipePrototypeFilter_emissions_multiplier={
}
end

do
---@class RecipePrototypeFilter.energy:RecipePrototypeFilter.base
---@field comparison ComparatorString
---The value to compare against.
---@field value double
local RecipePrototypeFilter_energy={
}
end

do
---@class RecipePrototypeFilter.has_ingredient_fluid:RecipePrototypeFilter.base
---Matches if at least 1 ingredient is a fluid that matches these filters.
---@field elem_filters? (FluidPrototypeFilter)[]
local RecipePrototypeFilter_has_ingredient_fluid={
}
end

do
---@class RecipePrototypeFilter.has_ingredient_item:RecipePrototypeFilter.base
---Matches if at least 1 ingredient is an item that matches these filters.
---@field elem_filters? (ItemPrototypeFilter)[]
local RecipePrototypeFilter_has_ingredient_item={
}
end

do
---@class RecipePrototypeFilter.has_product_fluid:RecipePrototypeFilter.base
---Matches if at least 1 product is a fluid that matches
---@field elem_filters? (FluidPrototypeFilter)[]
local RecipePrototypeFilter_has_product_fluid={
}
end

do
---@class RecipePrototypeFilter.has_product_item:RecipePrototypeFilter.base
---Matches if at least 1 product is an item that matches these filters.
---@field elem_filters? (ItemPrototypeFilter)[]
local RecipePrototypeFilter_has_product_item={
}
end

do
---@class RecipePrototypeFilter.overload_multiplier:RecipePrototypeFilter.base
---@field comparison ComparatorString
---The value to compare against.
---@field value uint
local RecipePrototypeFilter_overload_multiplier={
}
end

do
---@class RecipePrototypeFilter.request_paste_multiplier:RecipePrototypeFilter.base
---@field comparison ComparatorString
---The value to compare against.
---@field value uint
local RecipePrototypeFilter_request_paste_multiplier={
}
end

do
---@class RecipePrototypeFilter.subgroup:RecipePrototypeFilter.base
---A [LuaGroup](https://lua-api.factorio.com/latest/classes/LuaGroup.html) (subgroup) name
---@field subgroup string
local RecipePrototypeFilter_subgroup={
}
end

---A number between 0 and 255 inclusive, represented by one of the following named strings or the string version of the number. For example `"10"` and `"decals"` are both valid. Higher values are rendered above lower values.
---
---[View Documentation](https://lua-api.factorio.com/latest/concepts.html#RenderLayer)
---@alias RenderLayer (string)|("zero")|("background-transitions")|("under-tiles")|("decals")|("above-tiles")|("ground-layer-1")|("ground-layer-2")|("ground-layer-3")|("ground-layer-4")|("ground-layer-5")|("lower-radius-visualization")|("radius-visualization")|("transport-belt-integration")|("resource")|("building-smoke")|("rail-stone-path-lower")|("rail-stone-path")|("rail-tie")|("decorative")|("ground-patch")|("ground-patch-higher")|("ground-patch-higher2")|("rail-chain-signal-metal")|("rail-screw")|("rail-metal")|("remnants")|("floor")|("transport-belt")|("transport-belt-endings")|("floor-mechanics-under-corpse")|("corpse")|("floor-mechanics")|("item")|("transport-belt-reader")|("lower-object")|("transport-belt-circuit-connector")|("lower-object-above-shadow")|("lower-object-overlay")|("object-under")|("object")|("cargo-hatch")|("higher-object-under")|("higher-object-above")|("train-stop-top")|("item-in-inserter-hand")|("above-inserter")|("wires")|("under-elevated")|("elevated-rail-stone-path-lower")|("elevated-rail-stone-path")|("elevated-rail-tie")|("elevated-rail-screw")|("elevated-rail-metal")|("elevated-lower-object")|("elevated-object")|("elevated-higher-object")|("fluid-visualization")|("wires-above")|("entity-info-icon")|("entity-info-icon-above")|("explosion")|("projectile")|("smoke")|("air-object")|("air-entity-info-icon")|("light-effect")|("selection-box")|("higher-selection-box")|("collision-selection-box")|("arrow")|("cursor")

do
---@class ResearchIngredient
---Prototype name of the required item.
---@field name string
---Amount of items required to research one unit of technology.
---@field amount uint16
local ResearchIngredient={
}
end

do
---@class ResearchProgressProduct
---@field type "research-progress"
---Prototype name of the research item.
---@field research_item string
---@field amount double
local ResearchProgressProduct={
}
end

do
---@class ResearchTrigger.base
---@field type ("craft-item")|("mine-entity")|("craft-fluid")|("send-item-to-orbit")|("capture-spawner")|("build-entity")|("create-space-platform")
local ResearchTrigger_base={
}
end

---@alias ResearchTrigger (ResearchTrigger.build_entity)|(ResearchTrigger.capture_spawner)|(ResearchTrigger.craft_fluid)|(ResearchTrigger.craft_item)|(ResearchTrigger.mine_entity)|(ResearchTrigger.send_item_to_orbit)|(ResearchTrigger.base)

do
---@class ResearchTrigger.build_entity:ResearchTrigger.base
---@field entity EntityIDFilter
local ResearchTrigger_build_entity={
}
end

do
---@class ResearchTrigger.capture_spawner:ResearchTrigger.base
---@field entity? string
local ResearchTrigger_capture_spawner={
}
end

do
---@class ResearchTrigger.craft_fluid:ResearchTrigger.base
---@field fluid string
---@field amount double
local ResearchTrigger_craft_fluid={
}
end

do
---@class ResearchTrigger.craft_item:ResearchTrigger.base
---@field item string
---@field item_quality? string
local ResearchTrigger_craft_item={
}
end

do
---@class ResearchTrigger.mine_entity:ResearchTrigger.base
---@field entity string
local ResearchTrigger_mine_entity={
}
end

do
---@class ResearchTrigger.send_item_to_orbit:ResearchTrigger.base
---@field item ItemIDFilter
local ResearchTrigger_send_item_to_orbit={
}
end

do
---@class Resistance
---Absolute damage decrease
---@field decrease float
---Percentual damage decrease
---@field percent float
local Resistance={
}
end

do
---@class RidingState
---@field acceleration defines.riding.acceleration
---@field direction defines.riding.direction
local RidingState={
}
end

do
---@class RollingStockDrawData
---@field position MapPosition
---@field orientation RealOrientation
---@field slope float
---@field height float
local RollingStockDrawData={
}
end

do
---@class ScheduleRecord
---Name of the station.
---@field station? string
---Rail to path to. Ignored if `station` is present.
---@field rail? LuaEntity
---When a train is allowed to reach rail target from any direction it will be `nil`. If rail has to be reached from specific direction, this value allows to choose the direction. This value corresponds to [LuaEntity::connected\_rail\_direction](https://lua-api.factorio.com/latest/classes/LuaEntity.html#connected_rail_direction) of a TrainStop.
---@field rail_direction? defines.rail_direction
---@field wait_conditions? (WaitCondition)[]
---Only present when the station is temporary, the value is then always `true`.
---@field temporary? boolean
local ScheduleRecord={
}
end

do
---@class ScriptArea
---@field area BoundingBox
---@field name string
---@field color Color
---@field id uint
local ScriptArea={
}
end

do
---@class ScriptPosition
---@field position MapPosition
---@field name string
---@field color Color
---@field id uint
local ScriptPosition={
}
end

---When writing it is possible to give LuaEntity or MapPosition directly. However, reading always returns the full ScriptRenderTargetTable.
---
---[View Documentation](https://lua-api.factorio.com/latest/concepts.html#ScriptRenderTarget)
---@alias ScriptRenderTarget (LuaEntity)|(MapPosition)|(ScriptRenderTargetTable)

do
---@class ScriptRenderTargetTable
---@field entity? LuaEntity
---Only used if `entity` was given.
---@field offset? Vector
---Only used, and mandatory if `entity` is not given.
---@field position? MapPosition
local ScriptRenderTargetTable={
}
end

---Scroll policy of a [scroll pane](https://lua-api.factorio.com/latest/classes/LuaGuiElement.html).
---
---[View Documentation](https://lua-api.factorio.com/latest/concepts.html#ScrollPolicy)
---@alias ScrollPolicy ("never")|("dont-show-but-allow-scrolling")|("always")|("auto")|("auto-and-reserve-space")

do
---@class SelectedPrototypeData
---E.g. `"entity"`.
---@field base_type string
---The `type` of the prototype. E.g. `"tree"`.
---@field derived_type string
---The `name` of the prototype. E.g. `"tree-05"`.
---@field name string
local SelectedPrototypeData={
}
end

do
---A set of flags on a selection tool that define how entities and tiles are selected. Active flags are in the dictionary as `true`, while inactive flags aren't present at all.
---
---[View Documentation](https://lua-api.factorio.com/latest/concepts.html#SelectionModeFlags)
---@class SelectionModeFlags
---@field ["blueprint"] true
---@field ["deconstruct"] true
---@field ["cancel-deconstruct"] true
---@field ["items"] true
---@field ["trees"] true
---@field ["buildable-type"] true
---@field ["nothing"] true
---@field ["items-to-place"] true
---@field ["any-entity"] true
---@field ["any-tile"] true
---@field ["same-force"] true
---@field ["not-same-force"] true
---@field ["friend"] true
---@field ["enemy"] true
---@field ["upgrade"] true
---@field ["cancel-upgrade"] true
---@field ["downgrade"] true
---@field ["entity-with-health"] true
---@field ["is-military-target"] true
---@field ["entity-with-owner"] true
---@field ["avoid-rolling-stock"] true
---@field ["avoid-vehicle"] true
---@field ["controllable"] true
---@field ["controllable-add"] true
---@field ["controllable-remove"] true
---@field ["entity-ghost"] true
---@field ["tile-ghost"] true
local SelectionModeFlags={
}
end

do
---@class SelectorCombinatorParameters
---The signal to use.
---@field index_signal SignalID
---The signal index to use if not using a specific signal.
---@field index_constant uint
---The signal to emit.
---@field count_signal SignalID
---Must be one of `"select"`, `"count"`, `"random"`. When not specified, defaults to `"select"`.
---@field operation? string
---If the maximum value is used.
---@field select_max boolean
local SelectorCombinatorParameters={
}
end

do
---@class Signal
---ID of the signal.
---@field signal SignalID
---Value of the signal.
---@field count int
local Signal={
}
end

do
---@class SignalFilter.0
---The type of the signal filter.
---@field type? SignalIDType
---Name of the signal.
---@field name string
---The prototype name of the signal's quality. `nil` for any quality.
---@field quality? QualityID
---The comparator for quality. `nil` if any quality.
---@field comparator? ComparatorString
local SignalFilter_0={
}
end

---A signal filter may be specified in two ways, either as a string which is a virtual signal name or item prototype name or as a table.
---
---[View Documentation](https://lua-api.factorio.com/latest/concepts.html#SignalFilter)
---@alias SignalFilter (SignalFilter.0)|(string)

do
---@class SignalID
---The type of the signal. If the type is `"item"`, this will be `nil` when reading.
---@field type? SignalIDType
---Name of the prototype.
---@field name? string
local SignalID={
}
end

---[View Documentation](https://lua-api.factorio.com/latest/concepts.html#SignalIDType)
---@alias SignalIDType ("item")|("fluid")|("virtual")|("entity")|("recipe")|("space-location")|("asteroid-chunk")|("quality")

---An item stack may be specified in one of two ways.
---
---[View Documentation](https://lua-api.factorio.com/latest/concepts.html#SimpleItemStack)
---
---### Example
---
---```
----- Both of these lines specify an item stack of one iron plate
---{name="iron-plate"}
---{name="iron-plate", count=1}
---```
---
---### Example
---
---```
----- This is a stack of 47 copper plates
---{name="copper-plate", count=47}
---```
---
---### Example
---
---```
---These are both full stacks of iron plates (for iron-plate, a full stack is 100 plates)
---"iron-plate"
---{name="iron-plate", count=100}
---```
---@alias SimpleItemStack (string)|(ItemStackDefinition)

do
---@class SmokeSource
---@field name string
---@field frequency float
---@field offset float
---@field position? Vector
---@field north_position? Vector
---@field north_east_position? Vector
---@field east_position? Vector
---@field south_east_position? Vector
---@field south_position? Vector
---@field south_west_position? Vector
---@field west_position? Vector
---@field north_west_position? Vector
---@field deviation? MapPosition
---@field starting_frame uint16
---@field starting_frame_deviation uint16
---@field height float
---@field height_deviation float
---@field starting_vertical_speed float
---@field starting_vertical_speed_deviation float
---@field vertical_speed_slowdown float
local SmokeSource={
}
end

---It can be either the name of a [SoundPrototype](https://lua-api.factorio.com/latest/prototypes/SoundPrototype.html) defined in the data stage, or a path in the form `"type/name"`. The latter option can be sorted into three categories.
---
---The validity of a SoundPath can be verified at runtime using [LuaHelpers::is\_valid\_sound\_path](https://lua-api.factorio.com/latest/classes/LuaHelpers.html#is_valid_sound_path).
---
---The utility and ambient types each contain general use sound prototypes defined by the game itself.
---
---* `"utility"` - Uses [UtilitySounds](https://lua-api.factorio.com/latest/prototypes/UtilitySounds.html). Example: `"utility/wire_connect_pole"`
---* `"ambient"` - Uses [AmbientSound](https://lua-api.factorio.com/latest/prototypes/AmbientSound.html). Example: `"ambient/resource-deficiency"`
---
---[View Documentation](https://lua-api.factorio.com/latest/concepts.html#SoundPath)
---@alias SoundPath string

---Defines which slider in the game's sound settings affects the volume of this sound. Furthermore, some sound types are mixed differently than others, e.g. zoom level effects are applied.
---
---[View Documentation](https://lua-api.factorio.com/latest/concepts.html#SoundType)
---@alias SoundType ("game-effect")|("gui-effect")|("ambient")|("environment")|("walking")|("alert")|("wind")|("world-ambient")|("weapon")|("explosion")|("enemy")

do
---@class SpaceConnectionAsteroidSpawnDefinition
---`asteroid-chunk` or `entity`
---@field type string
---The asteroid chunk or entity name.
---@field asteroid string
---@field spawn_points (SpaceConnectionAsteroidSpawnPoint)[]
local SpaceConnectionAsteroidSpawnDefinition={
}
end

do
---@class SpaceConnectionAsteroidSpawnPoint
---@field probability double
---@field speed double
---@field distance double
local SpaceConnectionAsteroidSpawnPoint={
}
end

do
---@class SpaceLocationAsteroidSpawnDefinition
---`asteroid-chunk` or `entity`
---@field type string
---The asteroid chunk or entity name.
---@field asteroid string
---@field probability double
---@field speed double
local SpaceLocationAsteroidSpawnDefinition={
}
end

---A space location prototype may be specified in one of two ways.
---
---[View Documentation](https://lua-api.factorio.com/latest/concepts.html#SpaceLocationID)
---@alias SpaceLocationID (LuaSpaceLocationPrototype)|(string)

do
---@class SpaceLocationPrototypeFilter.base
---The condition to filter on.
---@field filter ("fly-condition")|("type")|("solar-power-in-space")
---How to combine this with the previous filter. Defaults to `"or"`. When evaluating the filters, `"and"` has higher precedence than `"or"`.
---@field mode? ("or")|("and")
---Inverts the condition. Default is `false`.
---@field invert? boolean
local SpaceLocationPrototypeFilter_base={
}
end

---@alias SpaceLocationPrototypeFilter (SpaceLocationPrototypeFilter.solar_power_in_space)|(SpaceLocationPrototypeFilter.type)|(SpaceLocationPrototypeFilter.base)

do
---@class SpaceLocationPrototypeFilter.solar_power_in_space:SpaceLocationPrototypeFilter.base
---@field comparison ComparatorString
---The value to compare against.
---@field value double
local SpaceLocationPrototypeFilter_solar_power_in_space={
}
end

do
---@class SpaceLocationPrototypeFilter.type:SpaceLocationPrototypeFilter.base
---The prototype type, or a list of acceptable types.
---@field type (string)|((string)[])
local SpaceLocationPrototypeFilter_type={
}
end

---Space platform may be specified in one of one ways.
---
---[View Documentation](https://lua-api.factorio.com/latest/concepts.html#SpacePlatformIdentification)
---@alias SpacePlatformIdentification (LuaSpacePlatform)

do
---@class SpawnPointDefinition
---Evolution factor for which this weight applies.
---@field evolution_factor double
---Probability of spawning this unit at this evolution factor.
---@field weight double
local SpawnPointDefinition={
}
end

do
---@class SpoilToTriggerResult
---The trigger runs (count-in-stack / items\_per\_trigger) times; rounded up.
---@field items_per_trigger uint
---The trigger items that are run.
---@field trigger (TriggerItem)[]
local SpoilToTriggerResult={
}
end

---It can be either the name of a [SpritePrototype](https://lua-api.factorio.com/latest/prototypes/SpritePrototype.html) defined in the data stage, or a path in form "type/name" or "type.name".
---
---The validity of a SpritePath can be verified at runtime using [LuaHelpers::is\_valid\_sprite\_path](https://lua-api.factorio.com/latest/classes/LuaHelpers.html#is_valid_sprite_path).
---
---The supported types are:
---
---* `"item"` - for example "item/iron-plate" is the icon sprite of iron plate
---* `"entity"` - for example "entity/small-biter" is the icon sprite of the small biter
---* `"technology"`
---* `"recipe"`
---* `"fluid"`
---* `"tile"`
---* `"item-group"`
---* `"virtual-signal"`
---* `"shortcut"`
---* `"achievement"`
---* `"equipment"`
---* `"ammo-category"`
---* `"decorative"`
---* `"space-connection"`
---* `"space-location"`
---* `"surface"`
---* `"airborne-pollutant"`
---* `"asteroid-chunk"`
---* `"quality"`
---* `"file"` - path to an image file located inside the current scenario. This file is not preloaded so it will be slower; for frequently used sprites, it is better to define sprite prototype and use it instead.
---* `"utility"` - sprite defined in the utility-sprites object, these are the pictures used by the game internally for the UI.
---
---[View Documentation](https://lua-api.factorio.com/latest/concepts.html#SpritePath)
---@alias SpritePath string

do
---@class SteeringMapSetting
---Does not include the radius of the unit.
---@field radius double
---@field separation_factor double
---@field separation_force double
---Used to make steering look better for aesthetic purposes.
---@field force_unit_fuzzy_goto_behavior boolean
local SteeringMapSetting={
}
end

do
---@class SteeringMapSettings
---@field default SteeringMapSetting
---@field moving SteeringMapSetting
local SteeringMapSettings={
}
end

do
---@class SurfaceCondition
---@field property string
---@field min double
---@field max double
local SurfaceCondition={
}
end

---A surface may be specified in one of three ways.
---
---[View Documentation](https://lua-api.factorio.com/latest/concepts.html#SurfaceIdentification)
---@alias SurfaceIdentification (uint)|(string)|(LuaSurface)

---Surface property prototype may be specified in one of two ways.
---
---[View Documentation](https://lua-api.factorio.com/latest/concepts.html#SurfacePropertyID)
---@alias SurfacePropertyID (LuaSurfacePropertyPrototype)|(string)

---State of a GUI [switch](https://lua-api.factorio.com/latest/classes/LuaGuiElement.html#switch_state).
---
---[View Documentation](https://lua-api.factorio.com/latest/concepts.html#SwitchState)
---@alias SwitchState ("left")|("right")|("none")

do
---@class TabAndContent
---@field tab LuaGuiElement
---@field content LuaGuiElement
local TabAndContent={
}
end

---A dictionary of string to the four basic Lua types: `string`, `boolean`, `number`, `table`.
---
---Note that the API returns tags as a simple table, meaning any modifications to it will not propagate back to the game. Thus, to modify a set of tags, the whole table needs to be written back to the respective property.
---
---[View Documentation](https://lua-api.factorio.com/latest/concepts.html#Tags)
---
---### Example
---
---```
---{a = 1, b = true, c = "three", d = {e = "f"}}
---```
---@alias Tags {[string]:AnyBasic}

---Target type of an [AmmoType](https://lua-api.factorio.com/latest/concepts.html#AmmoType).
---
---[View Documentation](https://lua-api.factorio.com/latest/concepts.html#TargetType)
---@alias TargetType ("entity")|("position")|("direction")

---An technology prototype may be specified in one of three ways.
---
---[View Documentation](https://lua-api.factorio.com/latest/concepts.html#TechnologyID)
---@alias TechnologyID (LuaTechnologyPrototype)|(LuaTechnology)|(string)

do
---@class TechnologyModifier.base
---Modifier type. Specifies which of the other fields will be available.
---@field type ModifierType
local TechnologyModifier_base={
}
end

---@alias TechnologyModifier (TechnologyModifier.OtherTypes)|(TechnologyModifier.ammo_damage)|(TechnologyModifier.give_item)|(TechnologyModifier.gun_speed)|(TechnologyModifier.nothing)|(TechnologyModifier.turret_attack)|(TechnologyModifier.unlock_recipe)|(TechnologyModifier.base)

do
---@class TechnologyModifier.OtherTypes:TechnologyModifier.base
---Modification value. This value will be added to the variable it modifies.
---@field modifier double
local TechnologyModifier_OtherTypes={
}
end

do
---@class TechnologyModifier.ammo_damage:TechnologyModifier.base
---Prototype name of the ammunition category that is affected
---@field ammo_category string
---Modification value. This will be added to the current ammo damage modifier upon researching.
---@field modifier double
local TechnologyModifier_ammo_damage={
}
end

do
---@class TechnologyModifier.give_item:TechnologyModifier.base
---Item prototype name to give.
---@field item string
---Number of items to give. Defaults to `1`.
---@field count? uint
local TechnologyModifier_give_item={
}
end

do
---@class TechnologyModifier.gun_speed:TechnologyModifier.base
---Prototype name of the ammunition category that is affected
---@field ammo_category string
---Modification value. This will be added to the current gun speed modifier upon researching.
---@field modifier double
local TechnologyModifier_gun_speed={
}
end

do
---@class TechnologyModifier.nothing:TechnologyModifier.base
---Description of this nothing modifier.
---@field effect_description LocalisedString
local TechnologyModifier_nothing={
}
end

do
---@class TechnologyModifier.turret_attack:TechnologyModifier.base
---Turret prototype name this modifier will affect.
---@field turret_id string
---Modification value. This will be added to the current turret damage modifier upon researching.
---@field modifier double
local TechnologyModifier_turret_attack={
}
end

do
---@class TechnologyModifier.unlock_recipe:TechnologyModifier.base
---Recipe prototype name to unlock.
---@field recipe string
local TechnologyModifier_unlock_recipe={
}
end

do
---@class TechnologyPrototypeFilter.base
---The condition to filter on.
---@field filter ("enabled")|("hidden")|("upgrade")|("visible-when-disabled")|("has-effects")|("has-prerequisites")|("research-unit-ingredient")|("unlocks-recipe")|("level")|("max-level")|("time")
---How to combine this with the previous filter. Defaults to `"or"`. When evaluating the filters, `"and"` has higher precedence than `"or"`.
---@field mode? ("or")|("and")
---Inverts the condition. Default is `false`.
---@field invert? boolean
local TechnologyPrototypeFilter_base={
}
end

---@alias TechnologyPrototypeFilter (TechnologyPrototypeFilter.level)|(TechnologyPrototypeFilter.max_level)|(TechnologyPrototypeFilter.research_unit_ingredient)|(TechnologyPrototypeFilter.time)|(TechnologyPrototypeFilter.unlocks_recipe)|(TechnologyPrototypeFilter.base)

do
---@class TechnologyPrototypeFilter.level:TechnologyPrototypeFilter.base
---@field comparison ComparatorString
---The value to compare against.
---@field value uint
local TechnologyPrototypeFilter_level={
}
end

do
---@class TechnologyPrototypeFilter.max_level:TechnologyPrototypeFilter.base
---@field comparison ComparatorString
---The value to compare against.
---@field value uint
local TechnologyPrototypeFilter_max_level={
}
end

do
---@class TechnologyPrototypeFilter.research_unit_ingredient:TechnologyPrototypeFilter.base
---The research ingredient to check.
---@field ingredient string
local TechnologyPrototypeFilter_research_unit_ingredient={
}
end

do
---@class TechnologyPrototypeFilter.time:TechnologyPrototypeFilter.base
---@field comparison ComparatorString
---The value to compare against.
---@field value uint
local TechnologyPrototypeFilter_time={
}
end

do
---@class TechnologyPrototypeFilter.unlocks_recipe:TechnologyPrototypeFilter.base
---The recipe to check.
---@field recipe string
local TechnologyPrototypeFilter_unlocks_recipe={
}
end

do
---@class TerritorySettings
---@field units (string)[]
---@field territory_index_expression string
---@field territory_variation_expression string
---@field minimum_territory_size uint
local TerritorySettings={
}
end

---The text is aligned so that the target position is at the given side of the text.
---
---For example, `"right"` aligned text means the right side of the text is at the target position. Or in other words, the target is on the right of the text.
---
---[View Documentation](https://lua-api.factorio.com/latest/concepts.html#TextAlign)
---@alias TextAlign ("left")|("right")|("center")

do
---@class Tile
---The position of the tile.
---@field position TilePosition
---The prototype name of the tile.
---@field name string
local Tile={
}
end

---A tile may be specified in one of three ways.
---
---[View Documentation](https://lua-api.factorio.com/latest/concepts.html#TileID)
---@alias TileID (LuaTilePrototype)|(LuaTile)|(string)

do
---@class TilePosition.0
---@field x int
---@field y int
local TilePosition_0={
}
end

---Coordinates of a tile on a [LuaSurface](https://lua-api.factorio.com/latest/classes/LuaSurface.html) where each integer `x`/`y` represents a different tile. This uses the same format as [MapPosition](https://lua-api.factorio.com/latest/concepts.html#MapPosition), except it rounds any non-integer `x`/`y` down to whole numbers. It can be specified either with or without explicit keys.
---
---[View Documentation](https://lua-api.factorio.com/latest/concepts.html#TilePosition)
---@alias TilePosition (TilePosition.0)|({[1]:int, [2]:int})

do
---@class TilePrototypeFilter.base
---The condition to filter on.
---@field filter ("minable")|("autoplace")|("blueprintable")|("item-to-place")|("collision-mask")|("walking-speed-modifier")|("vehicle-friction-modifier")|("decorative-removal-probability")|("absorptions-per-second")
---How to combine this with the previous filter. Defaults to `"or"`. When evaluating the filters, `"and"` has higher precedence than `"or"`.
---@field mode? ("or")|("and")
---Inverts the condition. Default is `false`.
---@field invert? boolean
local TilePrototypeFilter_base={
}
end

---@alias TilePrototypeFilter (TilePrototypeFilter.absorptions_per_second)|(TilePrototypeFilter.collision_mask)|(TilePrototypeFilter.decorative_removal_probability)|(TilePrototypeFilter.vehicle_friction_modifier)|(TilePrototypeFilter.walking_speed_modifier)|(TilePrototypeFilter.base)

do
---@class TilePrototypeFilter.absorptions_per_second:TilePrototypeFilter.base
---The name of a pollutant type to check.
---@field pollutant string
---@field comparison ComparatorString
---The value to compare against.
---@field value double
local TilePrototypeFilter_absorptions_per_second={
}
end

do
---@class TilePrototypeFilter.collision_mask:TilePrototypeFilter.base
---Name of one [layer](https://lua-api.factorio.com/latest/classes/LuaCollisionLayerPrototype.html) or a full collision mask.
---@field mask (CollisionLayerID)|(CollisionMask)
---How to filter.
---@field mask_mode ("collides")|("layers-equals")|("contains-any")|("contains-all")
local TilePrototypeFilter_collision_mask={
}
end

do
---@class TilePrototypeFilter.decorative_removal_probability:TilePrototypeFilter.base
---@field comparison ComparatorString
---The value to compare against.
---@field value float
local TilePrototypeFilter_decorative_removal_probability={
}
end

do
---@class TilePrototypeFilter.vehicle_friction_modifier:TilePrototypeFilter.base
---@field comparison ComparatorString
---The value to compare against.
---@field value double
local TilePrototypeFilter_vehicle_friction_modifier={
}
end

do
---@class TilePrototypeFilter.walking_speed_modifier:TilePrototypeFilter.base
---@field comparison ComparatorString
---The value to compare against.
---@field value double
local TilePrototypeFilter_walking_speed_modifier={
}
end

do
---@class TileSearchFilters
---@field area? BoundingBox
---Ignored if not given with radius.
---@field position? MapPosition
---If given with position, will return all tiles within the radius of the position.
---@field radius? double
---An empty array means nothing matches the name filter.
---@field name? (TileID)|((TileID)[])
---@field limit? uint
---@field has_hidden_tile? boolean
---Can be further filtered by supplying a `force` filter.
---@field has_double_hidden_tile? boolean
---Can be further filtered by supplying a `force` filter.
---@field has_tile_ghost? boolean
---Can be further filtered by supplying a `force` filter.
---@field to_be_deconstructed? boolean
---@field collision_mask? (CollisionLayerID)|((CollisionLayerID)[])|({[CollisionLayerID]:true})
---@field force? ForceSet
---If the filters should be inverted.
---@field invert? boolean
local TileSearchFilters={
}
end

do
---@class TrainFilter
---Train ID filter
---@field train_id? uint
---Surface the train must be on in order to pass
---@field surface? SurfaceIdentification
---Train must contain at least one rolling stock of this force to pass
---@field force? ForceID
---Train must contain a rolling stock of any of provided prototype to pass
---@field stock? (EntityID)|((EntityID)[])
---Train must have at least that many stocks to pass
---@field min_stocks? uint
---Train must have at most that many stocks to pass
---@field max_stocks? uint
---Checks if train is moving (has speed != 0) or not moving.
---@field is_moving? boolean
---Checks if train has a passenger.
---@field has_passenger? boolean
---Checks if train is in manual controller.
---@field is_manual? boolean
local TrainFilter={
}
end

do
---@class TrainPathAllGoalsResult
---Amount of goals that are accessible.
---@field amount_accessible uint
---Array of the same length as requested goals: each field will tell if related goal is accessible for the train.
---@field accessible (boolean)[]
---Array of the same length as requested goals. Only present if request type was `"all-goals-penalties"`.
---@field penalties? (double)[]
---Amount of steps pathfinder performed. This is a measure of how expensive this search was.
---@field steps_count uint
local TrainPathAllGoalsResult={
}
end

---[View Documentation](https://lua-api.factorio.com/latest/concepts.html#TrainPathFinderGoal)
---@alias TrainPathFinderGoal (TrainStopGoal)|(RailEndGoal)|(LuaRailEnd)|(LuaEntity)

do
---@class TrainPathFinderOneGoalResult
---True if found path.
---@field found_path boolean
---If path was found, provides index of the specific goal to which the path goes to.
---@field goal_index? uint
---If path was found, provides index of the specific start from which the path to target goes from
---@field start_index? uint
---Penalty of the path to goal if path was found.
---@field penalty? double
---If path was found, tells if the path was reached from the train's front end or from [RailEndStart](https://lua-api.factorio.com/latest/concepts.html#RailEndStart) with [RailEndStart::is\_front](https://lua-api.factorio.com/latest/concepts.html#RailEndStart) set.
---@field is_front? boolean
---If path was found and search was of type `"path"`, provides total length of all rails of the path.
---@field total_length? double
---Only if search was of type `"path"`, `return_path` was set to true and path was found. Contains all rails in order that are part of the found path.
---@field path? (LuaEntity)[]
---Amount of steps pathfinder performed. This is a measure of how expensive this search was.
---@field steps_count uint
local TrainPathFinderOneGoalResult={
}
end

---A [string](https://lua-api.factorio.com/latest/concepts.html#string) specifying the type of request for [LuaTrainManager::request\_train\_path](https://lua-api.factorio.com/latest/classes/LuaTrainManager.html#request_train_path).
---
---[View Documentation](https://lua-api.factorio.com/latest/concepts.html#TrainPathRequestType)
---@alias TrainPathRequestType ("path")|("any-goal-accessible")|("all-goals-accessible")|("all-goals-penalties")

do
---@class TrainSchedule
---Index of the currently active record
---@field current uint
---@field records (ScheduleRecord)[]
local TrainSchedule={
}
end

do
---@class TrainStopFilter
---Surface the train stop must be on in order to pass
---@field surface? SurfaceIdentification
---ForceID the train stop must have to pass
---@field force? ForceID
---Checks if train stop is full (trains count >= trains limit or disabled) or not full.
---@field is_full? boolean
---Checks if train stop has a rail next to it.
---@field is_connected_to_rail? boolean
---If given, only train stops of this type will pass
---@field type? (EntityID)|((EntityID)[])
---Train stop must belong to given station name to pass
---@field station_name? (string)|((string)[])
---If train stop has limit set by control behavior
---@field limit_set_by_control_behavior? boolean
---If train stop is disabled by a control behavior
---@field is_disabled? boolean
local TrainStopFilter={
}
end

do
---@class TrainStopGoal
---Train stop target. Must be connected to rail ([LuaEntity::connected\_rail](https://lua-api.factorio.com/latest/classes/LuaEntity.html#connected_rail) returns valid LuaEntity).
---@field train_stop LuaEntity
---Goal priority. If not provided, defaults to [LuaEntity::train\_stop\_priority](https://lua-api.factorio.com/latest/classes/LuaEntity.html#train_stop_priority) of provided train\_stop.
---@field priority? uint8
local TrainStopGoal={
}
end

do
---@class TriggerDelivery
---@field type ("instant")|("projectile")|("beam")|("stream")|("artillery")|("chain")|("delayed")
---@field source_effects (TriggerEffectItem)[]
---@field target_effects (TriggerEffectItem)[]
local TriggerDelivery={
}
end

do
---@class TriggerEffectItem
---@field type TriggerEffectItemType
---@field repeat_count uint16
---@field repeat_count_deviation uint16
---@field probability float
---@field affects_target boolean
---@field show_in_tooltip boolean
---@field damage_type_filters? DamageTypeFilters
local TriggerEffectItem={
}
end

---Used by [TriggerEffectItem](https://lua-api.factorio.com/latest/concepts.html#TriggerEffectItem).
---
---[View Documentation](https://lua-api.factorio.com/latest/concepts.html#TriggerEffectItemType)
---@alias TriggerEffectItemType ("damage")|("create-entity")|("create-explosion")|("create-fire")|("create-smoke")|("create-trivial-smoke")|("create-asteroid-chunk")|("create-particle")|("create-sticker")|("create-decorative")|("nested-result")|("play-sound")|("push-back")|("destroy-cliffs")|("show-explosion-on-chart")|("insert-item")|("script")|("set-tile")|("invoke-tile-trigger")|("destroy-decoratives")|("camera-effect")|("activate-impact")

do
---@class TriggerItem
---@field type ("direct")|("area")|("line")|("cluster")
---@field action_delivery? (TriggerDelivery)[]
---The trigger will only affect entities that contain any of these flags.
---@field entity_flags? EntityPrototypeFlags
---@field ignore_collision_condition boolean
---The trigger will only affect entities that would collide with given collision mask.
---@field collision_mask CollisionMask
---@field trigger_target_mask TriggerTargetMask
---If `"enemy"`, the trigger will only affect entities whose force is different from the attacker's and for which there is no cease-fire set. `"ally"` is the opposite of `"enemy"`.
---@field force ForceCondition
---@field repeat_count uint
---@field probability float
local TriggerItem={
}
end

---A set of trigger target masks.
---
---[View Documentation](https://lua-api.factorio.com/latest/concepts.html#TriggerTargetMask)
---@alias TriggerTargetMask {[string]:true}

---A trivial smoke prototype may be specified in one of two ways.
---
---[View Documentation](https://lua-api.factorio.com/latest/concepts.html#TrivialSmokeID)
---@alias TrivialSmokeID (LuaTrivialSmokePrototype)|(string)

do
---@class UndoRedoAction.base
---The type of action that was undone or redone.
---@field type string
---The tags attached to the undo action, if any.
---@field tags? Tags
local UndoRedoAction_base={
}
end

---@alias UndoRedoAction (UndoRedoAction.built_entity)|(UndoRedoAction.built_tile)|(UndoRedoAction.copy_entity_settings)|(UndoRedoAction.removed_entity)|(UndoRedoAction.removed_tile)|(UndoRedoAction.rotated_entity)|(UndoRedoAction.upgraded_entity)|(UndoRedoAction.upgraded_modules)|(UndoRedoAction.wire_added)|(UndoRedoAction.wire_removed)|(UndoRedoAction.base)

do
---@class UndoRedoAction.built_entity:UndoRedoAction.base
---The specification of the built entity.
---@field target BlueprintEntity
local UndoRedoAction_built_entity={
}
end

do
---@class UndoRedoAction.built_tile:UndoRedoAction.base
---The position of the newly built tile.
---@field position TilePosition
---The surface on which the tile was built.
---@field surface_index uint
---The prototype name of the replaced tile, if any was replaced.
---@field previous_tile? string
---The prototype name of the newly built tile.
---@field new_tile string
local UndoRedoAction_built_tile={
}
end

do
---@class UndoRedoAction.copy_entity_settings:UndoRedoAction.base
---@field target? BlueprintEntity
---@field entity_with_previous_settings? BlueprintEntity
local UndoRedoAction_copy_entity_settings={
}
end

do
---@class UndoRedoAction.removed_entity:UndoRedoAction.base
---The specification of the removed entity.
---@field target BlueprintEntity
---The surface from which the entity was removed. Not present for entities the game can't restore, like trees or rocks.
---@field surface_index? uint
---The items that the entity will request when revived, if there are any. It's a mapping of prototype names to amounts. Not present for entities the game can't restore, like trees or rocks.
---@field insert_plan? (BlueprintInsertPlan)[]
---The schedule of the entity, if it has one. Only relevant for locomotives. Not present for entities the game can't restore, like trees or rocks.
---@field schedule? BlueprintSchedule
local UndoRedoAction_removed_entity={
}
end

do
---@class UndoRedoAction.removed_tile:UndoRedoAction.base
---The position of the removed tile.
---@field position TilePosition
---The surface from which the tile was removed.
---@field surface_index uint
---The prototype name of the removed tile.
---@field previous_tile string
local UndoRedoAction_removed_tile={
}
end

do
---@class UndoRedoAction.rotated_entity:UndoRedoAction.base
---The specification of the rotated entity.
---@field target BlueprintEntity
---The direction of the entity before upgrading.
---@field original_direction defines.direction
---@field original_mirroring boolean
local UndoRedoAction_rotated_entity={
}
end

do
---@class UndoRedoAction.upgraded_entity:UndoRedoAction.base
---The specification of the upgraded entity.
---@field target BlueprintEntity
---The prototype name of the upgraded entity.
---@field original_name string
---The quality prototype name of the entity before upgrading.
---@field original_quality_name string
local UndoRedoAction_upgraded_entity={
}
end

do
---@class UndoRedoAction.upgraded_modules:UndoRedoAction.base
---The specification of the upgraded entity.
---@field target BlueprintEntity
---The modules present in the target before the upgrade.
---@field modules_before BlueprintInsertPlan
local UndoRedoAction_upgraded_modules={
}
end

do
---@class UndoRedoAction.wire_added:UndoRedoAction.base
---@field a BlueprintWireEnd
---@field b BlueprintWireEnd
local UndoRedoAction_wire_added={
}
end

do
---@class UndoRedoAction.wire_removed:UndoRedoAction.base
---@field a BlueprintWireEnd
---@field b BlueprintWireEnd
local UndoRedoAction_wire_removed={
}
end

do
---@class UnitGroupMapSettings
---The minimum amount of time in ticks a group will spend gathering before setting off. The actual time is a random time between the minimum and maximum times. Defaults to `3 600` ticks.
---@field min_group_gathering_time uint
---The maximum amount of time in ticks a group will spend gathering before setting off. The actual time is a random time between the minimum and maximum times. Defaults to `10*3 600=36 000` ticks.
---@field max_group_gathering_time uint
---After gathering has finished, the group is allowed to wait this long in ticks for delayed members. New members are not accepted anymore however. Defaults to `2*3 600=7 200` ticks.
---@field max_wait_time_for_late_members uint
---The minimum group radius in tiles. The actual radius is adjusted based on the number of members. Defaults to `5.0`.
---@field min_group_radius double
---The maximum group radius in tiles. The actual radius is adjusted based on the number of members. Defaults to `30.0`.
---@field max_group_radius double
---The maximum speed a percentage of its regular speed that a group member can speed up to when catching up with the group. Defaults to `1.4`, or 140%.
---@field max_member_speedup_when_behind double
---The minimum speed a percentage of its regular speed that a group member can slow down to when ahead of the group. Defaults to `0.6`, or 60%.
---@field max_member_slowdown_when_ahead double
---The minimum speed as a percentage of its maximum speed that a group will slow down to so members that fell behind can catch up. Defaults to `0.3`, or 30%.
---@field max_group_slowdown_factor double
---When a member of a group falls back more than this factor times the group radius, the group will slow down to its `max_group_slowdown_factor` speed to let them catch up. Defaults to `3`.
---@field max_group_member_fallback_factor double
---When a member of a group falls back more than this factor times the group radius, it will be dropped from the group. Defaults to `10`.
---@field member_disown_distance double
---@field tick_tolerance_when_member_arrives uint
---The maximum number of automatically created unit groups gathering for attack at any time. Defaults to `30`.
---@field max_gathering_unit_groups uint
---The maximum number of members for an attack unit group. This only affects automatically created unit groups, manual groups created through the API are unaffected. Defaults to `200`.
---@field max_unit_group_size uint
local UnitGroupMapSettings={
}
end

do
---@class UnitSpawnDefinition
---Prototype name of the unit that would be spawned.
---@field unit string
---The points at which to spawn the unit.
---@field spawn_points (SpawnPointDefinition)[]
local UnitSpawnDefinition={
}
end

do
---@class UpgradeMapperDestination
---`"item"`, or `"entity"`.
---@field type string
---Name of the item, or entity.
---@field name? string
---Name of the quality.
---@field quality? string
---when type is `"item"` and the mapper is configured to install modules the limit per machine. If `0` then no limit.
---@field count? uint
local UpgradeMapperDestination={
}
end

do
---@class UpgradeMapperSource
---@field type ("item")|("entity")
---Name of the item, or entity.
---@field name? string
---Name of the quality prototype.
---@field quality? string
---The quality comparison type.
---@field comparator? ComparatorString
local UpgradeMapperSource={
}
end

do
---@class Vector.0
---@field x float
---@field y float
local Vector_0={
}
end

---A vector is a two-element array or dictionary containing the `x` and `y` components. The game will always provide the array format. Positive x goes east, positive y goes south.
---
---[View Documentation](https://lua-api.factorio.com/latest/concepts.html#Vector)
---
---### Example
---
---```
---right = {1.0, 0.0}
---```
---@alias Vector (Vector.0)|({[1]:float, [2]:float})

do
---@class Vector3D.0
---@field x float
---@field y float
---@field z float
local Vector3D_0={
}
end

---Reading this always returns the table with the named keys.
---
---If this is specified as a three-element array then the array items are x, y and z, in that order.
---
---[View Documentation](https://lua-api.factorio.com/latest/concepts.html#Vector3D)
---@alias Vector3D (Vector3D.0)|({[1]:float, [2]:float, [3]:float})

do
---@class VehicleAutomaticTargetingParameters
---@field auto_target_without_gunner boolean
---@field auto_target_with_gunner boolean
local VehicleAutomaticTargetingParameters={
}
end

---The text is aligned so that the target position is at the given side of the text.
---
---For example, `"top"` aligned text means the top of the text is at the target position. Or in other words, the target is at the top of the text.
---
---[View Documentation](https://lua-api.factorio.com/latest/concepts.html#VerticalTextAlign)
---@alias VerticalTextAlign ("top")|("middle")|("baseline")|("bottom")

---A virtual signal prototype may be specified in one of two ways.
---
---[View Documentation](https://lua-api.factorio.com/latest/concepts.html#VirtualSignalID)
---@alias VirtualSignalID (LuaVirtualSignalPrototype)|(string)

do
---@class WaitCondition
---@field type WaitConditionType
---Specifies how this condition is to be compared with the preceding conditions in the corresponding `wait_conditions` array. Always present when reading, defaults to `"and"` when writing.
---@field compare_type? ("and")|("or")
---Number of ticks to wait when `type` is `"time"`, or number of ticks of inactivity when `type` is `"inactivity"`.
---@field ticks? uint
---This is a CircuitCondition and only present when `type` is `"item_count"`, `"circuit"`, `"fluid_count"`, `"fuel_item_count_all"`, or `"fuel_item_count_any"`, and a circuit condition is configured. This is a ItemIDAndQualityIDPair and only present when `type` is `"request_satisfied"` or `"request_not_satisfied"`
---@field condition? (CircuitCondition)|(ItemIDAndQualityIDPair)
---Name of the space location. Only present when `type` is "`any_planet_import_zero`" and a planet is configured.
---@field planet? string
---Name of the station. Only present when `type` is "`specific_destination_full`", "`specific_destination_not_full`", "`at_station`", or "`not_at_station`", and a station is configured.
---@field station? string
---Amount of damage to take when `type` is `"damage_taken"`.
---@field damage? uint
local WaitCondition={
}
end

---Type of a [WaitCondition](https://lua-api.factorio.com/latest/concepts.html#WaitCondition).
---
---[View Documentation](https://lua-api.factorio.com/latest/concepts.html#WaitConditionType)
---@alias WaitConditionType ("time")|("full")|("empty")|("not_empty")|("item_count")|("circuit")|("inactivity")|("robots_inactive")|("fluid_count")|("passenger_present")|("passenger_not_present")|("fuel_item_count_all")|("fuel_item_count_any")|("fuel_full")|("destination_full_or_no_path")|("request_satisfied")|("request_not_satisfied")|("all_requests_satisfied")|("any_request_not_satisfied")|("any_request_zero")|("any_planet_import_zero")|("specific_destination_full")|("specific_destination_not_full")|("at_station")|("not_at_station")|("damage_taken")

do
---@class WireConnection
---@field target LuaWireConnector
---Defaults to defines.wire\_origin.player
---@field origin? defines.wire_origin
local WireConnection={
}
end

do
---@class WorkerRobotOrder
---The type of the order.
---@field type defines.robot_order_type
---The target of the order.
---@field target? LuaEntity
---The item to place if relevant.
---@field item_to_place? SimpleItemStack
---The secondary target of the upgrade order.
---@field secondary_target? LuaEntity
---The cliff explosive for the cliff explode job.
---@field cliff_explosive_id? LuaItemPrototype
---The target item of the pickup or deliver order.
---@field target_item? ItemIDAndQualityIDPair
---The target count of the pickup or deliver order.
---@field target_count? ItemCountType
local WorkerRobotOrder={
}
end

