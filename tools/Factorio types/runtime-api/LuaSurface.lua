---@meta _

--$Factorio 2.0.9
--$Generator 1.1.47
--$Section runtime-api/LuaSurface
-- This file is automatically generated. Edits will be overwritten without warning.

do
---@class LuaSurface.can_fast_replace_param
---Name of the entity to check.
---@field name string
---Where the entity would be placed.
---@field position MapPosition
---Direction the entity would be placed. Defaults to `north`.
---@field direction? defines.direction
---The force that would place the entity. Defaults to the `"neutral"` force.
---@field force? ForceID
local LuaSurface_can_fast_replace_param={
}
end

do
---@class LuaSurface.can_place_entity_param
---Name of the entity prototype to check.
---@field name string
---Where the entity would be placed.
---@field position MapPosition
---Direction of the placed entity. Defaults to `north`.
---@field direction? defines.direction
---The force that would place the entity. Defaults to the `"neutral"` force.
---@field force? ForceID
---Which type of check should be carried out. Defaults to `ghost_revive`.
---@field build_check_type? defines.build_check_type
---If `true`, entities that can be marked for deconstruction are ignored. Only used if `build_check_type` is either `manual_ghost`, `script_ghost` or `blueprint_ghost`. Defaults to `false`.
---@field forced? boolean
---The prototype name of the entity contained in the ghost. Only used if `name` is `entity-ghost`.
---@field inner_name? string
local LuaSurface_can_place_entity_param={
}
end

do
---@class LuaSurface.cancel_deconstruct_area_param
---The area to cancel deconstruction orders in.
---@field area BoundingBox
---The force whose deconstruction orders to cancel.
---@field force ForceID
---The player to set the last\_user to, if any.  Also the player whose undo queue this action should be added to.
---@field player? PlayerIdentification
---If chunks covered by fog-of-war are skipped. Defaults to `false`.
---@field skip_fog_of_war? boolean
---The deconstruction item to use if any.
---@field item? LuaItemStack
---The index of the undo item to add this action to. An index of `0` creates a new undo item for it. Defaults to putting it into the appropriate undo item automatically if not specified.
---@field item_index? uint
---If the cancel deconstruction is super-forced. Defaults to `false`.
---@field super_forced? boolean
local LuaSurface_cancel_deconstruct_area_param={
}
end

do
---@class LuaSurface.cancel_upgrade_area_param
---The area to cancel upgrade orders in.
---@field area BoundingBox
---The force whose upgrade orders to cancel.
---@field force ForceID
---The player to set the last\_user to if any.
---@field player? PlayerIdentification
---If chunks covered by fog-of-war are skipped.
---@field skip_fog_of_war? boolean
---The upgrade item to use.
---@field item LuaItemStack
local LuaSurface_cancel_upgrade_area_param={
}
end

do
---@class LuaSurface.clone_area_param
---@field source_area BoundingBox
---@field destination_area BoundingBox
---@field destination_surface? SurfaceIdentification
---@field destination_force? ForceID
---If tiles should be cloned
---@field clone_tiles? boolean
---If entities should be cloned
---@field clone_entities? boolean
---If decoratives should be cloned
---@field clone_decoratives? boolean
---If the destination entities should be cleared
---@field clear_destination_entities? boolean
---If the destination decoratives should be cleared
---@field clear_destination_decoratives? boolean
---If the destination surface should be expanded when destination\_area is outside current bounds. Defaults to `false`.
---@field expand_map? boolean
---If true, the building effect smoke will be shown around the new entities. Defaults to `false`.
---@field create_build_effect_smoke? boolean
local LuaSurface_clone_area_param={
}
end

do
---@class LuaSurface.clone_brush_param
---@field source_offset TilePosition
---@field destination_offset TilePosition
---@field source_positions (TilePosition)[]
---@field destination_surface? SurfaceIdentification
---@field destination_force? (LuaForce)|(string)
---If tiles should be cloned
---@field clone_tiles? boolean
---If entities should be cloned
---@field clone_entities? boolean
---If decoratives should be cloned
---@field clone_decoratives? boolean
---If the destination entities should be cleared
---@field clear_destination_entities? boolean
---If the destination decoratives should be cleared
---@field clear_destination_decoratives? boolean
---If the destination surface should be expanded when destination\_area is outside current bounds. Defaults to `false`.
---@field expand_map? boolean
---If manual-style collision checks should be done.
---@field manual_collision_mode? boolean
---If true, the building effect smoke will be shown around the new entities.
---@field create_build_effect_smoke? boolean
local LuaSurface_clone_brush_param={
}
end

do
---@class LuaSurface.clone_entities_param
---@field entities (LuaEntity)[]
---@field destination_offset Vector
---@field destination_surface? SurfaceIdentification
---@field destination_force? ForceID
---@field snap_to_grid? boolean
---If true, the building effect smoke will be shown around the new entities.
---@field create_build_effect_smoke? boolean
local LuaSurface_clone_entities_param={
}
end

do
---@class LuaSurface.create_decoratives_param
---If collision should be checked against entities/tiles.
---@field check_collision? boolean
---@field decoratives (Decorative)[]
local LuaSurface_create_decoratives_param={
}
end

do
---@class LuaSurface.create_entity_param.base
---The entity prototype name to create.
---@field name EntityID
---Where to create the entity.
---@field position MapPosition
---Desired orientation of the entity after creation.
---@field direction? defines.direction
---Quality of the entity to be created. Defaults to `normal`.
---@field quality? QualityID
---Force of the entity, default is enemy.
---@field force? ForceID
---Entity with health for the new entity to target.
---@field target? (LuaEntity)|(MapPosition)
---Source entity. Used for beams, projectiles, and highlight-boxes.
---@field source? (LuaEntity)|(MapPosition)
---Cause entity / force. The entity or force that triggered the chain of events that led to this entity being created. Used for beams, projectiles, stickers, etc. so that the damage receiver can know which entity or force to retaliate against.
---@field cause? (LuaEntity)|(ForceID)
---If false the exact position given is used to instead of snapping to the normal entity grid. This only applies if the entity normally snaps to the grid.
---@field snap_to_grid? boolean
---If true, building will attempt to simulate fast-replace building. Defaults to `false`.
---@field fast_replace? boolean
---The index of the undo item to add this action to. An index of `0` creates a new undo item for it. Defaults to putting it into the appropriate undo item automatically if not specified.
---@field item_index? uint
---If given set the last\_user to this player. If fast\_replace is true simulate fast replace using this player. Also the player whose undo queue this action should be added to.
---@field player? PlayerIdentification
---If fast\_replace is true simulate fast replace using this character.
---@field character? LuaEntity
---If false while fast\_replace is true and player is nil any items from fast-replacing will be deleted instead of dropped on the ground. Defaults to `true`.
---@field spill? boolean
---If true; [defines.events.script\_raised\_built](https://lua-api.factorio.com/latest/defines.html#defines.events.script_raised_built) will be fired on successful entity creation. Defaults to `false`.
---@field raise_built? boolean
---If false, the building effect smoke will not be shown around the new entity. Defaults to `true`.
---@field create_build_effect_smoke? boolean
---If true, entity types that have [spawn\_decoration](https://lua-api.factorio.com/latest/classes/LuaEntityPrototype.html#spawn_decorations) property will apply triggers defined in the property. Defaults to `false`.
---@field spawn_decorations? boolean
---If true, any characters that are in the way of the entity are teleported out of the way.
---@field move_stuck_players? boolean
---If provided, the entity will attempt to pull stored values from this item (for example; creating a spidertron from a previously named and mined spidertron)
---@field item? LuaItemStack
---If true, colliding ghosts and corpses will not be removed by the creation of some entity types. Defaults to `false`.
---@field preserve_ghosts_and_corpses? boolean
local LuaSurface_create_entity_param_base={
}
end

---@alias LuaSurface.create_entity_param (LuaSurface.create_entity_param.artillery_flare)|(LuaSurface.create_entity_param.artillery_projectile)|(LuaSurface.create_entity_param.assembling_machine)|(LuaSurface.create_entity_param.beam)|(LuaSurface.create_entity_param.character_corpse)|(LuaSurface.create_entity_param.cliff)|(LuaSurface.create_entity_param.container)|(LuaSurface.create_entity_param.electric_pole)|(LuaSurface.create_entity_param.entity_ghost)|(LuaSurface.create_entity_param.fire)|(LuaSurface.create_entity_param.highlight_box)|(LuaSurface.create_entity_param.inserter)|(LuaSurface.create_entity_param.item_entity)|(LuaSurface.create_entity_param.item_request_proxy)|(LuaSurface.create_entity_param.lamp)|(LuaSurface.create_entity_param.loader)|(LuaSurface.create_entity_param.loader_1x1)|(LuaSurface.create_entity_param.locomotive)|(LuaSurface.create_entity_param.logistic_container)|(LuaSurface.create_entity_param.particle)|(LuaSurface.create_entity_param.plant)|(LuaSurface.create_entity_param.programmable_speaker)|(LuaSurface.create_entity_param.projectile)|(LuaSurface.create_entity_param.resource)|(LuaSurface.create_entity_param.rolling_stock)|(LuaSurface.create_entity_param.simple_entity_with_force)|(LuaSurface.create_entity_param.simple_entity_with_owner)|(LuaSurface.create_entity_param.speech_bubble)|(LuaSurface.create_entity_param.stream)|(LuaSurface.create_entity_param.tile_ghost)|(LuaSurface.create_entity_param.underground_belt)|(LuaSurface.create_entity_param.base)

do
---@class LuaSurface.create_entity_param.artillery_flare:LuaSurface.create_entity_param.base
---@field movement Vector
---@field height float
---@field vertical_speed float
---@field frame_speed float
local LuaSurface_create_entity_param_artillery_flare={
}
end

do
---@class LuaSurface.create_entity_param.artillery_projectile:LuaSurface.create_entity_param.base
---Defaults to 1.
---@field speed? double
local LuaSurface_create_entity_param_artillery_projectile={
}
end

do
---@class LuaSurface.create_entity_param.assembling_machine:LuaSurface.create_entity_param.base
---@field recipe? string
local LuaSurface_create_entity_param_assembling_machine={
}
end

do
---@class LuaSurface.create_entity_param.beam:LuaSurface.create_entity_param.base
---Absolute target position that can be used instead of target entity (entity has precedence if both entity and position are defined).
---@field target_position? MapPosition
---Absolute source position that can be used instead of source entity (entity has precedence if both entity and position are defined).
---@field source_position? MapPosition
---If set, beam will be destroyed when distance between source and target is greater than this value.
---@field max_length? uint
---If set, beam will be destroyed after this value of ticks.
---@field duration? uint
---Source position will be offset by this value when rendering the beam.
---@field source_offset? Vector
local LuaSurface_create_entity_param_beam={
}
end

do
---@class LuaSurface.create_entity_param.character_corpse:LuaSurface.create_entity_param.base
---@field inventory_size? uint
---@field player_index? uint
local LuaSurface_create_entity_param_character_corpse={
}
end

do
---@class LuaSurface.create_entity_param.cliff:LuaSurface.create_entity_param.base
---If not specified, `direction` will be used instead.
---@field cliff_orientation? CliffOrientation
local LuaSurface_create_entity_param_cliff={
}
end

do
---@class LuaSurface.create_entity_param.container:LuaSurface.create_entity_param.base
---Inventory index where the red limiting bar should be set.
---@field bar? uint
local LuaSurface_create_entity_param_container={
}
end

do
---@class LuaSurface.create_entity_param.electric_pole:LuaSurface.create_entity_param.base
---True by default. If set to false, created electric pole will not auto connect to neighbour electric poles.
---@field auto_connect? boolean
local LuaSurface_create_entity_param_electric_pole={
}
end

do
---@class LuaSurface.create_entity_param.entity_ghost:LuaSurface.create_entity_param.base
---The prototype name of the entity contained in the ghost.
---@field inner_name string
---The [LuaEntity::tags](https://lua-api.factorio.com/latest/classes/LuaEntity.html#tags) associated with this entity ghost.
---@field tags? Tags
local LuaSurface_create_entity_param_entity_ghost={
}
end

do
---@class LuaSurface.create_entity_param.fire:LuaSurface.create_entity_param.base
---With how many small flames should the fire on ground be created. Defaults to the initial flame count of the prototype.
---@field initial_ground_flame_count? uint8
local LuaSurface_create_entity_param_fire={
}
end

do
---@class LuaSurface.create_entity_param.highlight_box:LuaSurface.create_entity_param.base
---The bounding box defining the highlight box using absolute map coordinates. If specified, the general `position` parameter still needs to be present, but will be ignored. If not specified, the game falls back to the `source` parameter first, then the `target` parameter second. One of these three parameters need to be specified.
---@field bounding_box? BoundingBox
---Specifies the graphical appearance (color) of the highlight box. Defaults to `"electricity"`.
---@field box_type? CursorBoxRenderType
---The player to render the highlight box for. If not provided, it will be rendered for all players.
---@field render_player_index? uint
---The blink interval for this highlight box. Makes it be shown every `blink_interval` ticks. Defaults to `0` (constantly shown).
---@field blink_interval? uint
---The amount of time in ticks that the highlight box will exist for. Defaults to existing forever.
---@field time_to_live? uint
local LuaSurface_create_entity_param_highlight_box={
}
end

do
---@class LuaSurface.create_entity_param.inserter:LuaSurface.create_entity_param.base
---@field conditions InserterCircuitConditions
---@field filters (InventoryFilter)[]
local LuaSurface_create_entity_param_inserter={
}
end

do
---@class LuaSurface.create_entity_param.item_entity:LuaSurface.create_entity_param.base
---The stack of items to create.
---@field stack SimpleItemStack
local LuaSurface_create_entity_param_item_entity={
}
end

do
---@class LuaSurface.create_entity_param.item_request_proxy:LuaSurface.create_entity_param.base
---The target items are to be delivered to.
---@field target LuaEntity
---The stacks of items to be delivered to target entity from logistic network.
---@field modules (BlueprintInsertPlan)[]
local LuaSurface_create_entity_param_item_request_proxy={
}
end

do
---@class LuaSurface.create_entity_param.lamp:LuaSurface.create_entity_param.base
---Defaults to white.
---@field color? Color
---Defaults to false.
---@field always_on? boolean
local LuaSurface_create_entity_param_lamp={
}
end

do
---@class LuaSurface.create_entity_param.loader:LuaSurface.create_entity_param.base
---Defaults to `"input"`.
---@field type? ("output")|("input")
---@field filters? (InventoryFilter)[]
local LuaSurface_create_entity_param_loader={
}
end

do
---@class LuaSurface.create_entity_param.loader_1x1:LuaSurface.create_entity_param.base
---Defaults to `"input"`.
---@field type? ("output")|("input")
---@field filters? (InventoryFilter)[]
local LuaSurface_create_entity_param_loader_1x1={
}
end

do
---@class LuaSurface.create_entity_param.locomotive:LuaSurface.create_entity_param.base
---Whether the locomotive should snap to an adjacent train stop. Defaults to true.
---@field snap_to_train_stop? boolean
local LuaSurface_create_entity_param_locomotive={
}
end

do
---@class LuaSurface.create_entity_param.logistic_container:LuaSurface.create_entity_param.base
---@field request_filters? (InventoryFilter)[]
local LuaSurface_create_entity_param_logistic_container={
}
end

do
---@class LuaSurface.create_entity_param.particle:LuaSurface.create_entity_param.base
---@field movement Vector
---@field height float
---@field vertical_speed float
---@field frame_speed float
local LuaSurface_create_entity_param_particle={
}
end

do
---@class LuaSurface.create_entity_param.plant:LuaSurface.create_entity_param.base
---The tick the plant will be fully grown. If not specified, the plants normal growth time is used.
---@field tick_grown? uint
local LuaSurface_create_entity_param_plant={
}
end

do
---@class LuaSurface.create_entity_param.programmable_speaker:LuaSurface.create_entity_param.base
---@field parameters? ProgrammableSpeakerParameters
---@field alert_parameters? ProgrammableSpeakerAlertParameters
local LuaSurface_create_entity_param_programmable_speaker={
}
end

do
---@class LuaSurface.create_entity_param.projectile:LuaSurface.create_entity_param.base
---Defaults to 0.
---@field speed? double
---Defaults to 1000.
---@field max_range? double
local LuaSurface_create_entity_param_projectile={
}
end

do
---@class LuaSurface.create_entity_param.resource:LuaSurface.create_entity_param.base
---@field amount uint
---If colliding trees are removed normally for this resource entity based off the prototype tree removal values. Default is true.
---@field enable_tree_removal? boolean
---If colliding cliffs are removed. Default is true.
---@field enable_cliff_removal? boolean
---If true, the resource entity will be placed to center of a tile as map generator would place it, otherwise standard non-resource grid alignment rules will apply. Default is true.
---@field snap_to_tile_center? boolean
local LuaSurface_create_entity_param_resource={
}
end

do
---@class LuaSurface.create_entity_param.rolling_stock:LuaSurface.create_entity_param.base
---The orientation of this rolling stock.
---@field orientation? RealOrientation
---The color of this rolling stock, if it supports colors.
---@field color? Color
local LuaSurface_create_entity_param_rolling_stock={
}
end

do
---@class LuaSurface.create_entity_param.simple_entity_with_force:LuaSurface.create_entity_param.base
---@field render_player_index? uint
local LuaSurface_create_entity_param_simple_entity_with_force={
}
end

do
---@class LuaSurface.create_entity_param.simple_entity_with_owner:LuaSurface.create_entity_param.base
---@field render_player_index? uint
local LuaSurface_create_entity_param_simple_entity_with_owner={
}
end

do
---@class LuaSurface.create_entity_param.speech_bubble:LuaSurface.create_entity_param.base
---@field text LocalisedString
---@field lifetime? uint
local LuaSurface_create_entity_param_speech_bubble={
}
end

do
---@class LuaSurface.create_entity_param.stream:LuaSurface.create_entity_param.base
---Absolute target position that can be used instead of target entity (entity has precedence if both entity and position are defined).
---@field target_position? MapPosition
---Absolute source position that can be used instead of source entity (entity has precedence if both entity and position are defined).
---@field source_position? MapPosition
local LuaSurface_create_entity_param_stream={
}
end

do
---@class LuaSurface.create_entity_param.tile_ghost:LuaSurface.create_entity_param.base
---The prototype name of the tile contained in the ghost.
---@field inner_name string
local LuaSurface_create_entity_param_tile_ghost={
}
end

do
---@class LuaSurface.create_entity_param.underground_belt:LuaSurface.create_entity_param.base
---Defaults to `"input"`.
---@field type? ("output")|("input")
local LuaSurface_create_entity_param_underground_belt={
}
end

do
---@class LuaSurface.create_particle_param
---The particle name.
---@field name ParticleID
---Where to create the particle.
---@field position MapPosition
---@field movement Vector
---@field height float
---@field vertical_speed float
---@field frame_speed float
local LuaSurface_create_particle_param={
}
end

do
---@class LuaSurface.create_trivial_smoke_param
---The smoke prototype name to create.
---@field name TrivialSmokeID
---Where to create the smoke.
---@field position MapPosition
local LuaSurface_create_trivial_smoke_param={
}
end

do
---@class LuaSurface.create_unit_group_param
---Initial position of the new unit group.
---@field position MapPosition
---Force of the new unit group. Defaults to `"enemy"`.
---@field force? ForceID
local LuaSurface_create_unit_group_param={
}
end

do
---@class LuaSurface.deconstruct_area_param
---The area to mark for deconstruction.
---@field area BoundingBox
---The force whose bots should perform the deconstruction.
---@field force ForceID
---The player to set the last\_user to if any.
---@field player? PlayerIdentification
---If chunks covered by fog-of-war are skipped. Defaults to `false`.
---@field skip_fog_of_war? boolean
---The deconstruction item to use if any.
---@field item? LuaItemStack
---If the deconstruction is super-forced. Defaults to `false`.
---@field super_forced? boolean
local LuaSurface_deconstruct_area_param={
}
end

do
---@class LuaSurface.destroy_decoratives_param
---@field area? BoundingBox
---@field position? TilePosition
---@field name? (DecorativeID)|((DecorativeID)[])
---@field collision_mask? (CollisionLayerID)|((CollisionLayerID)[])|({[CollisionLayerID]:true})
---@field from_layer? string
---@field to_layer? string
---Soft decoratives can be drawn over rails.
---@field exclude_soft? boolean
---@field limit? uint
---If the filters should be inverted.
---@field invert? boolean
local LuaSurface_destroy_decoratives_param={
}
end

do
---@class LuaSurface.execute_lightning_param
---@field name EntityID
---@field position MapPosition
local LuaSurface_execute_lightning_param={
}
end

do
---@class LuaSurface.find_decoratives_filtered_param
---@field area? BoundingBox
---@field position? TilePosition
---@field name? (DecorativeID)|((DecorativeID)[])
---@field collision_mask? (CollisionLayerID)|((CollisionLayerID)[])|({[CollisionLayerID]:true})
---@field from_layer? string
---@field to_layer? string
---Soft decoratives can be drawn over rails.
---@field exclude_soft? boolean
---@field limit? uint
---If the filters should be inverted.
---@field invert? boolean
local LuaSurface_find_decoratives_filtered_param={
}
end

do
---@class LuaSurface.find_nearest_enemy_param
---Center of the search area.
---@field position MapPosition
---Radius of the circular search area.
---@field max_distance double
---The force the result will be an enemy of. Uses the player force if not specified.
---@field force? ForceID
local LuaSurface_find_nearest_enemy_param={
}
end

do
---@class LuaSurface.find_nearest_enemy_entity_with_owner_param
---Center of the search area.
---@field position MapPosition
---Radius of the circular search area.
---@field max_distance double
---The force the result will be an enemy of. Uses the player force if not specified.
---@field force? ForceID
local LuaSurface_find_nearest_enemy_entity_with_owner_param={
}
end

do
---@class LuaSurface.find_units_param
---Box to find units within.
---@field area BoundingBox
---Force performing the search.
---@field force ForceID
---Only forces which meet the condition will be included in the search.
---@field condition ForceCondition
local LuaSurface_find_units_param={
}
end

do
---@class LuaSurface.play_sound_param
---The sound to play.
---@field path SoundPath
---Where the sound should be played. If not given, it's played at the current position of each player.
---@field position? MapPosition
---The volume of the sound to play. Must be between 0 and 1 inclusive.
---@field volume_modifier? double
---The volume mixer to play the sound through. Defaults to the default mixer for the given sound type.
---@field override_sound_type? SoundType
local LuaSurface_play_sound_param={
}
end

do
---@class LuaSurface.request_path_param
---The dimensions of the object that's supposed to travel the path.
---@field bounding_box BoundingBox
---The collision mask the `bounding_box` collides with.
---@field collision_mask CollisionMask
---The position from which to start pathfinding.
---@field start MapPosition
---The position to find a path to.
---@field goal MapPosition
---The force for which to generate the path, determining which gates can be opened for example.
---@field force ForceID
---How close the pathfinder needs to get to its `goal` (in tiles). Defaults to `1`.
---@field radius? double
---Flags that affect pathfinder behavior.
---@field pathfind_flags? PathfinderFlags
---Whether the path request can open gates. Defaults to `false`.
---@field can_open_gates? boolean
---Defines how coarse the pathfinder's grid is, where smaller values mean a coarser grid. Defaults to `0`, which equals a resolution of `1x1` tiles, centered on tile centers. Values range from `-8` to `8` inclusive, where each integer increment doubles/halves the resolution. So, a resolution of `-8` equals a grid of `256x256` tiles, and a resolution of `8` equals `1/256` of a tile.
---@field path_resolution_modifier? int
---Defines the maximum allowed distance between path waypoints. 0 means that paths must be contiguous (as they are for biters). Values greater than 0 will produce paths with "gaps" that are suitable for spiders. Allowed values are from `0` to `31`. Defaults to `0`.
---@field max_gap_size? int
---Defines the maximum allowed distance between the last traversable path waypoint and an obstacle entity to be destroyed. Only used when finding a discontiguous path, i.e. when `max_gap_size` > 0. This field filters out paths that are blocked by obstacles that are outside the entity's attack range. Allowed values are `0` or greater. Defaults to `max_gap_size`.
---@field max_attack_distance? double
---Makes the pathfinder ignore collisions with this entity if it is given.
---@field entity_to_ignore? LuaEntity
local LuaSurface_request_path_param={
}
end

do
---@class LuaSurface.set_multi_command_param
---@field command Command
---Number of units to give the command to.
---@field unit_count uint
---Force of the units this command is to be given to. If not specified, uses the enemy force.
---@field force? ForceID
---Radius to search for units. The search area is centered on the destination of the command. If not specified uses default value of 150.
---@field unit_search_distance? uint
local LuaSurface_set_multi_command_param={
}
end

do
---@class LuaSurface.spill_item_stack_param
---Center of the spillage
---@field position MapPosition
---Stack of items to spill
---@field stack ItemStackIdentification
---When true, each created item will be flagged with the [LuaEntity::to\_be\_looted](https://lua-api.factorio.com/latest/classes/LuaEntity.html#to_be_looted) flag. Defaults to `false`.
---@field enable_looted? boolean
---When provided (and not `nil`) the items will be marked for deconstruction by this force.
---@field force? ForceID
---Whether items can be spilled onto belts. Defaults to `true`.
---@field allow_belts? boolean
---Max radius from the specified `position` to spill items.
---@field max_radius? double
---Allow spilling items at `position` if no non-colliding position is found. Note: Setting to false might cause some items not to be spilled. Defaults to `true`.
---@field use_start_position_on_failure? boolean
local LuaSurface_spill_item_stack_param={
}
end

do
---@class LuaSurface.upgrade_area_param
---The area to mark for upgrade.
---@field area BoundingBox
---The force whose bots should perform the upgrade.
---@field force ForceID
---The player to set the last\_user to if any.
---@field player? PlayerIdentification
---If chunks covered by fog-of-war are skipped.
---@field skip_fog_of_war? boolean
---The upgrade item to use.
---@field item LuaItemStack
local LuaSurface_upgrade_area_param={
}
end

do
---A "domain" of the world. Surfaces can only be created and deleted through the API. Surfaces are uniquely identified by their name. Every game contains at least the surface "nauvis".
---
---[View Documentation](https://lua-api.factorio.com/latest/classes/LuaSurface.html)
---@class LuaSurface:LuaObject
---When set to true, the sun will always shine.
---
---[View Documentation](https://lua-api.factorio.com/latest/classes/LuaSurface.html#always_day)
---@field always_day boolean
---Defines how surface daytime brightness influences each color channel of the current color lookup table (LUT).
---
---The LUT is multiplied by `((1 - weight) + brightness * weight)` and result is clamped to range `[0, 1]`.
---
---Default is `{0, 0, 0}`, which means no influence.
---
---[View Documentation](https://lua-api.factorio.com/latest/classes/LuaSurface.html#brightness_visual_weights)
---
---### Example
---
---```
----- Makes night on the surface pitch black, LuaSurface::min_brightness is set to default value 0.15.
---game.surfaces[1].brightness_visual_weights = { 1 / 0.85, 1 / 0.85, 1 / 0.85 }
---```
---@field brightness_visual_weights ColorModifier
---Amount of darkness at the current time, as a number in range `[0, 1]`.
---
---[View Documentation](https://lua-api.factorio.com/latest/classes/LuaSurface.html#darkness)
---@field darkness float
---The daytime when dawn starts.
---
---[View Documentation](https://lua-api.factorio.com/latest/classes/LuaSurface.html#dawn)
---@field dawn double
---Current time of day, as a number in range `[0, 1)`.
---
---[View Documentation](https://lua-api.factorio.com/latest/classes/LuaSurface.html#daytime)
---@field daytime double
---If this surface can be deleted.
---
---[View Documentation](https://lua-api.factorio.com/latest/classes/LuaSurface.html#deletable)
---@field deletable boolean
---The daytime when dusk starts.
---
---[View Documentation](https://lua-api.factorio.com/latest/classes/LuaSurface.html#dusk)
---@field dusk double
---The daytime when evening starts.
---
---[View Documentation](https://lua-api.factorio.com/latest/classes/LuaSurface.html#evening)
---@field evening double
---True if daytime is currently frozen.
---
---[View Documentation](https://lua-api.factorio.com/latest/classes/LuaSurface.html#freeze_daytime)
---@field freeze_daytime boolean
---When set to true, new chunks will be generated with lab tiles, instead of using the surface's map generation settings.
---
---[View Documentation](https://lua-api.factorio.com/latest/classes/LuaSurface.html#generate_with_lab_tiles)
---@field generate_with_lab_tiles boolean
---Surface-wide effects applied to entities with effect receivers. May be `nil` if surface is not using surface-wide effect source.
---
---[View Documentation](https://lua-api.factorio.com/latest/classes/LuaSurface.html#global_effect)
---@field global_effect? ModuleEffects
---Whether this surface currently has a global electric network.
---
---[View Documentation](https://lua-api.factorio.com/latest/classes/LuaSurface.html#has_global_electric_network)
---@field has_global_electric_network boolean
---This surface's index in [LuaGameScript::surfaces](https://lua-api.factorio.com/latest/classes/LuaGameScript.html#surfaces) (unique ID). It is assigned when a surface is created, and remains so until it is [deleted](https://lua-api.factorio.com/latest/events.html#on_surface_deleted). Indexes of deleted surfaces can be reused.
---
---[View Documentation](https://lua-api.factorio.com/latest/classes/LuaSurface.html#index)
---@field index uint
---Localised name of this surface. When set, will replace the internal surface name in places where a player sees surface name.
---
---Value may be ignored if a surface has a SpacePlatform or Planet object attached to it, which take the precedence.
---
---[View Documentation](https://lua-api.factorio.com/latest/classes/LuaSurface.html#localised_name)
---@field localised_name? LocalisedString
---The generation settings for this surface. These can be modified after surface generation, but note that this will not retroactively update the surface. To manually regenerate it, [LuaSurface::regenerate\_entity](https://lua-api.factorio.com/latest/classes/LuaSurface.html#regenerate_entity), [LuaSurface::regenerate\_decorative](https://lua-api.factorio.com/latest/classes/LuaSurface.html#regenerate_decorative), and [LuaSurface::delete\_chunk](https://lua-api.factorio.com/latest/classes/LuaSurface.html#delete_chunk) can be used.
---
---[View Documentation](https://lua-api.factorio.com/latest/classes/LuaSurface.html#map_gen_settings)
---@field map_gen_settings MapGenSettings
---The minimal brightness during the night. Defaults to `0.15`. This has an effect on both rendering and game mechanics such as biter spawns and solar power.
---
---[View Documentation](https://lua-api.factorio.com/latest/classes/LuaSurface.html#min_brightness)
---@field min_brightness double
---The daytime when morning starts.
---
---[View Documentation](https://lua-api.factorio.com/latest/classes/LuaSurface.html#morning)
---@field morning double
---The name of this surface. Names are unique among surfaces.
---
---The default surface can't be renamed.
---
---**Events:**
---
---* Will raise [on\_surface\_renamed](https://lua-api.factorio.com/latest/events.html#on_surface_renamed) instantly.
---
---[View Documentation](https://lua-api.factorio.com/latest/classes/LuaSurface.html#name)
---@field name string
---Is no-enemies mode enabled on this surface?
---
---[View Documentation](https://lua-api.factorio.com/latest/classes/LuaSurface.html#no_enemies_mode)
---@field no_enemies_mode boolean
---The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.
---
---[View Documentation](https://lua-api.factorio.com/latest/classes/LuaSurface.html#object_name)
---@field object_name string
---Is peaceful mode enabled on this surface?
---
---[View Documentation](https://lua-api.factorio.com/latest/classes/LuaSurface.html#peaceful_mode)
---@field peaceful_mode boolean
---The planet associated with this surface, if there is one.
---
---Use [LuaPlanet::associate\_surface](https://lua-api.factorio.com/latest/classes/LuaPlanet.html#associate_surface) to create a new association with a planet.
---
---[View Documentation](https://lua-api.factorio.com/latest/classes/LuaSurface.html#planet)
---@field planet? LuaPlanet
---[View Documentation](https://lua-api.factorio.com/latest/classes/LuaSurface.html#platform)
---@field platform? LuaSpacePlatform
---The type of pollutant enabled on the surface, or `nil` if no pollutant is enabled.
---
---[View Documentation](https://lua-api.factorio.com/latest/classes/LuaSurface.html#pollutant_type)
---@field pollutant_type? LuaAirbornePollutantPrototype
---If clouds are shown on this surface. If false, clouds are never shown. If true the player must also have clouds enabled in graphics settings for them to be shown.
---
---[View Documentation](https://lua-api.factorio.com/latest/classes/LuaSurface.html#show_clouds)
---@field show_clouds boolean
---The multiplier of solar power on this surface. Cannot be less than 0.
---
---[View Documentation](https://lua-api.factorio.com/latest/classes/LuaSurface.html#solar_power_multiplier)
---@field solar_power_multiplier double
---The number of ticks per day for this surface.
---
---[View Documentation](https://lua-api.factorio.com/latest/classes/LuaSurface.html#ticks_per_day)
---@field ticks_per_day uint
---Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.
---
---[View Documentation](https://lua-api.factorio.com/latest/classes/LuaSurface.html#valid)
---@field valid boolean
---Current wind direction.
---
---[View Documentation](https://lua-api.factorio.com/latest/classes/LuaSurface.html#wind_orientation)
---@field wind_orientation RealOrientation
---Change in wind orientation per tick.
---
---[View Documentation](https://lua-api.factorio.com/latest/classes/LuaSurface.html#wind_orientation_change)
---@field wind_orientation_change double
---Current wind speed in tiles per tick.
---
---[View Documentation](https://lua-api.factorio.com/latest/classes/LuaSurface.html#wind_speed)
---@field wind_speed double
local LuaSurface={
---Adds the given script area.
---
---[View Documentation](https://lua-api.factorio.com/latest/classes/LuaSurface.html#add_script_area)
---@param area ScriptArea 
---@return uint  #The id of the created area.
add_script_area = function(area) end;
---Adds the given script position.
---
---[View Documentation](https://lua-api.factorio.com/latest/classes/LuaSurface.html#add_script_position)
---@param position ScriptPosition 
---@return uint  #The id of the created position.
add_script_position = function(position) end;
---Sets the given area to the checkerboard lab tiles.
---
---[View Documentation](https://lua-api.factorio.com/latest/classes/LuaSurface.html#build_checkerboard)
---@param area BoundingBox The tile area.
build_checkerboard = function(area) end;
---Send a group to build a new base.
---
---The specified force must be AI-controlled; i.e. `force.ai_controllable` must be `true`.
---
---[View Documentation](https://lua-api.factorio.com/latest/classes/LuaSurface.html#build_enemy_base)
---@param position MapPosition Location of the new base.
---@param unit_count uint Number of biters to send for the base-building task.
---@param force? ForceID Force the new base will belong to. Defaults to enemy.
build_enemy_base = function(position, unit_count, force) end;
---Calculate values for a list of tile properties at a list of positions. Requests for unrecognized properties will be ignored, so this can also be used to test whether those properties exist.
---
---[View Documentation](https://lua-api.factorio.com/latest/classes/LuaSurface.html#calculate_tile_properties)
---@param property_names (string)[] Names of properties (`"elevation"`, etc) to calculate.
---@param positions (MapPosition)[] Positions for which to calculate property values.
---@return {[string]:(double)[]}  #Table of property value lists, keyed by property name.
calculate_tile_properties = function(property_names, positions) end;
---If there exists an entity at the given location that can be fast-replaced with the given entity parameters.
---
---[View Documentation](https://lua-api.factorio.com/latest/classes/LuaSurface.html#can_fast_replace)
---@param param LuaSurface.can_fast_replace_param 
---@return boolean 
can_fast_replace = function(param) end;
---Check for collisions with terrain or other entities.
---
---[View Documentation](https://lua-api.factorio.com/latest/classes/LuaSurface.html#can_place_entity)
---@param param LuaSurface.can_place_entity_param 
---@return boolean 
can_place_entity = function(param) end;
---Cancel a deconstruction order.
---
---**Events:**
---
---* May raise [on\_cancelled\_deconstruction](https://lua-api.factorio.com/latest/events.html#on_cancelled_deconstruction) instantly.
---  Raised for every entity whose deconstruction has been successfully cancelled.
---
---[View Documentation](https://lua-api.factorio.com/latest/classes/LuaSurface.html#cancel_deconstruct_area)
---@param param LuaSurface.cancel_deconstruct_area_param 
cancel_deconstruct_area = function(param) end;
---Cancel a upgrade order.
---
---**Events:**
---
---* May raise [on\_cancelled\_upgrade](https://lua-api.factorio.com/latest/events.html#on_cancelled_upgrade) instantly.
---  Raised for every entity whose upgrade has been successfully cancelled.
---
---[View Documentation](https://lua-api.factorio.com/latest/classes/LuaSurface.html#cancel_upgrade_area)
---@param param LuaSurface.cancel_upgrade_area_param 
cancel_upgrade_area = function(param) end;
---Clears this surface deleting all entities and chunks on it.
---
---**Events:**
---
---* Will raise [on\_pre\_surface\_cleared](https://lua-api.factorio.com/latest/events.html#on_pre_surface_cleared) in a future tick.
---
---* Will raise [on\_surface\_cleared](https://lua-api.factorio.com/latest/events.html#on_surface_cleared) in a future tick.
---
---[View Documentation](https://lua-api.factorio.com/latest/classes/LuaSurface.html#clear)
---@param ignore_characters? boolean Whether characters on this surface that are connected to or associated with players should be ignored (not destroyed). Defaults to `false`.
clear = function(ignore_characters) end;
---Completely removes hidden and double hidden tiles data on this surface.
---
---[View Documentation](https://lua-api.factorio.com/latest/classes/LuaSurface.html#clear_hidden_tiles)
clear_hidden_tiles = function() end;
---Clears all pollution on this surface.
---
---[View Documentation](https://lua-api.factorio.com/latest/classes/LuaSurface.html#clear_pollution)
clear_pollution = function() end;
---Clones the given area.
---
---Entities are cloned in an order such that they can always be created, eg rails before trains.
---
---**Events:**
---
---* Will raise [on\_area\_cloned](https://lua-api.factorio.com/latest/events.html#on_area_cloned) instantly.
---  Raised after the individual `on_entity_cloned` events.
---
---* Will raise [on\_entity\_cloned](https://lua-api.factorio.com/latest/events.html#on_entity_cloned) instantly.
---  Raised for every entity that was cloned.
---
---[View Documentation](https://lua-api.factorio.com/latest/classes/LuaSurface.html#clone_area)
---@param param LuaSurface.clone_area_param 
clone_area = function(param) end;
---Clones the given area.
---
---[defines.events.on\_entity\_cloned](https://lua-api.factorio.com/latest/defines.html#defines.events.on_entity_cloned) is raised for each entity, and then [defines.events.on\_area\_cloned](https://lua-api.factorio.com/latest/defines.html#defines.events.on_area_cloned) is raised.
---
---Entities are cloned in an order such that they can always be created, eg rails before trains.
---
---[View Documentation](https://lua-api.factorio.com/latest/classes/LuaSurface.html#clone_brush)
---@param param LuaSurface.clone_brush_param 
clone_brush = function(param) end;
---Clones the given entities.
---
---Entities are cloned in an order such that they can always be created, eg rails before trains.
---
---**Events:**
---
---* Will raise [on\_entity\_cloned](https://lua-api.factorio.com/latest/events.html#on_entity_cloned) instantly.
---  Raised for every entity that was cloned.
---
---[View Documentation](https://lua-api.factorio.com/latest/classes/LuaSurface.html#clone_entities)
---@param param LuaSurface.clone_entities_param 
clone_entities = function(param) end;
---Count entities of given type or name in a given area. Works just like [LuaSurface::find\_entities\_filtered](https://lua-api.factorio.com/latest/classes/LuaSurface.html#find_entities_filtered), except this only returns the count. As it doesn't construct all the wrapper objects, this is more efficient if one is only interested in the number of entities.
---
---* If no `area` or `position` are given, the entire surface is searched.
---
---* If `position` is given, this returns the entities colliding with that position (i.e the given position is within the entity's collision box).
---
---* If `position` and `radius` are given, this returns entities in the radius of the position.
---
---* If `area` is specified, this returns entities colliding with that area.
---
---[View Documentation](https://lua-api.factorio.com/latest/classes/LuaSurface.html#count_entities_filtered)
---@param filter EntitySearchFilters 
---@return uint 
count_entities_filtered = function(filter) end;
---Count tiles of a given name in a given area. Works just like [LuaSurface::find\_tiles\_filtered](https://lua-api.factorio.com/latest/classes/LuaSurface.html#find_tiles_filtered), except this only returns the count. As it doesn't construct all the wrapper objects, this is more efficient if one is only interested in the number of tiles.
---
---If no `area` or `position` and `radius` is given, the entire surface is searched. If `position` and `radius` are given, only tiles within the radius of the position are included.
---
---[View Documentation](https://lua-api.factorio.com/latest/classes/LuaSurface.html#count_tiles_filtered)
---@param filter TileSearchFilters 
---@return uint 
count_tiles_filtered = function(filter) end;
---Adds the given decoratives to the surface.
---
---This will merge decoratives of the same type that already exist effectively increasing the "amount" field.
---
---[View Documentation](https://lua-api.factorio.com/latest/classes/LuaSurface.html#create_decoratives)
---@param param LuaSurface.create_decoratives_param 
create_decoratives = function(param) end;
---Create an entity on this surface.
---
---**Events:**
---
---* May raise [script\_raised\_built](https://lua-api.factorio.com/latest/events.html#script_raised_built) instantly.
---  Raised if the `raise_built` flag was set and the entity was successfully created.
---
---### Example
---
---```
---local asm = game.surfaces[1].create_entity{name = "assembling-machine-1", position = {15, 3}, force = game.forces.player, recipe = "iron-stick"}
---```
---
---### Example
---
---```
----- Creates a filter inserter with circuit conditions and a filter
---game.surfaces[1].create_entity{
---  name = "filter-inserter", position = {20, 15}, force = game.player.force,
---  conditions =
---  {
---    red = {name = "wood", count = 3, operator = ">"},
---    green = {name = "iron-ore", count = 1, operator = "<"},
---    logistics = {name = "wood", count = 3, operator = "="}
---  },
---  filters = {{index = 1, name = "iron-ore"}}
---}
---```
---
---### Example
---
---```
----- Creates a requester chest already set to request 128 iron plates.
---game.surfaces[1].create_entity{
---  name = "requester-chest", position = {game.player.position.x+3, game.player.position.y},
---  force = game.player.force, request_filters = {{index = 1, name = "iron-plate", count = 128}}
---}
---```
---
---### Example
---
---```
---game.surfaces[1].create_entity{name = "big-biter", position = {15, 3}, force = game.forces.player} -- Friendly biter
---game.surfaces[1].create_entity{name = "medium-biter", position = {15, 3}, force = game.forces.enemy} -- Enemy biter
---```
---
---### Example
---
---```
----- Creates a basic inserter at the player's location facing north
---game.surfaces[1].create_entity{name = "inserter", position = game.player.position, direction = defines.direction.north}
---```
---
---[View Documentation](https://lua-api.factorio.com/latest/classes/LuaSurface.html#create_entity)
---@param param LuaSurface.create_entity_param 
---@return LuaEntity?  #The created entity or `nil` if the creation failed.
create_entity = function(param) end;
---Creates a global electric network for this surface, if one doesn't exist already.
---
---[View Documentation](https://lua-api.factorio.com/latest/classes/LuaSurface.html#create_global_electric_network)
create_global_electric_network = function() end;
---Creates a particle at the given location
---
---[View Documentation](https://lua-api.factorio.com/latest/classes/LuaSurface.html#create_particle)
---@param param LuaSurface.create_particle_param 
create_particle = function(param) end;
---[View Documentation](https://lua-api.factorio.com/latest/classes/LuaSurface.html#create_trivial_smoke)
---@param param LuaSurface.create_trivial_smoke_param 
create_trivial_smoke = function(param) end;
---Create a new unit group at a given position.
---
---**Events:**
---
---* Will raise [on\_unit\_group\_created](https://lua-api.factorio.com/latest/events.html#on_unit_group_created) instantly.
---
---[View Documentation](https://lua-api.factorio.com/latest/classes/LuaSurface.html#create_unit_group)
---@param param LuaSurface.create_unit_group_param 
---@return LuaCommandable 
create_unit_group = function(param) end;
---Place a deconstruction request.
---
---**Events:**
---
---* May raise [on\_marked\_for\_deconstruction](https://lua-api.factorio.com/latest/events.html#on_marked_for_deconstruction) instantly.
---  Raised for every entity that has been successfully marked for deconstruction.
---
---[View Documentation](https://lua-api.factorio.com/latest/classes/LuaSurface.html#deconstruct_area)
---@param param LuaSurface.deconstruct_area_param 
deconstruct_area = function(param) end;
---Whether the given decorative prototype collides at the given position and direction.
---
---[View Documentation](https://lua-api.factorio.com/latest/classes/LuaSurface.html#decorative_prototype_collides)
---@param prototype DecorativeID The decorative prototype to check.
---@param position MapPosition The position to check.
---@return boolean 
decorative_prototype_collides = function(prototype, position) end;
---**Events:**
---
---* Will raise [on\_chunk\_deleted](https://lua-api.factorio.com/latest/events.html#on_chunk_deleted) in a future tick.
---
---* Will raise [on\_pre\_chunk\_deleted](https://lua-api.factorio.com/latest/events.html#on_pre_chunk_deleted) in a future tick.
---
---[View Documentation](https://lua-api.factorio.com/latest/classes/LuaSurface.html#delete_chunk)
---@param position ChunkPosition The chunk position to delete
delete_chunk = function(position) end;
---Removes all decoratives from the given area. If no area and no position are given, then the entire surface is searched.
---
---[View Documentation](https://lua-api.factorio.com/latest/classes/LuaSurface.html#destroy_decoratives)
---@param param LuaSurface.destroy_decoratives_param 
destroy_decoratives = function(param) end;
---Destroys the global electric network for this surface, if it exists.
---
---[View Documentation](https://lua-api.factorio.com/latest/classes/LuaSurface.html#destroy_global_electric_network)
destroy_global_electric_network = function() end;
---Sets the given script area to the new values.
---
---[View Documentation](https://lua-api.factorio.com/latest/classes/LuaSurface.html#edit_script_area)
---@param id uint The area to edit.
---@param area ScriptArea 
edit_script_area = function(id, area) end;
---Sets the given script position to the new values.
---
---[View Documentation](https://lua-api.factorio.com/latest/classes/LuaSurface.html#edit_script_position)
---@param id uint The position to edit.
---@param position ScriptPosition 
edit_script_position = function(id, position) end;
---Whether the given entity prototype collides at the given position and direction.
---
---[View Documentation](https://lua-api.factorio.com/latest/classes/LuaSurface.html#entity_prototype_collides)
---@param prototype EntityID The entity prototype to check.
---@param position MapPosition The position to check.
---@param use_map_generation_bounding_box boolean If the map generation bounding box should be used instead of the collision bounding box.
---@param direction? defines.direction 
---@return boolean 
entity_prototype_collides = function(prototype, position, use_map_generation_bounding_box, direction) end;
---Creates lightning. If other entities which can be lightning targets are nearby, the final position will be adjusted.
---
---[View Documentation](https://lua-api.factorio.com/latest/classes/LuaSurface.html#execute_lightning)
---@param param LuaSurface.execute_lightning_param 
execute_lightning = function(param) end;
---Find the logistic network with a cell closest to a given position.
---
---[View Documentation](https://lua-api.factorio.com/latest/classes/LuaSurface.html#find_closest_logistic_network_by_position)
---@param position MapPosition 
---@param force ForceID Force the logistic network should belong to.
---@return LuaLogisticNetwork?  #The found network or `nil` if no such network was found.
find_closest_logistic_network_by_position = function(position, force) end;
---Find decoratives of a given name in a given area.
---
---If no filters are given, returns all decoratives in the search area. If multiple filters are specified, returns only decoratives matching every given filter. If no area and no position are given, the entire surface is searched.
---
---### Example
---
---```
---game.surfaces[1].find_decoratives_filtered{area = {{-10, -10}, {10, 10}}, name = "sand-decal"} -- gets all sand-decals in the rectangle
---game.surfaces[1].find_decoratives_filtered{area = {{-10, -10}, {10, 10}}, limit = 5}  -- gets the first 5 decoratives in the rectangle
---```
---
---[View Documentation](https://lua-api.factorio.com/latest/classes/LuaSurface.html#find_decoratives_filtered)
---@param param LuaSurface.find_decoratives_filtered_param 
---@return (DecorativeResult)[] 
find_decoratives_filtered = function(param) end;
---Find enemy units (entities with type "unit") of a given force within an area.
---
---This is more efficient than [LuaSurface::find\_entities](https://lua-api.factorio.com/latest/classes/LuaSurface.html#find_entities).
---
---### Example
---
---```
----- Find all units who would be interested to attack the player, within 100-tile area.
---local enemies = game.player.surface.find_enemy_units(game.player.position, 100)
---```
---
---[View Documentation](https://lua-api.factorio.com/latest/classes/LuaSurface.html#find_enemy_units)
---@param center MapPosition Center of the search area
---@param radius double Radius of the circular search area
---@param force? ForceID Force to find enemies of. If not given, uses the player force.
---@return (LuaEntity)[] 
find_enemy_units = function(center, radius, force) end;
---Find entities in a given area.
---
---If no area is given all entities on the surface are returned.
---
---### Example
---
---```
----- Will evaluate to a list of all entities within given area.
---game.surfaces["nauvis"].find_entities({{-10, -10}, {10, 10}})
---```
---
---[View Documentation](https://lua-api.factorio.com/latest/classes/LuaSurface.html#find_entities)
---@param area? BoundingBox 
---@return (LuaEntity)[] 
find_entities = function(area) end;
---Find all entities of the given type or name in the given area.
---
---If no filters (`name`, `type`, `force`, etc.) are given, this returns all entities in the search area. If multiple filters are specified, only entities matching all given filters are returned.
---
---* If no `area` or `position` are given, the entire surface is searched.
---
---* If `position` is given, this returns the entities colliding with that position (i.e the given position is within the entity's collision box).
---
---* If `position` and `radius` are given, this returns the entities within the radius of the position. Looks for the center of entities.
---
---* If `area` is specified, this returns the entities colliding with that area.
---
---### Example
---
---```
---game.surfaces[1].find_entities_filtered{area = {{-10, -10}, {10, 10}}, type = "resource"} -- gets all resources in the rectangle
---game.surfaces[1].find_entities_filtered{area = {{-10, -10}, {10, 10}}, name = "iron-ore"} -- gets all iron ores in the rectangle
---game.surfaces[1].find_entities_filtered{area = {{-10, -10}, {10, 10}}, name = {"iron-ore", "copper-ore"}} -- gets all iron ore and copper ore in the rectangle
---game.surfaces[1].find_entities_filtered{area = {{-10, -10}, {10, 10}}, force = "player"}  -- gets player owned entities in the rectangle
---game.surfaces[1].find_entities_filtered{area = {{-10, -10}, {10, 10}}, limit = 5}  -- gets the first 5 entities in the rectangle
---game.surfaces[1].find_entities_filtered{position = {0, 0}, radius = 10}  -- gets all entities within 10 tiles of the position [0,0].
---```
---
---[View Documentation](https://lua-api.factorio.com/latest/classes/LuaSurface.html#find_entities_filtered)
---@param filter EntitySearchFilters 
---@return (LuaEntity)[] 
find_entities_filtered = function(filter) end;
---Find an entity of the given name at the given position. This checks both the exact position and the bounding box of the entity.
---
---### Example
---
---```
---game.player.selected.surface.find_entity('filter-inserter', {0,0})
---```
---
---[View Documentation](https://lua-api.factorio.com/latest/classes/LuaSurface.html#find_entity)
---@param entity EntityWithQualityID Name of the entity to look for.
---@param position MapPosition Coordinates to look at.
---@return LuaEntity?  #`nil` if no such entity is found.
find_entity = function(entity, position) end;
---Find the logistic network that covers a given position.
---
---[View Documentation](https://lua-api.factorio.com/latest/classes/LuaSurface.html#find_logistic_network_by_position)
---@param position MapPosition 
---@param force ForceID Force the logistic network should belong to.
---@return LuaLogisticNetwork?  #The found network or `nil` if no such network was found.
find_logistic_network_by_position = function(position, force) end;
---Finds all of the logistics networks whose construction area intersects with the given position.
---
---[View Documentation](https://lua-api.factorio.com/latest/classes/LuaSurface.html#find_logistic_networks_by_construction_area)
---@param position MapPosition 
---@param force ForceID Force the logistic networks should belong to.
---@return (LuaLogisticNetwork)[] 
find_logistic_networks_by_construction_area = function(position, force) end;
---Find the enemy military target ([military entity](https://wiki.factorio.com/Military_units_and_structures)) closest to the given position.
---
---[View Documentation](https://lua-api.factorio.com/latest/classes/LuaSurface.html#find_nearest_enemy)
---@param param LuaSurface.find_nearest_enemy_param 
---@return LuaEntity?  #The nearest enemy military target or `nil` if no enemy could be found within the given area.
find_nearest_enemy = function(param) end;
---Find the enemy entity-with-owner closest to the given position.
---
---[View Documentation](https://lua-api.factorio.com/latest/classes/LuaSurface.html#find_nearest_enemy_entity_with_owner)
---@param param LuaSurface.find_nearest_enemy_entity_with_owner_param 
---@return LuaEntity  #The nearest enemy entity-with-owner or `nil` if no enemy could be found within the given area.
find_nearest_enemy_entity_with_owner = function(param) end;
---Find a non-colliding position within a given radius.
---
---Special care needs to be taken when using a radius of `0`. The game will not stop searching until it finds a suitable position, so it is important to make sure such a position exists. One particular case where it would not be able to find a solution is running it before any chunks have been generated.
---
---[View Documentation](https://lua-api.factorio.com/latest/classes/LuaSurface.html#find_non_colliding_position)
---@param name EntityID Prototype name of the entity to find a position for. (The bounding box for the collision checking is taken from this prototype.)
---@param center MapPosition Center of the search area.
---@param radius double Max distance from `center` to search in. A radius of `0` means an infinitely-large search area.
---@param precision double The step length from the given position as it searches, in tiles. Minimum value is `0.01`.
---@param force_to_tile_center? boolean Will only check tile centers. This can be useful when your intent is to place a building at the resulting position, as they must generally be placed at tile centers. Defaults to `false`.
---@return MapPosition?  #The non-colliding position. May be `nil` if no suitable position was found.
find_non_colliding_position = function(name, center, radius, precision, force_to_tile_center) end;
---Find a non-colliding position within a given rectangle.
---
---[View Documentation](https://lua-api.factorio.com/latest/classes/LuaSurface.html#find_non_colliding_position_in_box)
---@param name EntityID Prototype name of the entity to find a position for. (The bounding box for the collision checking is taken from this prototype.)
---@param search_space BoundingBox The rectangle to search inside.
---@param precision double The step length from the given position as it searches, in tiles. Minimum value is 0.01.
---@param force_to_tile_center? boolean Will only check tile centers. This can be useful when your intent is to place a building at the resulting position, as they must generally be placed at tile centers. Defaults to `false`.
---@return MapPosition?  #The non-colliding position. May be `nil` if no suitable position was found.
find_non_colliding_position_in_box = function(name, search_space, precision, force_to_tile_center) end;
---Find all tiles of the given name in the given area.
---
---If no filters are given, this returns all tiles in the search area.
---
---If no `area` or `position` and `radius` is given, the entire surface is searched. If `position` and `radius` are given, only tiles within the radius of the position are included.
---
---[View Documentation](https://lua-api.factorio.com/latest/classes/LuaSurface.html#find_tiles_filtered)
---@param filter TileSearchFilters 
---@return (LuaTile)[] 
find_tiles_filtered = function(filter) end;
---Find units (entities with type "unit") of a given force and force condition within a given area.
---
---This is more efficient than [LuaSurface::find\_entities](https://lua-api.factorio.com/latest/classes/LuaSurface.html#find_entities).
---
---### Example
---
---```
----- Find friendly units to "player" force
---local friendly_units = game.player.surface.find_units({area = {{-10, -10},{10, 10}}, force = "player", condition = "friend")
---```
---
---### Example
---
---```
----- Find units of "player" force
---local units = game.player.surface.find_units({area = {{-10, -10},{10, 10}}, force = "player", condition = "same"})
---```
---
---[View Documentation](https://lua-api.factorio.com/latest/classes/LuaSurface.html#find_units)
---@param param LuaSurface.find_units_param 
---@return (LuaEntity)[] 
find_units = function(param) end;
---Blocks and generates all chunks that have been requested using all available threads.
---
---[View Documentation](https://lua-api.factorio.com/latest/classes/LuaSurface.html#force_generate_chunk_requests)
force_generate_chunk_requests = function() end;
---Get an iterator going over every chunk on this surface.
---
---[View Documentation](https://lua-api.factorio.com/latest/classes/LuaSurface.html#get_chunks)
---@return LuaChunkIterator 
get_chunks = function() end;
---Gets the closest entity in the list to this position.
---
---[View Documentation](https://lua-api.factorio.com/latest/classes/LuaSurface.html#get_closest)
---@param position MapPosition 
---@param entities (LuaEntity)[] The Entities to check.
---@return LuaEntity? 
get_closest = function(position, entities) end;
---Gets all tiles of the given types that are connected horizontally or vertically to the given tile position including the given tile position.
---
---This won't find tiles in non-generated chunks.
---
---[View Documentation](https://lua-api.factorio.com/latest/classes/LuaSurface.html#get_connected_tiles)
---@param position TilePosition The tile position to start at.
---@param tiles (TileID)[] The tiles to search for.
---@param include_diagonal? boolean Include tiles that are connected diagonally.
---@param area? BoundingBox The area to find connected tiles in. If provided the start position must be in this area.
---@return (TilePosition)[]  #The resulting set of tiles.
get_connected_tiles = function(position, tiles, include_diagonal, area) end;
---The double hidden tile name or `nil` if there isn't one for the given position.
---
---[View Documentation](https://lua-api.factorio.com/latest/classes/LuaSurface.html#get_double_hidden_tile)
---@param position TilePosition The tile position.
---@return string 
get_double_hidden_tile = function(position) end;
---Returns all the military targets (entities with force) on this chunk for the given force.
---
---[View Documentation](https://lua-api.factorio.com/latest/classes/LuaSurface.html#get_entities_with_force)
---@param position ChunkPosition The chunk's position.
---@param force ForceID Entities of this force will be returned.
---@return (LuaEntity)[] 
get_entities_with_force = function(position, force) end;
---The hidden tile name.
---
---[View Documentation](https://lua-api.factorio.com/latest/classes/LuaSurface.html#get_hidden_tile)
---@param position TilePosition The tile position.
---@return string?  #`nil` if there isn't one for the given position.
get_hidden_tile = function(position) end;
---Gets the map exchange string for the current map generation settings of this surface.
---
---[View Documentation](https://lua-api.factorio.com/latest/classes/LuaSurface.html#get_map_exchange_string)
---@return string 
get_map_exchange_string = function() end;
---Get the pollution for a given position.
---
---Pollution is stored per chunk, so this will return the same value for all positions in one chunk.
---
---### Example
---
---```
---game.surfaces[1].get_pollution({1,2})
---```
---
---[View Documentation](https://lua-api.factorio.com/latest/classes/LuaSurface.html#get_pollution)
---@param position MapPosition The position to poll the chunk's pollution
---@return double 
get_pollution = function(position) end;
---Gets the value of surface property on this surface.
---
---[View Documentation](https://lua-api.factorio.com/latest/classes/LuaSurface.html#get_property)
---@param property SurfacePropertyID Property to read.
---@return double  #Value of the property.
get_property = function(property) end;
---Gets a random generated chunk position or 0,0 if no chunks have been generated on this surface.
---
---[View Documentation](https://lua-api.factorio.com/latest/classes/LuaSurface.html#get_random_chunk)
---@return ChunkPosition 
get_random_chunk = function() end;
---Gets the resource amount of all resources on this surface
---
---[View Documentation](https://lua-api.factorio.com/latest/classes/LuaSurface.html#get_resource_counts)
---@return {[string]:uint} 
get_resource_counts = function() end;
---Gets the first script area by name or id.
---
---[View Documentation](https://lua-api.factorio.com/latest/classes/LuaSurface.html#get_script_area)
---@param key? (string)|(uint) The name or id of the area to get.
---@return ScriptArea? 
get_script_area = function(key) end;
---Gets the script areas that match the given name or if no name is given all areas are returned.
---
---[View Documentation](https://lua-api.factorio.com/latest/classes/LuaSurface.html#get_script_areas)
---@param name? string 
---@return (ScriptArea)[] 
get_script_areas = function(name) end;
---Gets the first script position by name or id.
---
---[View Documentation](https://lua-api.factorio.com/latest/classes/LuaSurface.html#get_script_position)
---@param key? (string)|(uint) The name or id of the position to get.
---@return ScriptPosition? 
get_script_position = function(key) end;
---Gets the script positions that match the given name or if no name is given all positions are returned.
---
---[View Documentation](https://lua-api.factorio.com/latest/classes/LuaSurface.html#get_script_positions)
---@param name? string 
---@return (ScriptPosition)[] 
get_script_positions = function(name) end;
---Gets the starting area radius of this surface.
---
---[View Documentation](https://lua-api.factorio.com/latest/classes/LuaSurface.html#get_starting_area_radius)
---@return double 
get_starting_area_radius = function() end;
---Get the tile at a given position. An alternative call signature for this method is passing it a single [TilePosition](https://lua-api.factorio.com/latest/concepts.html#TilePosition).
---
---Non-integer values will result in them being rounded down.
---
---[View Documentation](https://lua-api.factorio.com/latest/classes/LuaSurface.html#get_tile)
---@param x int 
---@param y int 
---@return LuaTile 
get_tile = function(x, y) end;
---Gets the total amount of pollution on the surface by iterating over all the chunks containing pollution.
---
---[View Documentation](https://lua-api.factorio.com/latest/classes/LuaSurface.html#get_total_pollution)
---@return double 
get_total_pollution = function() end;
---Is a given chunk generated?
---
---[View Documentation](https://lua-api.factorio.com/latest/classes/LuaSurface.html#is_chunk_generated)
---@param position ChunkPosition The chunk's position.
---@return boolean 
is_chunk_generated = function(position) end;
---Play a sound for every player on this surface.
---
---The sound is not played if its location is not [charted](https://lua-api.factorio.com/latest/classes/LuaForce.html#chart) for that player.
---
---[View Documentation](https://lua-api.factorio.com/latest/classes/LuaSurface.html#play_sound)
---@param param LuaSurface.play_sound_param 
play_sound = function(param) end;
---Spawn pollution at the given position.
---
---[View Documentation](https://lua-api.factorio.com/latest/classes/LuaSurface.html#pollute)
---@param source MapPosition Where to spawn the pollution.
---@param amount double How much pollution to add.
pollute = function(source, amount) end;
---Print text to the chat console of all players on this surface.
---
---By default, messages that are identical to a message sent in the last 60 ticks are not printed again.
---
---[View Documentation](https://lua-api.factorio.com/latest/classes/LuaSurface.html#print)
---@param message LocalisedString 
---@param print_settings? PrintSettings 
print = function(message, print_settings) end;
---Regenerate autoplacement of some decoratives on this surface. This can be used to autoplace newly-added decoratives.
---
---All specified decorative prototypes must be autoplacable. If nothing is given all decoratives are generated on all chunks.
---
---[View Documentation](https://lua-api.factorio.com/latest/classes/LuaSurface.html#regenerate_decorative)
---@param decoratives? (string)|((string)[]) Prototype names of decorative or decoratives to autoplace. When `nil` all decoratives with an autoplace are used.
---@param chunks? (ChunkPosition)[] The chunk positions to regenerate the decoratives on. If not given all chunks are regenerated. Note chunks with status < entities are ignored.
regenerate_decorative = function(decoratives, chunks) end;
---Regenerate autoplacement of some entities on this surface. This can be used to autoplace newly-added entities.
---
---All specified entity prototypes must be autoplacable. If nothing is given all entities are generated on all chunks.
---
---[View Documentation](https://lua-api.factorio.com/latest/classes/LuaSurface.html#regenerate_entity)
---@param entities? (string)|((string)[]) Prototype names of entity or entities to autoplace. When `nil` all entities with an autoplace are used.
---@param chunks? (ChunkPosition)[] The chunk positions to regenerate the entities on. If not given all chunks are regenerated. Note chunks with status < entities are ignored.
regenerate_entity = function(entities, chunks) end;
---Removes the given script area.
---
---[View Documentation](https://lua-api.factorio.com/latest/classes/LuaSurface.html#remove_script_area)
---@param id uint 
---@return boolean  #If the area was actually removed. False when it didn't exist.
remove_script_area = function(id) end;
---Removes the given script position.
---
---[View Documentation](https://lua-api.factorio.com/latest/classes/LuaSurface.html#remove_script_position)
---@param id uint 
---@return boolean  #If the position was actually removed. False when it didn't exist.
remove_script_position = function(id) end;
---Generates a path with the specified constraints (as an array of [PathfinderWaypoints](https://lua-api.factorio.com/latest/concepts.html#PathfinderWaypoint)) using the unit pathfinding algorithm. This path can be used to emulate pathing behavior by script for non-unit entities, such as vehicles. If you want to command actual units (such as biters or spitters) to move, use [LuaEntity::set\_command](https://lua-api.factorio.com/latest/classes/LuaEntity.html#set_command) instead.
---
---The resulting path is ultimately returned asynchronously via [on\_script\_path\_request\_finished](https://lua-api.factorio.com/latest/events.html#on_script_path_request_finished).
---
---**Events:**
---
---* Will raise [on\_script\_path\_request\_finished](https://lua-api.factorio.com/latest/events.html#on_script_path_request_finished) in a future tick.
---
---[View Documentation](https://lua-api.factorio.com/latest/classes/LuaSurface.html#request_path)
---@param param LuaSurface.request_path_param 
---@return uint  #A unique handle to identify this call when [on\_script\_path\_request\_finished](https://lua-api.factorio.com/latest/events.html#on_script_path_request_finished) fires.
request_path = function(param) end;
---Request that the game's map generator generate chunks at the given position for the given radius on this surface. If the radius is `0`, then only the chunk at the given position is generated.
---
---[View Documentation](https://lua-api.factorio.com/latest/classes/LuaSurface.html#request_to_generate_chunks)
---@param position MapPosition Where to generate the new chunks.
---@param radius? uint The chunk radius from `position` to generate new chunks in. Defaults to `0`.
request_to_generate_chunks = function(position, radius) end;
---Set generated status of a chunk. Useful when copying chunks.
---
---[View Documentation](https://lua-api.factorio.com/latest/classes/LuaSurface.html#set_chunk_generated_status)
---@param position ChunkPosition The chunk's position.
---@param status defines.chunk_generated_status The chunk's new status.
set_chunk_generated_status = function(position, status) end;
---Set double hidden tile for the specified position. During normal gameplay, only [non-mineable](https://lua-api.factorio.com/latest/classes/LuaTilePrototype.html#mineable_properties) tiles can become double hidden.
---
---Does nothing if hidden tile at specified position does not exist.
---
---[View Documentation](https://lua-api.factorio.com/latest/classes/LuaSurface.html#set_double_hidden_tile)
---@param position TilePosition The tile position.
---@param tile? TileID The new double hidden tile or `nil` to clear the double hidden tile.
set_double_hidden_tile = function(position, tile) end;
---Set the hidden tile for the specified position. While during normal gameplay only [non-mineable](https://lua-api.factorio.com/latest/classes/LuaTilePrototype.html#mineable_properties) or [foundation](https://lua-api.factorio.com/latest/classes/LuaTilePrototype.html#is_foundation) tiles can become hidden, this method allows any kind of tile to be set as the hidden one.
---
---[View Documentation](https://lua-api.factorio.com/latest/classes/LuaSurface.html#set_hidden_tile)
---@param position TilePosition The tile position.
---@param tile? TileID The new hidden tile or `nil` to clear the hidden tile.
set_hidden_tile = function(position, tile) end;
---Give a command to multiple units. This will automatically select suitable units for the task.
---
---[View Documentation](https://lua-api.factorio.com/latest/classes/LuaSurface.html#set_multi_command)
---@param param LuaSurface.set_multi_command_param 
---@return uint  #Number of units actually sent. May be less than `count` if not enough units were available.
set_multi_command = function(param) end;
---Sets the value of surface property on this surface.
---
---[View Documentation](https://lua-api.factorio.com/latest/classes/LuaSurface.html#set_property)
---@param property SurfacePropertyID Property to change.
---@param value double The wanted value of the property.
set_property = function(property, value) end;
---Set tiles at specified locations. Can automatically correct the edges around modified tiles.
---
---Placing a [mineable](https://lua-api.factorio.com/latest/classes/LuaTilePrototype.html#mineable_properties) tile on top of a non-mineable or [foundation](https://lua-api.factorio.com/latest/classes/LuaTilePrototype.html#is_foundation) one will turn the latter into the [LuaTile::hidden\_tile](https://lua-api.factorio.com/latest/classes/LuaTile.html#hidden_tile) for that tile. Placing a mineable tile on a mineable one or a non-mineable tile on a non-mineable one or a foundation tile on a foundation one will not modify the hidden tile. This restriction can however be circumvented by using [LuaSurface::set\_hidden\_tile](https://lua-api.factorio.com/latest/classes/LuaSurface.html#set_hidden_tile). Placing a non-foundation tile on top of a foundation one when there already exists a hidden tile will push hidden tile to [double hidden](https://lua-api.factorio.com/latest/classes/LuaTile.html#double_hidden_tile), and foundation tile will turn into hidden.
---
---It is recommended to call this method once for all the tiles you want to change rather than calling it individually for every tile. As the tile correction is used after every step, calling it one by one could cause the tile correction logic to redo some of the changes. Also, many small API calls are generally more performance intensive than one big one.
---
---**Events:**
---
---* May raise [script\_raised\_set\_tiles](https://lua-api.factorio.com/latest/events.html#script_raised_set_tiles) instantly.
---  Raised if the `raise_event` flag was set.
---
---[View Documentation](https://lua-api.factorio.com/latest/classes/LuaSurface.html#set_tiles)
---@param tiles (Tile)[] 
---@param correct_tiles? boolean If `false`, the correction logic is not applied to the changed tiles. Defaults to `true`.
---@param remove_colliding_entities? (boolean)|("abort_on_collision") Defaults to `true`.
---@param remove_colliding_decoratives? boolean Defaults to `true`.
---@param raise_event? boolean Defaults to `false`.
---@param player? PlayerIdentification The player whose undo queue to add these actions to.
---@param undo_index? uint The index of the undo item to add this action to. An index of `0` creates a new undo item for it. Defaults to putting it into the appropriate undo item automatically if not specified.
set_tiles = function(tiles, correct_tiles, remove_colliding_entities, remove_colliding_decoratives, raise_event, player, undo_index) end;
---Spill items on the ground centered at a given location.
---
---[View Documentation](https://lua-api.factorio.com/latest/classes/LuaSurface.html#spill_item_stack)
---@param param LuaSurface.spill_item_stack_param 
---@return (LuaEntity)[]  #The created item-on-ground entities.
spill_item_stack = function(param) end;
---Place an upgrade request.
---
---**Events:**
---
---* May raise [on\_marked\_for\_upgrade](https://lua-api.factorio.com/latest/events.html#on_marked_for_upgrade) instantly.
---  Raised for every entity that has been successfully marked for upgrade.
---
---[View Documentation](https://lua-api.factorio.com/latest/classes/LuaSurface.html#upgrade_area)
---@param param LuaSurface.upgrade_area_param 
upgrade_area = function(param) end;
}
end

